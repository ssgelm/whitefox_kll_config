
kiibohd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007914  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .usbdescriptortable 00000160  1fff8000  1fff8000  00018000  2**2
                  ALLOC
  2 .dmabuffers   00000000  1fff8160  1fff8160  00011050  2**0
                  CONTENTS
  3 .usbbuffers   00000870  1fff8160  1fff8160  00018000  2**0
                  ALLOC
  4 .data         00000680  1fff89d0  00009914  000109d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001024  1fff9050  00009f94  00011050  2**2
                  ALLOC
  6 .debug_info   0000d728  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028c5  00000000  00000000  0001e778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000778  00000000  00000000  0002103d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000928  00000000  00000000  000217b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00009f97  00000000  00000000  000220dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006409  00000000  00000000  0002c074  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000206e9  00000000  00000000  0003247d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  00052b66  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000033  00000000  00000000  00052bd6  2**0
                  CONTENTS, READONLY
 15 .debug_frame  0000147c  00000000  00000000  00052c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00005638  00000000  00000000  00054088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <gVectors>:
    2000:	00 80 00 20 bd 21 00 00 81 24 00 00 8d 24 00 00     ... .!...$...$..
    2010:	c1 24 00 00 01 25 00 00 41 25 00 00 3d 24 00 00     .$...%..A%..=$..
    2020:	3d 24 00 00 3d 24 00 00 3d 24 00 00 79 24 00 00     =$..=$..=$..y$..
    2030:	79 24 00 00 3d 24 00 00 79 24 00 00 2d 24 00 00     y$..=$..y$..-$..
    2040:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2050:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2060:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2070:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2080:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2090:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20a0:	19 27 00 00 79 24 00 00 79 24 00 00 79 24 00 00     .'..y$..y$..y$..
    20b0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20c0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20d0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20e0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20f0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2100:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2110:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2120:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2130:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2140:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2150:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2160:	79 24 00 00 c5 4d 00 00 79 24 00 00 79 24 00 00     y$...M..y$..y$..
    2170:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2180:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2190:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    21a0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    21b0:	79 24 00 00 79 24 00 00 79 24 00 00                 y$..y$..y$..

000021bc <ResetHandler>:

// ----- Chip Entry Point -----

__attribute__ ((section(".startup")))
void ResetHandler()
{
    21bc:	b508      	push	{r3, lr}
		SCB_VTOR = addr; // relocate vector table
		jump_to_app( addr );
	}
#endif
	// Disable Watchdog
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
    21be:	4b3e      	ldr	r3, [pc, #248]	; (22b8 <ResetHandler+0xfc>)
    21c0:	f24c 5220 	movw	r2, #50464	; 0xc520
    21c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    21c6:	f64d 1228 	movw	r2, #55592	; 0xd928
    21ca:	801a      	strh	r2, [r3, #0]
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    21cc:	2210      	movs	r2, #16
    21ce:	f823 2c0e 	strh.w	r2, [r3, #-14]

	uint32_t *src = (uint32_t*)&_etext;
	uint32_t *dest = (uint32_t*)&_sdata;

	// Enable clocks to always-used peripherals
	SIM_SCGC5 = 0x00043F82; // Clocks active to all GPIO
    21d2:	f5a3 431f 	sub.w	r3, r3, #40704	; 0x9f00
    21d6:	3bd6      	subs	r3, #214	; 0xd6
    21d8:	4a38      	ldr	r2, [pc, #224]	; (22bc <ResetHandler+0x100>)
    21da:	601a      	str	r2, [r3, #0]
	SIM_SCGC6 = SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
    21dc:	4a38      	ldr	r2, [pc, #224]	; (22c0 <ResetHandler+0x104>)
    21de:	605a      	str	r2, [r3, #4]
#if defined(_mk20dx128_)
	SIM_SCGC6 |= SIM_SCGC6_RTC;
#elif defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
    21e0:	4a38      	ldr	r2, [pc, #224]	; (22c4 <ResetHandler+0x108>)
    21e2:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
    21e6:	6011      	str	r1, [r2, #0]
	SIM_SCGC6 |= SIM_SCGC6_RTC;
    21e8:	685a      	ldr	r2, [r3, #4]
    21ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    21ee:	605a      	str	r2, [r3, #4]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// release I/O pins hold, if we woke up from VLLS mode
	if ( PMC_REGSC & PMC_REGSC_ACKISO )
    21f0:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
    21f4:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
    21f8:	781a      	ldrb	r2, [r3, #0]
    21fa:	0711      	lsls	r1, r2, #28
	{
		PMC_REGSC |= PMC_REGSC_ACKISO;
    21fc:	bf42      	ittt	mi
    21fe:	781a      	ldrbmi	r2, [r3, #0]
    2200:	f042 0208 	orrmi.w	r2, r2, #8
    2204:	701a      	strbmi	r2, [r3, #0]
    2206:	4a30      	ldr	r2, [pc, #192]	; (22c8 <ResetHandler+0x10c>)
    2208:	4b30      	ldr	r3, [pc, #192]	; (22cc <ResetHandler+0x110>)
	}

	// Prepare RAM
	while ( dest < (uint32_t*)&_edata ) *dest++ = *src++;
    220a:	4931      	ldr	r1, [pc, #196]	; (22d0 <ResetHandler+0x114>)
    220c:	428b      	cmp	r3, r1
    220e:	d204      	bcs.n	221a <ResetHandler+0x5e>
    2210:	f852 1f04 	ldr.w	r1, [r2, #4]!
    2214:	f843 1b04 	str.w	r1, [r3], #4
    2218:	e7f7      	b.n	220a <ResetHandler+0x4e>
    221a:	4b2e      	ldr	r3, [pc, #184]	; (22d4 <ResetHandler+0x118>)
	dest = (uint32_t*)&_sbss;
	while ( dest < (uint32_t*)&_ebss ) *dest++ = 0;
    221c:	4a2e      	ldr	r2, [pc, #184]	; (22d8 <ResetHandler+0x11c>)
    221e:	4293      	cmp	r3, r2
    2220:	d203      	bcs.n	222a <ResetHandler+0x6e>
    2222:	2200      	movs	r2, #0
    2224:	f843 2b04 	str.w	r2, [r3], #4
    2228:	e7f8      	b.n	221c <ResetHandler+0x60>
    222a:	4b2c      	ldr	r3, [pc, #176]	; (22dc <ResetHandler+0x120>)
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
	{
		NVIC_SET_PRIORITY( i, 128 );
    222c:	2280      	movs	r2, #128	; 0x80
    222e:	f803 2b01 	strb.w	r2, [r3], #1
	// use vector table in flash
	SCB_VTOR = 0;
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
    2232:	4a2b      	ldr	r2, [pc, #172]	; (22e0 <ResetHandler+0x124>)
    2234:	4293      	cmp	r3, r2
    2236:	d1f9      	bne.n	222c <ResetHandler+0x70>
		NVIC_SET_PRIORITY( i, 128 );
	}

	// start in FEI mode
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
    2238:	4b2a      	ldr	r3, [pc, #168]	; (22e4 <ResetHandler+0x128>)
    223a:	220a      	movs	r2, #10
    223c:	701a      	strb	r2, [r3, #0]

	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0( 2 ) | MCG_C2_EREFS;
    223e:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
    2242:	2224      	movs	r2, #36	; 0x24
    2244:	701a      	strb	r2, [r3, #0]

	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS( 2 ) | MCG_C1_FRDIV( 4 );
    2246:	22a0      	movs	r2, #160	; 0xa0
    2248:	f803 2c01 	strb.w	r2, [r3, #-1]

	// wait for crystal oscillator to begin
	while ( (MCG_S & MCG_S_OSCINIT0) == 0 );
    224c:	4b26      	ldr	r3, [pc, #152]	; (22e8 <ResetHandler+0x12c>)
    224e:	781a      	ldrb	r2, [r3, #0]
    2250:	0792      	lsls	r2, r2, #30
    2252:	d5fb      	bpl.n	224c <ResetHandler+0x90>

	// wait for FLL to use oscillator
	while ( (MCG_S & MCG_S_IREFST) != 0 );
    2254:	781a      	ldrb	r2, [r3, #0]
    2256:	06d0      	lsls	r0, r2, #27
    2258:	d4fc      	bmi.n	2254 <ResetHandler+0x98>

	// wait for MCGOUT to use oscillator
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 2 ) );
    225a:	781a      	ldrb	r2, [r3, #0]
    225c:	f002 020c 	and.w	r2, r2, #12
    2260:	2a08      	cmp	r2, #8
    2262:	d1fa      	bne.n	225a <ResetHandler+0x9e>

	// now we're in FBE mode
#if F_CPU == 72000000
	// config PLL input for 16 MHz Crystal / 8 = 2 MHz
	MCG_C5 = MCG_C5_PRDIV0( 7 );
    2264:	4b21      	ldr	r3, [pc, #132]	; (22ec <ResetHandler+0x130>)
    2266:	2207      	movs	r2, #7
    2268:	701a      	strb	r2, [r3, #0]
	MCG_C5 = MCG_C5_PRDIV0( 3 );
#endif

#if F_CPU == 72000000
	// config PLL for 72 MHz output (36 * 2 MHz Ext PLL)
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 12 );
    226a:	224c      	movs	r2, #76	; 0x4c
    226c:	705a      	strb	r2, [r3, #1]
	// config PLL for 96 MHz output
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 0 );
#endif

	// wait for PLL to start using xtal as its input
	while ( !(MCG_S & MCG_S_PLLST) );
    226e:	4b1e      	ldr	r3, [pc, #120]	; (22e8 <ResetHandler+0x12c>)
    2270:	781a      	ldrb	r2, [r3, #0]
    2272:	0691      	lsls	r1, r2, #26
    2274:	d5fb      	bpl.n	226e <ResetHandler+0xb2>

	// wait for PLL to lock
	while ( !(MCG_S & MCG_S_LOCK0) );
    2276:	781a      	ldrb	r2, [r3, #0]
    2278:	0652      	lsls	r2, r2, #25
    227a:	d5fc      	bpl.n	2276 <ResetHandler+0xba>
#if F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 2 );
    227c:	4b1c      	ldr	r3, [pc, #112]	; (22f0 <ResetHandler+0x134>)
    227e:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
    2282:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 3 ) | SIM_CLKDIV1_OUTDIV2( 3 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#else
#error "Error, F_CPU must be 96000000, 72000000, 48000000, or 24000000"
#endif
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
    2284:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <ResetHandler+0x138>)
    2286:	2220      	movs	r2, #32
    2288:	701a      	strb	r2, [r3, #0]

	// wait for PLL clock to be used
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 3 ) );
    228a:	4b17      	ldr	r3, [pc, #92]	; (22e8 <ResetHandler+0x12c>)
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	f003 030c 	and.w	r3, r3, #12
    2292:	2b0c      	cmp	r3, #12
    2294:	d1f9      	bne.n	228a <ResetHandler+0xce>

	// now we're in PEE mode
#if F_CPU == 72000000
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 2 ) | SIM_CLKDIV2_USBFRAC; // USB = 72 MHz PLL / 1.5
    2296:	4b18      	ldr	r3, [pc, #96]	; (22f8 <ResetHandler+0x13c>)
    2298:	2205      	movs	r2, #5
    229a:	601a      	str	r2, [r3, #0]
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 1 ); // USB = 96 MHz PLL / 2
#endif

	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL( 6 );
    229c:	4a17      	ldr	r2, [pc, #92]	; (22fc <ResetHandler+0x140>)
    229e:	f843 2c44 	str.w	r2, [r3, #-68]

#endif

#if !defined(_bootloader_)
	// Initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
    22a2:	4b17      	ldr	r3, [pc, #92]	; (2300 <ResetHandler+0x144>)
    22a4:	4a17      	ldr	r2, [pc, #92]	; (2304 <ResetHandler+0x148>)
    22a6:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
    22a8:	2207      	movs	r2, #7
    22aa:	f843 2c04 	str.w	r2, [r3, #-4]

	__enable_irq();
    22ae:	b662      	cpsie	i
#else
	// Disable Watchdog for bootloader
	WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN;
#endif

	main();
    22b0:	f000 f8a6 	bl	2400 <main>
	while ( 1 ); // Shouldn't get here...
    22b4:	e7fe      	b.n	22b4 <ResetHandler+0xf8>
    22b6:	bf00      	nop
    22b8:	4005200e 	.word	0x4005200e
    22bc:	00043f82 	.word	0x00043f82
    22c0:	0b000001 	.word	0x0b000001
    22c4:	40048030 	.word	0x40048030
    22c8:	00009910 	.word	0x00009910
    22cc:	1fff89d0 	.word	0x1fff89d0
    22d0:	1fff9050 	.word	0x1fff9050
    22d4:	1fff9050 	.word	0x1fff9050
    22d8:	1fffa074 	.word	0x1fffa074
    22dc:	e000e400 	.word	0xe000e400
    22e0:	e000e45f 	.word	0xe000e45f
    22e4:	40065000 	.word	0x40065000
    22e8:	40064006 	.word	0x40064006
    22ec:	40064004 	.word	0x40064004
    22f0:	40048044 	.word	0x40048044
    22f4:	40064000 	.word	0x40064000
    22f8:	40048048 	.word	0x40048048
    22fc:	000510c0 	.word	0x000510c0
    2300:	e000e014 	.word	0xe000e014
    2304:	0001193f 	.word	0x0001193f
    2308:	00000000 	.word	0x00000000
    230c:	00000000 	.word	0x00000000
    2310:	00000000 	.word	0x00000000
    2314:	00000000 	.word	0x00000000
    2318:	00000000 	.word	0x00000000
    231c:	00000000 	.word	0x00000000
    2320:	00000000 	.word	0x00000000
    2324:	00000000 	.word	0x00000000
    2328:	00000000 	.word	0x00000000
    232c:	00000000 	.word	0x00000000
    2330:	00000000 	.word	0x00000000
    2334:	00000000 	.word	0x00000000
    2338:	00000000 	.word	0x00000000
    233c:	00000000 	.word	0x00000000
    2340:	00000000 	.word	0x00000000
    2344:	00000000 	.word	0x00000000
    2348:	00000000 	.word	0x00000000
    234c:	00000000 	.word	0x00000000
    2350:	00000000 	.word	0x00000000
    2354:	00000000 	.word	0x00000000
    2358:	00000000 	.word	0x00000000
    235c:	00000000 	.word	0x00000000
    2360:	00000000 	.word	0x00000000
    2364:	00000000 	.word	0x00000000
    2368:	00000000 	.word	0x00000000
    236c:	00000000 	.word	0x00000000
    2370:	00000000 	.word	0x00000000
    2374:	00000000 	.word	0x00000000
    2378:	00000000 	.word	0x00000000
    237c:	00000000 	.word	0x00000000
    2380:	00000000 	.word	0x00000000
    2384:	00000000 	.word	0x00000000
    2388:	00000000 	.word	0x00000000
    238c:	00000000 	.word	0x00000000
    2390:	00000000 	.word	0x00000000
    2394:	00000000 	.word	0x00000000
    2398:	00000000 	.word	0x00000000
    239c:	00000000 	.word	0x00000000
    23a0:	00000000 	.word	0x00000000
    23a4:	00000000 	.word	0x00000000
    23a8:	00000000 	.word	0x00000000
    23ac:	00000000 	.word	0x00000000
    23b0:	00000000 	.word	0x00000000
    23b4:	00000000 	.word	0x00000000
    23b8:	00000000 	.word	0x00000000
    23bc:	00000000 	.word	0x00000000
    23c0:	00000000 	.word	0x00000000
    23c4:	00000000 	.word	0x00000000
    23c8:	00000000 	.word	0x00000000
    23cc:	00000000 	.word	0x00000000
    23d0:	00000000 	.word	0x00000000
    23d4:	00000000 	.word	0x00000000
    23d8:	00000000 	.word	0x00000000
    23dc:	00000000 	.word	0x00000000
    23e0:	00000000 	.word	0x00000000
    23e4:	00000000 	.word	0x00000000
    23e8:	00000000 	.word	0x00000000
    23ec:	00000000 	.word	0x00000000
    23f0:	00000000 	.word	0x00000000
    23f4:	00000000 	.word	0x00000000
    23f8:	00000000 	.word	0x00000000
    23fc:	00000000 	.word	0x00000000

00002400 <main>:


// ----- Functions -----

int main()
{
    2400:	b508      	push	{r3, lr}
	CLKPR = 0x80;
	CLKPR = 0x00;
#endif

	// Enable CLI
	CLI_init();
    2402:	f003 fdad 	bl	5f60 <CLI_init>

	// Setup Modules
	Output_setup();
    2406:	f002 fb2d 	bl	4a64 <Output_setup>
	Macro_setup();
    240a:	f001 fced 	bl	3de8 <Macro_setup>
	Scan_setup();
    240e:	f001 f829 	bl	3464 <Scan_setup>

	// Main Detection Loop
	while ( 1 )
	{
		// Process CLI
		CLI_process();
    2412:	f003 fe9d 	bl	6150 <CLI_process>

		// Acquire Key Indices
		// Loop continuously until scan_loop returns 0
		cli();
    2416:	b672      	cpsid	i
		while ( Scan_loop() );
    2418:	f001 f830 	bl	347c <Scan_loop>
    241c:	2800      	cmp	r0, #0
    241e:	d1fb      	bne.n	2418 <main+0x18>
		sei();
    2420:	b662      	cpsie	i

		// Run Macros over Key Indices and convert to USB Keys
		Macro_process();
    2422:	f001 fcb1 	bl	3d88 <Macro_process>

		// Sends USB data only if changed
		Output_send();
    2426:	f002 fb2d 	bl	4a84 <Output_send>
	}
    242a:	e7f2      	b.n	2412 <main+0x12>

0000242c <systick_default_isr>:

// NVIC - SysTick ISR
extern volatile uint32_t systick_millis_count;
void systick_default_isr()
{
	systick_millis_count++;
    242c:	4a02      	ldr	r2, [pc, #8]	; (2438 <systick_default_isr+0xc>)
    242e:	6813      	ldr	r3, [r2, #0]
    2430:	3301      	adds	r3, #1
    2432:	6013      	str	r3, [r2, #0]
    2434:	4770      	bx	lr
    2436:	bf00      	nop
    2438:	1fff9050 	.word	0x1fff9050

0000243c <fault_isr>:

// ----- Interrupts -----

// NVIC - Default ISR
void fault_isr()
{
    243c:	b508      	push	{r3, lr}
	print("Fault!" NL );
    243e:	480c      	ldr	r0, [pc, #48]	; (2470 <fault_isr+0x34>)
    2440:	f003 ffc6 	bl	63d0 <_print>
	while ( 1 )
	{
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if ( SIM_SCGC4 & SIM_SCGC4_USBOTG ) usb_isr();
    2444:	4c0b      	ldr	r4, [pc, #44]	; (2474 <fault_isr+0x38>)
    2446:	6823      	ldr	r3, [r4, #0]
    2448:	0358      	lsls	r0, r3, #13
    244a:	d501      	bpl.n	2450 <fault_isr+0x14>
    244c:	f002 fcba 	bl	4dc4 <usb_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART0 )  uart0_status_isr();
    2450:	6823      	ldr	r3, [r4, #0]
    2452:	0559      	lsls	r1, r3, #21
    2454:	d501      	bpl.n	245a <fault_isr+0x1e>
    2456:	f000 f80f 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART1 )  uart1_status_isr();
    245a:	6823      	ldr	r3, [r4, #0]
    245c:	051a      	lsls	r2, r3, #20
    245e:	d501      	bpl.n	2464 <fault_isr+0x28>
    2460:	f000 f80a 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART2 )  uart2_status_isr();
    2464:	6823      	ldr	r3, [r4, #0]
    2466:	04db      	lsls	r3, r3, #19
    2468:	d5ec      	bpl.n	2444 <fault_isr+0x8>
    246a:	f000 f805 	bl	2478 <unused_isr>
    246e:	e7e9      	b.n	2444 <fault_isr+0x8>
    2470:	00006650 	.word	0x00006650
    2474:	40048034 	.word	0x40048034

00002478 <unused_isr>:
	}
}

void unused_isr()
{
    2478:	b508      	push	{r3, lr}
	fault_isr();
    247a:	f7ff ffdf 	bl	243c <fault_isr>
    247e:	0000      	movs	r0, r0

00002480 <nmi_default_isr>:


// NVIC - Non-Maskable Interrupt ISR
void nmi_default_isr()
{
	print("NMI!" NL );
    2480:	4801      	ldr	r0, [pc, #4]	; (2488 <nmi_default_isr+0x8>)
    2482:	f003 bfa5 	b.w	63d0 <_print>
    2486:	bf00      	nop
    2488:	00006659 	.word	0x00006659

0000248c <hard_fault_default_isr>:
}


// NVIC - Hard Fault ISR
void hard_fault_default_isr()
{
    248c:	b508      	push	{r3, lr}
	print("Hard Fault! SCB_HFSR: ");
    248e:	4807      	ldr	r0, [pc, #28]	; (24ac <hard_fault_default_isr+0x20>)
    2490:	f003 ff9e 	bl	63d0 <_print>
	printHex32( SCB_HFSR );
    2494:	4b06      	ldr	r3, [pc, #24]	; (24b0 <hard_fault_default_isr+0x24>)
    2496:	2101      	movs	r1, #1
    2498:	6818      	ldr	r0, [r3, #0]
    249a:	f004 f877 	bl	658c <printHex32_op>
	print( NL );
    249e:	4805      	ldr	r0, [pc, #20]	; (24b4 <hard_fault_default_isr+0x28>)
    24a0:	f003 ff96 	bl	63d0 <_print>
	SOFTWARE_RESET();
    24a4:	4b04      	ldr	r3, [pc, #16]	; (24b8 <hard_fault_default_isr+0x2c>)
    24a6:	4a05      	ldr	r2, [pc, #20]	; (24bc <hard_fault_default_isr+0x30>)
    24a8:	601a      	str	r2, [r3, #0]
    24aa:	bd08      	pop	{r3, pc}
    24ac:	00006660 	.word	0x00006660
    24b0:	e000ed2c 	.word	0xe000ed2c
    24b4:	000093eb 	.word	0x000093eb
    24b8:	e000ed0c 	.word	0xe000ed0c
    24bc:	05fa0004 	.word	0x05fa0004

000024c0 <memmanage_fault_default_isr>:
}


// NVIC - Memory Manager Fault ISR
void memmanage_fault_default_isr()
{
    24c0:	b508      	push	{r3, lr}
	print("Memory Manager Fault! SCB_CFSR: ");
    24c2:	480a      	ldr	r0, [pc, #40]	; (24ec <memmanage_fault_default_isr+0x2c>)
    24c4:	f003 ff84 	bl	63d0 <_print>
	printHex32( SCB_CFSR );
    24c8:	4b09      	ldr	r3, [pc, #36]	; (24f0 <memmanage_fault_default_isr+0x30>)
    24ca:	2101      	movs	r1, #1
    24cc:	6818      	ldr	r0, [r3, #0]
    24ce:	f004 f85d 	bl	658c <printHex32_op>
	print(" SCB_MMAR: ");
    24d2:	4808      	ldr	r0, [pc, #32]	; (24f4 <memmanage_fault_default_isr+0x34>)
    24d4:	f003 ff7c 	bl	63d0 <_print>
	printHex32( SCB_MMAR );
    24d8:	4b07      	ldr	r3, [pc, #28]	; (24f8 <memmanage_fault_default_isr+0x38>)
    24da:	2101      	movs	r1, #1
    24dc:	6818      	ldr	r0, [r3, #0]
    24de:	f004 f855 	bl	658c <printHex32_op>
	print( NL );
    24e2:	4806      	ldr	r0, [pc, #24]	; (24fc <memmanage_fault_default_isr+0x3c>)
}
    24e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Memory Manager Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_MMAR: ");
	printHex32( SCB_MMAR );
	print( NL );
    24e8:	f003 bf72 	b.w	63d0 <_print>
    24ec:	00006677 	.word	0x00006677
    24f0:	e000ed28 	.word	0xe000ed28
    24f4:	00006698 	.word	0x00006698
    24f8:	e000ed34 	.word	0xe000ed34
    24fc:	000093eb 	.word	0x000093eb

00002500 <bus_fault_default_isr>:
}


// NVIC - Bus Fault ISR
void bus_fault_default_isr()
{
    2500:	b508      	push	{r3, lr}
	print("Bus Fault! SCB_CFSR: ");
    2502:	480a      	ldr	r0, [pc, #40]	; (252c <bus_fault_default_isr+0x2c>)
    2504:	f003 ff64 	bl	63d0 <_print>
	printHex32( SCB_CFSR );
    2508:	4b09      	ldr	r3, [pc, #36]	; (2530 <bus_fault_default_isr+0x30>)
    250a:	2101      	movs	r1, #1
    250c:	6818      	ldr	r0, [r3, #0]
    250e:	f004 f83d 	bl	658c <printHex32_op>
	print(" SCB_BFAR: ");
    2512:	4808      	ldr	r0, [pc, #32]	; (2534 <bus_fault_default_isr+0x34>)
    2514:	f003 ff5c 	bl	63d0 <_print>
	printHex32( SCB_BFAR );
    2518:	4b07      	ldr	r3, [pc, #28]	; (2538 <bus_fault_default_isr+0x38>)
    251a:	2101      	movs	r1, #1
    251c:	6818      	ldr	r0, [r3, #0]
    251e:	f004 f835 	bl	658c <printHex32_op>
	print( NL );
    2522:	4806      	ldr	r0, [pc, #24]	; (253c <bus_fault_default_isr+0x3c>)
}
    2524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Bus Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_BFAR: ");
	printHex32( SCB_BFAR );
	print( NL );
    2528:	f003 bf52 	b.w	63d0 <_print>
    252c:	000066a4 	.word	0x000066a4
    2530:	e000ed28 	.word	0xe000ed28
    2534:	000066ba 	.word	0x000066ba
    2538:	e000ed38 	.word	0xe000ed38
    253c:	000093eb 	.word	0x000093eb

00002540 <usage_fault_default_isr>:
}


// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
    2540:	b508      	push	{r3, lr}
	print("Usage Fault! SCB_CFSR: ");
    2542:	4806      	ldr	r0, [pc, #24]	; (255c <usage_fault_default_isr+0x1c>)
    2544:	f003 ff44 	bl	63d0 <_print>
	printHex32( SCB_CFSR );
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <usage_fault_default_isr+0x20>)
    254a:	2101      	movs	r1, #1
    254c:	6818      	ldr	r0, [r3, #0]
    254e:	f004 f81d 	bl	658c <printHex32_op>
	print( NL );
    2552:	4804      	ldr	r0, [pc, #16]	; (2564 <usage_fault_default_isr+0x24>)
}
    2554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
	print("Usage Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print( NL );
    2558:	f003 bf3a 	b.w	63d0 <_print>
    255c:	000066c6 	.word	0x000066c6
    2560:	e000ed28 	.word	0xe000ed28
    2564:	000093eb 	.word	0x000093eb

00002568 <memset>:
	__builtin_unreachable();
}
#endif

void *memset( void *addr, int val, unsigned int len )
{
    2568:	4402      	add	r2, r0
	char *buf = addr;
    256a:	4603      	mov	r3, r0

	for (; len > 0; --len, ++buf)
    256c:	4293      	cmp	r3, r2
    256e:	d002      	beq.n	2576 <memset+0xe>
		*buf = val;
    2570:	f803 1b01 	strb.w	r1, [r3], #1
    2574:	e7fa      	b.n	256c <memset+0x4>
	return (addr);
}
    2576:	4770      	bx	lr

00002578 <memcpy>:
		/* NOTHING */;
	return (val);
}

void *memcpy( void *dst, const void *src, unsigned int len )
{
    2578:	b510      	push	{r4, lr}
    257a:	3901      	subs	r1, #1
    257c:	4402      	add	r2, r0
	char *dstbuf = dst;
    257e:	4603      	mov	r3, r0
	const char *srcbuf = src;

	for (; len > 0; --len, ++dstbuf, ++srcbuf)
    2580:	4293      	cmp	r3, r2
    2582:	d004      	beq.n	258e <memcpy+0x16>
		*dstbuf = *srcbuf;
    2584:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2588:	f803 4b01 	strb.w	r4, [r3], #1
    258c:	e7f8      	b.n	2580 <memcpy+0x8>
	return (dst);
}
    258e:	bd10      	pop	{r4, pc}

00002590 <yield>:



// ----- Functions -----

void yield(void) {};
    2590:	4770      	bx	lr
    2592:	0000      	movs	r0, r0

00002594 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2594:	b672      	cpsid	i
	current = SYST_CVR;
    2596:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <micros+0x34>)
	count = systick_millis_count;
    2598:	4a0c      	ldr	r2, [pc, #48]	; (25cc <micros+0x38>)
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    259a:	490d      	ldr	r1, [pc, #52]	; (25d0 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    259c:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    259e:	6812      	ldr	r2, [r2, #0]
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    25a0:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    25a2:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
    25a4:	0149      	lsls	r1, r1, #5
    25a6:	d503      	bpl.n	25b0 <micros+0x1c>
    25a8:	490a      	ldr	r1, [pc, #40]	; (25d4 <micros+0x40>)
    25aa:	428b      	cmp	r3, r1
    25ac:	bf88      	it	hi
    25ae:	3201      	addhi	r2, #1
	current = ((F_CPU / 1000) - 1) - current;
    25b0:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
	return count * 1000 + current / (F_CPU / 1000000);
    25b4:	2048      	movs	r0, #72	; 0x48
	current = SYST_CVR;
	count = systick_millis_count;
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
	__enable_irq();
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
	current = ((F_CPU / 1000) - 1) - current;
    25b6:	f203 133f 	addw	r3, r3, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    25ba:	fbb3 f3f0 	udiv	r3, r3, r0
}
    25be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    25c2:	fb00 3002 	mla	r0, r0, r2, r3
    25c6:	4770      	bx	lr
    25c8:	e000e018 	.word	0xe000e018
    25cc:	1fff9050 	.word	0x1fff9050
    25d0:	e000ed04 	.word	0xe000ed04
    25d4:	0001190e 	.word	0x0001190e

000025d8 <delay>:

void delay(uint32_t ms)
{
    25d8:	b538      	push	{r3, r4, r5, lr}
    25da:	4605      	mov	r5, r0
	uint32_t start = micros();
    25dc:	f7ff ffda 	bl	2594 <micros>
    25e0:	4604      	mov	r4, r0

	while (1) {
		if ((micros() - start) >= 1000) {
    25e2:	f7ff ffd7 	bl	2594 <micros>
    25e6:	1b00      	subs	r0, r0, r4
    25e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    25ec:	d303      	bcc.n	25f6 <delay+0x1e>
			ms--;
			if (ms == 0) break;
    25ee:	3d01      	subs	r5, #1
    25f0:	d004      	beq.n	25fc <delay+0x24>
			start += 1000;
    25f2:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
		}
		yield();
    25f6:	f7ff ffcb 	bl	2590 <yield>
	}
    25fa:	e7f2      	b.n	25e2 <delay+0xa>
    25fc:	bd38      	pop	{r3, r4, r5, pc}

000025fe <I2C_BufferLen>:


inline uint16_t I2C_BufferLen( I2C_Buffer *buffer )
{
	// Tail >= Head
	if ( buffer->tail >= buffer->head )
    25fe:	8803      	ldrh	r3, [r0, #0]
    2600:	8841      	ldrh	r1, [r0, #2]
    2602:	4299      	cmp	r1, r3
		return buffer->head + buffer->size - buffer->tail;
    2604:	bf23      	ittte	cs
    2606:	88c2      	ldrhcs	r2, [r0, #6]
    2608:	18d2      	addcs	r2, r2, r3
    260a:	1a50      	subcs	r0, r2, r1

	// Head > Tail
	return buffer->head - buffer->tail;
    260c:	1a58      	subcc	r0, r3, r1
    260e:	b280      	uxth	r0, r0
}
    2610:	4770      	bx	lr
    2612:	0000      	movs	r0, r0

00002614 <I2C_BufferPush>:


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	4605      	mov	r5, r0
    2618:	460c      	mov	r4, r1
	dbug_msg("DATA: ");
    261a:	4813      	ldr	r0, [pc, #76]	; (2668 <I2C_BufferPush+0x54>)
	printHex( byte );
    261c:	b2ae      	uxth	r6, r5
}


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
	dbug_msg("DATA: ");
    261e:	f003 fed7 	bl	63d0 <_print>
	printHex( byte );
    2622:	2101      	movs	r1, #1
    2624:	4630      	mov	r0, r6
    2626:	f003 ff75 	bl	6514 <printHex_op>

	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
    262a:	8861      	ldrh	r1, [r4, #2]
    262c:	8822      	ldrh	r2, [r4, #0]
    262e:	1c4b      	adds	r3, r1, #1
    2630:	4293      	cmp	r3, r2
    2632:	d005      	beq.n	2640 <I2C_BufferPush+0x2c>
    2634:	428a      	cmp	r2, r1
    2636:	88e1      	ldrh	r1, [r4, #6]
    2638:	d90e      	bls.n	2658 <I2C_BufferPush+0x44>
    263a:	1a58      	subs	r0, r3, r1
    263c:	4290      	cmp	r0, r2
    263e:	d10b      	bne.n	2658 <I2C_BufferPush+0x44>
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
    2640:	480a      	ldr	r0, [pc, #40]	; (266c <I2C_BufferPush+0x58>)
    2642:	f003 fec5 	bl	63d0 <_print>
		printHex( byte );
    2646:	4630      	mov	r0, r6
    2648:	2101      	movs	r1, #1
    264a:	f003 ff63 	bl	6514 <printHex_op>
		print( NL );
    264e:	4808      	ldr	r0, [pc, #32]	; (2670 <I2C_BufferPush+0x5c>)
		buffer->tail++;
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
}
    2650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
		printHex( byte );
		print( NL );
    2654:	f003 bebc 	b.w	63d0 <_print>
		return;
	}

	// Check for wrap-around case
	if ( buffer->tail + 1 >= buffer->size )
    2658:	428b      	cmp	r3, r1
	{
		buffer->tail = 0;
    265a:	bfa8      	it	ge
    265c:	2300      	movge	r3, #0
	}
	// Normal case
	else
	{
		buffer->tail++;
    265e:	8063      	strh	r3, [r4, #2]
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
    2660:	8863      	ldrh	r3, [r4, #2]
    2662:	68a2      	ldr	r2, [r4, #8]
    2664:	54d5      	strb	r5, [r2, r3]
    2666:	bd70      	pop	{r4, r5, r6, pc}
    2668:	00006801 	.word	0x00006801
    266c:	0000681b 	.word	0x0000681b
    2670:	000093eb 	.word	0x000093eb

00002674 <I2C_TxBufferPop>:
}


uint8_t I2C_TxBufferPop()
{
    2674:	b538      	push	{r3, r4, r5, lr}
	// Return 0xFF if no buffer left (do not rely on this)
	if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) >= I2C_TxBuffer.size )
    2676:	4d23      	ldr	r5, [pc, #140]	; (2704 <I2C_TxBufferPop+0x90>)
    2678:	4628      	mov	r0, r5
    267a:	f7ff ffc0 	bl	25fe <I2C_BufferLen>
    267e:	88eb      	ldrh	r3, [r5, #6]
    2680:	b29b      	uxth	r3, r3
    2682:	4298      	cmp	r0, r3
    2684:	462c      	mov	r4, r5
    2686:	d31b      	bcc.n	26c0 <I2C_TxBufferPop+0x4c>
	{
		erro_msg("No buffer to pop an entry from... ");
    2688:	481f      	ldr	r0, [pc, #124]	; (2708 <I2C_TxBufferPop+0x94>)
    268a:	f003 fea1 	bl	63d0 <_print>
		printHex( I2C_TxBuffer.head );
    268e:	8828      	ldrh	r0, [r5, #0]
    2690:	2101      	movs	r1, #1
    2692:	b280      	uxth	r0, r0
    2694:	f003 ff3e 	bl	6514 <printHex_op>
		print(" ");
    2698:	481c      	ldr	r0, [pc, #112]	; (270c <I2C_TxBufferPop+0x98>)
    269a:	f003 fe99 	bl	63d0 <_print>
		printHex( I2C_TxBuffer.tail );
    269e:	8868      	ldrh	r0, [r5, #2]
    26a0:	2101      	movs	r1, #1
    26a2:	b280      	uxth	r0, r0
    26a4:	f003 ff36 	bl	6514 <printHex_op>
		print(" ");
    26a8:	4818      	ldr	r0, [pc, #96]	; (270c <I2C_TxBufferPop+0x98>)
    26aa:	f003 fe91 	bl	63d0 <_print>
		printHex( I2C_TxBuffer.sequencePos );
    26ae:	7928      	ldrb	r0, [r5, #4]
    26b0:	2101      	movs	r1, #1
    26b2:	f003 ff2f 	bl	6514 <printHex_op>
		print(NL);
    26b6:	4816      	ldr	r0, [pc, #88]	; (2710 <I2C_TxBufferPop+0x9c>)
    26b8:	f003 fe8a 	bl	63d0 <_print>
    26bc:	20ff      	movs	r0, #255	; 0xff
    26be:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFF;
	}

	// If there is currently no sequence being sent, the first entry in the RingBuffer is the length
	if ( I2C_TxBuffer.sequencePos == 0 )
    26c0:	792b      	ldrb	r3, [r5, #4]
    26c2:	b943      	cbnz	r3, 26d6 <I2C_TxBufferPop+0x62>
	{
		I2C_TxBuffer.sequencePos = 0xFF; // So this doesn't become an infinite loop
    26c4:	23ff      	movs	r3, #255	; 0xff
    26c6:	712b      	strb	r3, [r5, #4]
		I2C_RxBuffer.sequencePos = I2C_TxBufferPop();
    26c8:	f7ff ffd4 	bl	2674 <I2C_TxBufferPop>
    26cc:	4b11      	ldr	r3, [pc, #68]	; (2714 <I2C_TxBufferPop+0xa0>)
    26ce:	7118      	strb	r0, [r3, #4]
		I2C_TxBuffer.sequencePos = I2C_TxBufferPop();
    26d0:	f7ff ffd0 	bl	2674 <I2C_TxBufferPop>
    26d4:	7128      	strb	r0, [r5, #4]
	}

	uint8_t data = I2C_TxBuffer.buffer[ I2C_TxBuffer.head ];
    26d6:	68a2      	ldr	r2, [r4, #8]
    26d8:	8823      	ldrh	r3, [r4, #0]
    26da:	b29b      	uxth	r3, r3
    26dc:	5cd0      	ldrb	r0, [r2, r3]

	// Prune head
	I2C_TxBuffer.head++;
    26de:	8823      	ldrh	r3, [r4, #0]
    26e0:	3301      	adds	r3, #1
    26e2:	b29b      	uxth	r3, r3
    26e4:	8023      	strh	r3, [r4, #0]

	// Wrap-around case
	if ( I2C_TxBuffer.head >= I2C_TxBuffer.size )
    26e6:	8822      	ldrh	r2, [r4, #0]
    26e8:	88e3      	ldrh	r3, [r4, #6]
    26ea:	b292      	uxth	r2, r2
    26ec:	b29b      	uxth	r3, r3
    26ee:	429a      	cmp	r2, r3
		I2C_TxBuffer.head = 0;
    26f0:	bf22      	ittt	cs
    26f2:	4b04      	ldrcs	r3, [pc, #16]	; (2704 <I2C_TxBufferPop+0x90>)
    26f4:	2200      	movcs	r2, #0
    26f6:	801a      	strhcs	r2, [r3, #0]

	// Decrement buffer sequence (until next stop will be sent)
	I2C_TxBuffer.sequencePos--;
    26f8:	7923      	ldrb	r3, [r4, #4]
    26fa:	3b01      	subs	r3, #1
    26fc:	b2db      	uxtb	r3, r3
    26fe:	7123      	strb	r3, [r4, #4]
	print(" ");
	printHex( I2C_TxBuffer.sequencePos );
	print(NL);
	*/
	return data;
}
    2700:	bd38      	pop	{r3, r4, r5, pc}
    2702:	bf00      	nop
    2704:	1fff89dc 	.word	0x1fff89dc
    2708:	00006855 	.word	0x00006855
    270c:	00006d66 	.word	0x00006d66
    2710:	000093eb 	.word	0x000093eb
    2714:	1fff89d0 	.word	0x1fff89d0

00002718 <i2c0_isr>:


// ----- Interrupt Functions -----

void i2c0_isr()
{
    2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cli(); // Disable Interrupts
    271c:	b672      	cpsid	i

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    271e:	4e3a      	ldr	r6, [pc, #232]	; (2808 <L_396_delayMicroseconds+0x1e>)

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    2720:	4c3a      	ldr	r4, [pc, #232]	; (280c <L_396_delayMicroseconds+0x22>)
    2722:	4d3b      	ldr	r5, [pc, #236]	; (2810 <L_396_delayMicroseconds+0x26>)
    2724:	f894 8000 	ldrb.w	r8, [r4]

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2728:	7833      	ldrb	r3, [r6, #0]
    272a:	f013 0f10 	tst.w	r3, #16

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    272e:	fa5f f888 	uxtb.w	r8, r8
    2732:	4637      	mov	r7, r6
	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2734:	792b      	ldrb	r3, [r5, #4]
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2736:	d04e      	beq.n	27d6 <L_339_delayMicroseconds+0x2a>
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2738:	b163      	cbz	r3, 2754 <i2c0_isr+0x3c>
		{
			// Make sure slave sent an ACK
			if ( status & I2C_S_RXAK )
    273a:	f018 0f01 	tst.w	r8, #1
    273e:	d045      	beq.n	27cc <L_339_delayMicroseconds+0x20>
			{
				// NACK Detected, disable interrupt
				erro_print("I2C NAK detected...");
    2740:	4834      	ldr	r0, [pc, #208]	; (2814 <L_396_delayMicroseconds+0x2a>)
    2742:	f003 fe45 	bl	63d0 <_print>
				I2C0_C1 = I2C_C1_IICEN;
    2746:	2380      	movs	r3, #128	; 0x80
    2748:	7033      	strb	r3, [r6, #0]

				// Abort Tx Buffer
				I2C_TxBuffer.head = 0;
    274a:	2300      	movs	r3, #0
    274c:	802b      	strh	r3, [r5, #0]
				I2C_TxBuffer.tail = 0;
    274e:	806b      	strh	r3, [r5, #2]
				I2C_TxBuffer.sequencePos = 0;
    2750:	712b      	strb	r3, [r5, #4]
    2752:	e053      	b.n	27fc <L_396_delayMicroseconds+0x12>
				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
			}
		}
		// Receiving data
		else if ( I2C_RxBuffer.sequencePos > 0 )
    2754:	4e30      	ldr	r6, [pc, #192]	; (2818 <L_396_delayMicroseconds+0x2e>)
    2756:	7933      	ldrb	r3, [r6, #4]
    2758:	b313      	cbz	r3, 27a0 <i2c0_isr+0x88>
		{
			// Master Receive, addr sent
			if ( status & I2C_S_ARBL )
    275a:	f018 0f10 	tst.w	r8, #16
    275e:	d006      	beq.n	276e <i2c0_isr+0x56>
			{
				// Arbitration Lost
				erro_print("Arbitration lost...");
    2760:	482e      	ldr	r0, [pc, #184]	; (281c <L_396_delayMicroseconds+0x32>)
    2762:	f003 fe35 	bl	63d0 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    2766:	2380      	movs	r3, #128	; 0x80
    2768:	703b      	strb	r3, [r7, #0]
				I2C0_S = I2C_S_ARBL | I2C_S_IICIF; // Clear ARBL flag and interrupt
    276a:	2312      	movs	r3, #18
    276c:	7023      	strb	r3, [r4, #0]
			}
			if ( status & I2C_S_RXAK )
    276e:	f018 0f01 	tst.w	r8, #1
    2772:	d004      	beq.n	277e <i2c0_isr+0x66>
			{
				// Slave Address NACK Detected, disable interrupt
				erro_print("Slave Address I2C NAK detected...");
    2774:	482a      	ldr	r0, [pc, #168]	; (2820 <L_396_delayMicroseconds+0x36>)
    2776:	f003 fe2b 	bl	63d0 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    277a:	2380      	movs	r3, #128	; 0x80
    277c:	e00e      	b.n	279c <i2c0_isr+0x84>
			}
			else
			{
				dbug_msg("Attempting to read byte - ");
    277e:	4829      	ldr	r0, [pc, #164]	; (2824 <L_396_delayMicroseconds+0x3a>)
    2780:	f003 fe26 	bl	63d0 <_print>
				printHex( I2C_RxBuffer.sequencePos );
    2784:	7930      	ldrb	r0, [r6, #4]
    2786:	2101      	movs	r1, #1
    2788:	f003 fec4 	bl	6514 <printHex_op>
				print( NL );
    278c:	4826      	ldr	r0, [pc, #152]	; (2828 <L_396_delayMicroseconds+0x3e>)
    278e:	f003 fe1f 	bl	63d0 <_print>
				I2C0_C1 = I2C_RxBuffer.sequencePos == 1
    2792:	7933      	ldrb	r3, [r6, #4]
    2794:	2b01      	cmp	r3, #1
    2796:	bf0c      	ite	eq
    2798:	23e8      	moveq	r3, #232	; 0xe8
    279a:	23e0      	movne	r3, #224	; 0xe0
    279c:	703b      	strb	r3, [r7, #0]
    279e:	e02d      	b.n	27fc <L_396_delayMicroseconds+0x12>
#elif F_CPU == 48000000
	uint32_t n = usec << 4;
#elif F_CPU == 24000000
	uint32_t n = usec << 3;
#endif
	asm volatile(
    27a0:	2320      	movs	r3, #32

000027a2 <L_327_delayMicroseconds>:
    27a2:	3b01      	subs	r3, #1
    27a4:	d1fd      	bne.n	27a2 <L_327_delayMicroseconds>
			print(NL);
			*/

			// Delay around STOP to make sure it actually happens...
			delayMicroseconds( 1 );
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27a6:	2380      	movs	r3, #128	; 0x80
    27a8:	703b      	strb	r3, [r7, #0]
    27aa:	23e0      	movs	r3, #224	; 0xe0

000027ac <L_339_delayMicroseconds>:
    27ac:	3b01      	subs	r3, #1
    27ae:	d1fd      	bne.n	27ac <L_339_delayMicroseconds>
			delayMicroseconds( 7 );

			// If there is another sequence, start sending
			if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) < I2C_TxBuffer.size )
    27b0:	4628      	mov	r0, r5
    27b2:	f7ff ff24 	bl	25fe <I2C_BufferLen>
    27b6:	88eb      	ldrh	r3, [r5, #6]
    27b8:	b29b      	uxth	r3, r3
    27ba:	4298      	cmp	r0, r3
    27bc:	d21e      	bcs.n	27fc <L_396_delayMicroseconds+0x12>
			{
				// Clear status flags
				I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    27be:	2312      	movs	r3, #18
    27c0:	7023      	strb	r3, [r4, #0]

				// Wait...till the master dies
				while ( I2C0_S & I2C_S_BUSY );
    27c2:	7823      	ldrb	r3, [r4, #0]
    27c4:	069b      	lsls	r3, r3, #26
    27c6:	d4fc      	bmi.n	27c2 <L_339_delayMicroseconds+0x16>

				// Enable I2C interrupt
				I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    27c8:	23f0      	movs	r3, #240	; 0xf0
    27ca:	703b      	strb	r3, [r7, #0]

				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
    27cc:	f7ff ff52 	bl	2674 <I2C_TxBufferPop>
    27d0:	4b16      	ldr	r3, [pc, #88]	; (282c <L_396_delayMicroseconds+0x42>)
    27d2:	7018      	strb	r0, [r3, #0]
    27d4:	e012      	b.n	27fc <L_396_delayMicroseconds+0x12>
	{
		// XXX Do we need to handle 2nd last byte?
		//I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // No STOP, Rx, NAK on recv

		// Last byte
		if ( I2C_TxBuffer.sequencePos <= 1 )
    27d6:	2b01      	cmp	r3, #1
    27d8:	4b14      	ldr	r3, [pc, #80]	; (282c <L_396_delayMicroseconds+0x42>)
    27da:	d80b      	bhi.n	27f4 <L_396_delayMicroseconds+0xa>
		{
			// Change to Tx mode
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    27dc:	22b0      	movs	r2, #176	; 0xb0
    27de:	7032      	strb	r2, [r6, #0]

			// Grab last byte
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27e0:	7818      	ldrb	r0, [r3, #0]
    27e2:	490d      	ldr	r1, [pc, #52]	; (2818 <L_396_delayMicroseconds+0x2e>)
    27e4:	f7ff ff16 	bl	2614 <I2C_BufferPush>
    27e8:	2320      	movs	r3, #32

000027ea <L_396_delayMicroseconds>:
    27ea:	3b01      	subs	r3, #1
    27ec:	d1fd      	bne.n	27ea <L_396_delayMicroseconds>

			delayMicroseconds( 1 ); // Should be enough time before issuing the stop
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27ee:	2380      	movs	r3, #128	; 0x80
    27f0:	7033      	strb	r3, [r6, #0]
    27f2:	e003      	b.n	27fc <L_396_delayMicroseconds+0x12>
		}
		else
		{
			// Retrieve data
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27f4:	7818      	ldrb	r0, [r3, #0]
    27f6:	4908      	ldr	r1, [pc, #32]	; (2818 <L_396_delayMicroseconds+0x2e>)
    27f8:	f7ff ff0c 	bl	2614 <I2C_BufferPush>
		}
	}

	I2C0_S = I2C_S_IICIF; // Clear interrupt
    27fc:	2302      	movs	r3, #2
    27fe:	7023      	strb	r3, [r4, #0]

	sei(); // Re-enable Interrupts
    2800:	b662      	cpsie	i
    2802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2806:	bf00      	nop
    2808:	40066002 	.word	0x40066002
    280c:	40066003 	.word	0x40066003
    2810:	1fff89dc 	.word	0x1fff89dc
    2814:	0000688d 	.word	0x0000688d
    2818:	1fff89d0 	.word	0x1fff89d0
    281c:	000068b8 	.word	0x000068b8
    2820:	000068e3 	.word	0x000068e3
    2824:	0000691c 	.word	0x0000691c
    2828:	000093eb 	.word	0x000093eb
    282c:	40066004 	.word	0x40066004

00002830 <I2C_Send>:
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2834:	4c32      	ldr	r4, [pc, #200]	; (2900 <I2C_Send+0xd0>)
    2836:	88e3      	ldrh	r3, [r4, #6]
    2838:	fa1f f981 	uxth.w	r9, r1
    283c:	b29b      	uxth	r3, r3
    283e:	454b      	cmp	r3, r9
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2840:	4680      	mov	r8, r0
    2842:	460f      	mov	r7, r1
    2844:	4692      	mov	sl, r2
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2846:	d354      	bcc.n	28f2 <I2C_Send+0xc2>
	// The second element in the new buffer is the length of the buffer sequence (+1)
	uint16_t newTail = buffer->tail + sendLen + 2;
	if ( newTail >= buffer->size )
		newTail -= buffer->size;

	if ( I2C_BufferLen( buffer ) < sendLen + 2 )
    2848:	4620      	mov	r0, r4
    284a:	f7ff fed8 	bl	25fe <I2C_BufferLen>
    284e:	1c7b      	adds	r3, r7, #1
    2850:	4283      	cmp	r3, r0
    2852:	da4e      	bge.n	28f2 <I2C_Send+0xc2>
	printHex( newTail );
	print("@");
*/

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;
    2854:	8825      	ldrh	r5, [r4, #0]
    2856:	8863      	ldrh	r3, [r4, #2]
    2858:	b2ad      	uxth	r5, r5
    285a:	b29b      	uxth	r3, r3
    285c:	429d      	cmp	r5, r3
    285e:	bf0c      	ite	eq
    2860:	2501      	moveq	r5, #1
    2862:	2502      	movne	r5, #2

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    2864:	2300      	movs	r3, #0

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
    2866:	461e      	mov	r6, r3
	for ( uint16_t c = 0; c < sendLen; c++ )
    2868:	454b      	cmp	r3, r9
    286a:	d229      	bcs.n	28c0 <I2C_Send+0x90>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
    286c:	b14e      	cbz	r6, 2882 <I2C_Send+0x52>
    286e:	2e01      	cmp	r6, #1
    2870:	d110      	bne.n	2894 <I2C_Send+0x64>
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    2872:	8862      	ldrh	r2, [r4, #2]
    2874:	68a1      	ldr	r1, [r4, #8]
    2876:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2878:	3b01      	subs	r3, #1
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    287a:	548f      	strb	r7, [r1, r2]
			bufferHeaderPos++;
			c--;
    287c:	b29b      	uxth	r3, r3
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
			bufferHeaderPos++;
    287e:	2602      	movs	r6, #2
    2880:	e00e      	b.n	28a0 <I2C_Send+0x70>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    2882:	8862      	ldrh	r2, [r4, #2]
    2884:	68a1      	ldr	r1, [r4, #8]
    2886:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2888:	3b01      	subs	r3, #1
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    288a:	f801 a002 	strb.w	sl, [r1, r2]
			bufferHeaderPos++;
			c--;
    288e:	b29b      	uxth	r3, r3
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
			bufferHeaderPos++;
    2890:	2601      	movs	r6, #1
    2892:	e005      	b.n	28a0 <I2C_Send+0x70>
			bufferHeaderPos++;
			c--;
			break;

		default:
			buffer->buffer[ buffer->tail ] = data[ c ];
    2894:	8862      	ldrh	r2, [r4, #2]
    2896:	68a1      	ldr	r1, [r4, #8]
    2898:	f818 0003 	ldrb.w	r0, [r8, r3]
    289c:	b292      	uxth	r2, r2
    289e:	5488      	strb	r0, [r1, r2]
			break;
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
    28a0:	8860      	ldrh	r0, [r4, #2]
    28a2:	88e1      	ldrh	r1, [r4, #6]
    28a4:	4a16      	ldr	r2, [pc, #88]	; (2900 <I2C_Send+0xd0>)
    28a6:	b280      	uxth	r0, r0
    28a8:	b289      	uxth	r1, r1
    28aa:	3001      	adds	r0, #1
    28ac:	4288      	cmp	r0, r1
		{
			buffer->tail = 0;
    28ae:	bfa8      	it	ge
    28b0:	2100      	movge	r1, #0
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28b2:	f103 0301 	add.w	r3, r3, #1
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
		{
			buffer->tail = 0;
    28b6:	bfac      	ite	ge
    28b8:	8051      	strhge	r1, [r2, #2]
		}
		// Normal case
		else
		{
			buffer->tail++;
    28ba:	8050      	strhlt	r0, [r2, #2]
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28bc:	b29b      	uxth	r3, r3
    28be:	e7d3      	b.n	2868 <I2C_Send+0x38>
{
	// Check head and tail pointers
	// If full, return 0
	// If empty, start up I2C Master Tx
	// If buffer is non-empty and non-full, just append to the buffer
	switch ( I2C_BufferCopy( data, sendLen, recvLen, (I2C_Buffer*)&I2C_TxBuffer ) )
    28c0:	2d01      	cmp	r5, #1
    28c2:	d119      	bne.n	28f8 <I2C_Send+0xc8>
		return 0;

	// Empty buffer, initialize I2C
	case 1:
		// Clear status flags
		I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    28c4:	4a0f      	ldr	r2, [pc, #60]	; (2904 <I2C_Send+0xd4>)
    28c6:	2312      	movs	r3, #18
    28c8:	7013      	strb	r3, [r2, #0]

		// Check to see if we already have control of the bus
		if ( I2C0_C1 & I2C_C1_MST )
    28ca:	4b0f      	ldr	r3, [pc, #60]	; (2908 <I2C_Send+0xd8>)
    28cc:	7819      	ldrb	r1, [r3, #0]
    28ce:	0688      	lsls	r0, r1, #26
    28d0:	d501      	bpl.n	28d6 <I2C_Send+0xa6>
		{
			// Already the master (ah yeah), send a repeated start
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    28d2:	22b4      	movs	r2, #180	; 0xb4
    28d4:	e003      	b.n	28de <I2C_Send+0xae>
		}
		// Otherwise, seize control
		else
		{
			// Wait...till the master dies
			while ( I2C0_S & I2C_S_BUSY );
    28d6:	7811      	ldrb	r1, [r2, #0]
    28d8:	0689      	lsls	r1, r1, #26
    28da:	d4fc      	bmi.n	28d6 <I2C_Send+0xa6>

			// Now we're the master (ah yisss), get ready to send stuffs
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    28dc:	22b0      	movs	r2, #176	; 0xb0
    28de:	701a      	strb	r2, [r3, #0]
		}

		// Enable I2C interrupt
		I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    28e0:	22f0      	movs	r2, #240	; 0xf0
    28e2:	701a      	strb	r2, [r3, #0]

		// Depending on what type of transfer, the first byte is configured for R or W
		I2C0_D = I2C_TxBufferPop();
    28e4:	f7ff fec6 	bl	2674 <I2C_TxBufferPop>
    28e8:	4b08      	ldr	r3, [pc, #32]	; (290c <I2C_Send+0xdc>)
    28ea:	7018      	strb	r0, [r3, #0]

		return 1;
    28ec:	2001      	movs	r0, #1
    28ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printHex( sendLen );
		print("|");
		printHex( I2C_TxBuffer.size );
		print( NL );
		*/
		return 0;
    28f2:	2000      	movs	r0, #0
    28f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return 1;
	}

	// Dirty buffer, I2C already initialized
	return 2;
    28f8:	2002      	movs	r0, #2
}
    28fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28fe:	bf00      	nop
    2900:	1fff89dc 	.word	0x1fff89dc
    2904:	40066003 	.word	0x40066003
    2908:	40066002 	.word	0x40066002
    290c:	40066004 	.word	0x40066004

00002910 <LED_zeroPages>:
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2914:	4698      	mov	r8, r3
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    2916:	4b1a      	ldr	r3, [pc, #104]	; (2980 <LED_zeroPages+0x70>)
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2918:	b0b0      	sub	sp, #192	; 0xc0
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    291a:	881b      	ldrh	r3, [r3, #0]
    291c:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2920:	4605      	mov	r5, r0
    2922:	4616      	mov	r6, r2
    2924:	460f      	mov	r7, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };

	// Max length of a page + chip id + reg start
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
    2926:	a802      	add	r0, sp, #8
    2928:	2100      	movs	r1, #0
    292a:	22b6      	movs	r2, #182	; 0xb6
    292c:	f7ff fe1c 	bl	2568 <memset>
	fullPage[0] = 0xE8;     // Set chip id
    2930:	23e8      	movs	r3, #232	; 0xe8
    2932:	f88d 3008 	strb.w	r3, [sp, #8]
	fullPage[1] = startReg; // Set start reg
    2936:	f88d 6009 	strb.w	r6, [sp, #9]

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    293a:	462c      	mov	r4, r5
    293c:	19eb      	adds	r3, r5, r7
    293e:	429c      	cmp	r4, r3
    2940:	da1b      	bge.n	297a <LED_zeroPages+0x6a>
	{
		// Set page
		pageSetup[2] = page;
    2942:	f88d 4006 	strb.w	r4, [sp, #6]

		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2946:	a801      	add	r0, sp, #4
    2948:	2103      	movs	r1, #3
    294a:	2200      	movs	r2, #0
    294c:	f7ff ff70 	bl	2830 <I2C_Send>
    2950:	b918      	cbnz	r0, 295a <LED_zeroPages+0x4a>
			delay(1);
    2952:	2001      	movs	r0, #1
    2954:	f7ff fe40 	bl	25d8 <delay>
    2958:	e7f5      	b.n	2946 <LED_zeroPages+0x36>
    295a:	f108 0102 	add.w	r1, r8, #2

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    295e:	1b89      	subs	r1, r1, r6
    2960:	a802      	add	r0, sp, #8
    2962:	b2c9      	uxtb	r1, r1
    2964:	2200      	movs	r2, #0
    2966:	f7ff ff63 	bl	2830 <I2C_Send>
    296a:	b918      	cbnz	r0, 2974 <LED_zeroPages+0x64>
			delay(1);
    296c:	2001      	movs	r0, #1
    296e:	f7ff fe33 	bl	25d8 <delay>
    2972:	e7f2      	b.n	295a <LED_zeroPages+0x4a>
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
	fullPage[0] = 0xE8;     // Set chip id
	fullPage[1] = startReg; // Set start reg

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    2974:	3401      	adds	r4, #1
    2976:	b2e4      	uxtb	r4, r4
    2978:	e7e0      	b.n	293c <LED_zeroPages+0x2c>

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
			delay(1);
	}
}
    297a:	b030      	add	sp, #192	; 0xc0
    297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2980:	000066f4 	.word	0x000066f4

00002984 <cliFunc_ledZero>:
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
}

void cliFunc_ledZero( char* args )
{
    2984:	b510      	push	{r4, lr}
	print( NL ); // No \r\n by default after the command is entered
    2986:	4805      	ldr	r0, [pc, #20]	; (299c <cliFunc_ledZero+0x18>)
    2988:	f003 fd22 	bl	63d0 <_print>
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    298c:	2000      	movs	r0, #0
    298e:	2108      	movs	r1, #8
    2990:	2224      	movs	r2, #36	; 0x24
    2992:	23b4      	movs	r3, #180	; 0xb4
}
    2994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void cliFunc_ledZero( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    2998:	f7ff bfba 	b.w	2910 <LED_zeroPages>
    299c:	000093eb 	.word	0x000093eb

000029a0 <LED_sendPage>:
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29a2:	23e8      	movs	r3, #232	; 0xe8
    29a4:	f88d 3004 	strb.w	r3, [sp, #4]
    29a8:	23fd      	movs	r3, #253	; 0xfd
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29aa:	4605      	mov	r5, r0
    29ac:	460c      	mov	r4, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29ae:	f88d 3005 	strb.w	r3, [sp, #5]
    29b2:	f88d 2006 	strb.w	r2, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    29b6:	a801      	add	r0, sp, #4
    29b8:	2103      	movs	r1, #3
    29ba:	2200      	movs	r2, #0
    29bc:	f7ff ff38 	bl	2830 <I2C_Send>
    29c0:	b918      	cbnz	r0, 29ca <LED_sendPage+0x2a>
		delay(1);
    29c2:	2001      	movs	r0, #1
    29c4:	f7ff fe08 	bl	25d8 <delay>
    29c8:	e7f5      	b.n	29b6 <LED_sendPage+0x16>

	// Write page to I2C Tx Buffer
	while ( I2C_Send( buffer, len, 0 ) == 0 )
    29ca:	4628      	mov	r0, r5
    29cc:	4621      	mov	r1, r4
    29ce:	2200      	movs	r2, #0
    29d0:	f7ff ff2e 	bl	2830 <I2C_Send>
    29d4:	b918      	cbnz	r0, 29de <LED_sendPage+0x3e>
		delay(1);
    29d6:	2001      	movs	r0, #1
    29d8:	f7ff fdfe 	bl	25d8 <delay>
    29dc:	e7f5      	b.n	29ca <LED_sendPage+0x2a>

}
    29de:	b003      	add	sp, #12
    29e0:	bd30      	pop	{r4, r5, pc}
    29e2:	0000      	movs	r0, r0

000029e4 <cliFunc_ledTest>:
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );

}

void cliFunc_ledTest( char* args )
{
    29e4:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    29e6:	4805      	ldr	r0, [pc, #20]	; (29fc <cliFunc_ledTest+0x18>)
    29e8:	f003 fcf2 	bl	63d0 <_print>
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29ec:	4804      	ldr	r0, [pc, #16]	; (2a00 <cliFunc_ledTest+0x1c>)
    29ee:	2192      	movs	r1, #146	; 0x92
    29f0:	2200      	movs	r2, #0
}
    29f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void cliFunc_ledTest( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29f6:	f7ff bfd3 	b.w	29a0 <LED_sendPage>
    29fa:	bf00      	nop
    29fc:	000093eb 	.word	0x000093eb
    2a00:	00006a23 	.word	0x00006a23

00002a04 <LED_writeReg>:
		delay(1);

}

void LED_writeReg( uint8_t reg, uint8_t val, uint8_t page )
{
    2a04:	b513      	push	{r0, r1, r4, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2a06:	23e8      	movs	r3, #232	; 0xe8
    2a08:	24fd      	movs	r4, #253	; 0xfd
    2a0a:	f88d 3000 	strb.w	r3, [sp]
    2a0e:	f88d 4001 	strb.w	r4, [sp, #1]
    2a12:	f88d 2002 	strb.w	r2, [sp, #2]

	// Reg Write Setup
	uint8_t writeData[] = { 0xE8, reg, val };
    2a16:	f88d 3004 	strb.w	r3, [sp, #4]
    2a1a:	f88d 0005 	strb.w	r0, [sp, #5]
    2a1e:	f88d 1006 	strb.w	r1, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2a22:	4668      	mov	r0, sp
    2a24:	2103      	movs	r1, #3
    2a26:	2200      	movs	r2, #0
    2a28:	f7ff ff02 	bl	2830 <I2C_Send>
    2a2c:	b918      	cbnz	r0, 2a36 <LED_writeReg+0x32>
		delay(1);
    2a2e:	2001      	movs	r0, #1
    2a30:	f7ff fdd2 	bl	25d8 <delay>
    2a34:	e7f5      	b.n	2a22 <LED_writeReg+0x1e>

	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
    2a36:	a801      	add	r0, sp, #4
    2a38:	2103      	movs	r1, #3
    2a3a:	2200      	movs	r2, #0
    2a3c:	f7ff fef8 	bl	2830 <I2C_Send>
    2a40:	b918      	cbnz	r0, 2a4a <LED_writeReg+0x46>
		delay(1);
    2a42:	2001      	movs	r0, #1
    2a44:	f7ff fdc8 	bl	25d8 <delay>
    2a48:	e7f5      	b.n	2a36 <LED_writeReg+0x32>
}
    2a4a:	b002      	add	sp, #8
    2a4c:	bd10      	pop	{r4, pc}
    2a4e:	0000      	movs	r0, r0

00002a50 <LED_setup>:
	LED_writeReg( 0x0A, 0x01, 0x0B );
}

// Setup
inline void LED_setup()
{
    2a50:	b508      	push	{r3, lr}
	// Register Scan CLI dictionary
	CLI_registerDictionary( ledCLIDict, ledCLIDictName );
    2a52:	4825      	ldr	r0, [pc, #148]	; (2ae8 <LED_setup+0x98>)
    2a54:	4925      	ldr	r1, [pc, #148]	; (2aec <LED_setup+0x9c>)
    2a56:	f003 fa67 	bl	5f28 <CLI_registerDictionary>
// ----- Functions -----

inline void I2C_setup()
{
	// Enable I2C internal clock
	SIM_SCGC4 |= SIM_SCGC4_I2C0; // Bus 0
    2a5a:	4a25      	ldr	r2, [pc, #148]	; (2af0 <LED_setup+0xa0>)
    2a5c:	6813      	ldr	r3, [r2, #0]
    2a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a62:	6013      	str	r3, [r2, #0]

	// External pull-up resistor
	PORTB_PCR0 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a64:	4a23      	ldr	r2, [pc, #140]	; (2af4 <LED_setup+0xa4>)
    2a66:	f44f 7319 	mov.w	r3, #612	; 0x264
    2a6a:	6013      	str	r3, [r2, #0]
	PORTB_PCR1 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a6c:	6053      	str	r3, [r2, #4]

	// SCL Frequency Divider
	// 400kHz -> 120 (0x85) @ 48 MHz F_BUS
	I2C0_F = 0x85;
    2a6e:	4b22      	ldr	r3, [pc, #136]	; (2af8 <LED_setup+0xa8>)
    2a70:	2285      	movs	r2, #133	; 0x85
    2a72:	701a      	strb	r2, [r3, #0]
	I2C0_FLT = 4;
    2a74:	2204      	movs	r2, #4
    2a76:	715a      	strb	r2, [r3, #5]
	I2C0_C1 = I2C_C1_IICEN;
    2a78:	2280      	movs	r2, #128	; 0x80
    2a7a:	705a      	strb	r2, [r3, #1]
	I2C0_C2 = I2C_C2_HDRS; // High drive select
    2a7c:	2220      	movs	r2, #32
    2a7e:	711a      	strb	r2, [r3, #4]

	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
    2a80:	4b1e      	ldr	r3, [pc, #120]	; (2afc <LED_setup+0xac>)
    2a82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2a86:	601a      	str	r2, [r3, #0]
	// Initialize I2C
	I2C_setup();

	// Zero out Frame Registers
	// This needs to be done before disabling the hardware shutdown (or the leds will do undefined things)
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2a88:	200b      	movs	r0, #11
    2a8a:	2101      	movs	r1, #1
    2a8c:	2200      	movs	r2, #0
    2a8e:	230c      	movs	r3, #12
    2a90:	f7ff ff3e 	bl	2910 <LED_zeroPages>

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
    2a94:	4a1a      	ldr	r2, [pc, #104]	; (2b00 <LED_setup+0xb0>)
    2a96:	6813      	ldr	r3, [r2, #0]
    2a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a9c:	6013      	str	r3, [r2, #0]
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2a9e:	4b19      	ldr	r3, [pc, #100]	; (2b04 <LED_setup+0xb4>)
    2aa0:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2aa4:	601a      	str	r2, [r3, #0]
	GPIOB_PSOR |= (1<<16);
    2aa6:	4a18      	ldr	r2, [pc, #96]	; (2b08 <LED_setup+0xb8>)
    2aa8:	6813      	ldr	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2aaa:	2000      	movs	r0, #0
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
	GPIOB_PSOR |= (1<<16);
    2aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ab0:	6013      	str	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2ab2:	2108      	movs	r1, #8
    2ab4:	23b4      	movs	r3, #180	; 0xb4
    2ab6:	4602      	mov	r2, r0
    2ab8:	f7ff ff2a 	bl	2910 <LED_zeroPages>

	// Enable LEDs based upon mask
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2abc:	4813      	ldr	r0, [pc, #76]	; (2b0c <LED_setup+0xbc>)
    2abe:	2114      	movs	r1, #20
    2ac0:	2200      	movs	r2, #0
    2ac2:	f7ff ff6d 	bl	29a0 <LED_sendPage>

	// Set default brightness
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    2ac6:	4812      	ldr	r0, [pc, #72]	; (2b10 <LED_setup+0xc0>)
    2ac8:	2192      	movs	r1, #146	; 0x92
    2aca:	2200      	movs	r2, #0
    2acc:	f7ff ff68 	bl	29a0 <LED_sendPage>

	// Do not disable software shutdown of ISSI chip unless current is high enough
	// Require at least 150 mA
	// May be enabled/disabled at a later time
	if ( Output_current_available() >= 150 )
    2ad0:	f002 f826 	bl	4b20 <Output_current_available>
    2ad4:	2895      	cmp	r0, #149	; 0x95
    2ad6:	d906      	bls.n	2ae6 <LED_setup+0x96>
	{
		// Disable Software shutdown of ISSI chip
		LED_writeReg( 0x0A, 0x01, 0x0B );
    2ad8:	200a      	movs	r0, #10
    2ada:	2101      	movs	r1, #1
    2adc:	220b      	movs	r2, #11
	}
}
    2ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Require at least 150 mA
	// May be enabled/disabled at a later time
	if ( Output_current_available() >= 150 )
	{
		// Disable Software shutdown of ISSI chip
		LED_writeReg( 0x0A, 0x01, 0x0B );
    2ae2:	f7ff bf8f 	b.w	2a04 <LED_writeReg>
    2ae6:	bd08      	pop	{r3, pc}
    2ae8:	0000675c 	.word	0x0000675c
    2aec:	00006bb7 	.word	0x00006bb7
    2af0:	40048034 	.word	0x40048034
    2af4:	4004a000 	.word	0x4004a000
    2af8:	40066001 	.word	0x40066001
    2afc:	e000e100 	.word	0xe000e100
    2b00:	400ff054 	.word	0x400ff054
    2b04:	4004a040 	.word	0x4004a040
    2b08:	400ff044 	.word	0x400ff044
    2b0c:	00006ba3 	.word	0x00006ba3
    2b10:	00006a23 	.word	0x00006a23

00002b14 <cliFunc_ledStart>:
		data[1]++;
	}
}

void cliFunc_ledStart( char* args )
{
    2b14:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    2b16:	480a      	ldr	r0, [pc, #40]	; (2b40 <cliFunc_ledStart+0x2c>)
    2b18:	f003 fc5a 	bl	63d0 <_print>
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2b1c:	230c      	movs	r3, #12
    2b1e:	200b      	movs	r0, #11
    2b20:	2101      	movs	r1, #1
    2b22:	2200      	movs	r2, #0
    2b24:	f7ff fef4 	bl	2910 <LED_zeroPages>
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2b28:	200a      	movs	r0, #10
    2b2a:	2101      	movs	r1, #1
    2b2c:	220b      	movs	r2, #11
    2b2e:	f7ff ff69 	bl	2a04 <LED_writeReg>
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b32:	4804      	ldr	r0, [pc, #16]	; (2b44 <cliFunc_ledStart+0x30>)
    2b34:	2114      	movs	r1, #20
    2b36:	2200      	movs	r2, #0

}
    2b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b3c:	f7ff bf30 	b.w	29a0 <LED_sendPage>
    2b40:	000093eb 	.word	0x000093eb
    2b44:	00006ba3 	.word	0x00006ba3

00002b48 <LED_readPage>:
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b48:	b530      	push	{r4, r5, lr}
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b4a:	220b      	movs	r2, #11
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b4c:	b085      	sub	sp, #20
    2b4e:	460c      	mov	r4, r1
    2b50:	4605      	mov	r5, r0
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b52:	2100      	movs	r1, #0
    2b54:	200a      	movs	r0, #10
    2b56:	f7ff ff55 	bl	2a04 <LED_writeReg>

	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2b5a:	23e8      	movs	r3, #232	; 0xe8
    2b5c:	f88d 300c 	strb.w	r3, [sp, #12]
    2b60:	23fd      	movs	r3, #253	; 0xfd
    2b62:	f88d 300d 	strb.w	r3, [sp, #13]
    2b66:	f88d 400e 	strb.w	r4, [sp, #14]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2b6a:	a803      	add	r0, sp, #12
    2b6c:	2103      	movs	r1, #3
    2b6e:	2200      	movs	r2, #0
    2b70:	f7ff fe5e 	bl	2830 <I2C_Send>
    2b74:	b918      	cbnz	r0, 2b7e <LED_readPage+0x36>
		delay(1);
    2b76:	2001      	movs	r0, #1
    2b78:	f7ff fd2e 	bl	25d8 <delay>
    2b7c:	e7f5      	b.n	2b6a <LED_readPage+0x22>

	// Register Setup
	uint8_t regSetup[] = { 0xE8, 0x00 };
    2b7e:	23e8      	movs	r3, #232	; 0xe8
    2b80:	2400      	movs	r4, #0
    2b82:	f88d 3008 	strb.w	r3, [sp, #8]
    2b86:	f88d 4009 	strb.w	r4, [sp, #9]

	// Read each register in the page
	for ( uint8_t reg = 0; reg < len; reg++ )
    2b8a:	42ac      	cmp	r4, r5
    2b8c:	b2e3      	uxtb	r3, r4
    2b8e:	d01d      	beq.n	2bcc <LED_readPage+0x84>
	{
		// Update register to read
		regSetup[1] = reg;
    2b90:	f88d 3009 	strb.w	r3, [sp, #9]

		// Configure register
		while ( I2C_Send( regSetup, sizeof( regSetup ), 0 ) == 0 )
    2b94:	a802      	add	r0, sp, #8
    2b96:	2102      	movs	r1, #2
    2b98:	2200      	movs	r2, #0
    2b9a:	f7ff fe49 	bl	2830 <I2C_Send>
    2b9e:	b918      	cbnz	r0, 2ba8 <LED_readPage+0x60>
			delay(1);
    2ba0:	2001      	movs	r0, #1
    2ba2:	f7ff fd19 	bl	25d8 <delay>
    2ba6:	e7f5      	b.n	2b94 <LED_readPage+0x4c>

		// Register Read Command
		uint8_t regReadCmd[] = { 0xE9 };
    2ba8:	23e9      	movs	r3, #233	; 0xe9
    2baa:	f88d 3004 	strb.w	r3, [sp, #4]

		// Request single register byte
		while ( I2C_Send( regReadCmd, sizeof( regReadCmd ), 1 ) == 0 )
    2bae:	2101      	movs	r1, #1
    2bb0:	a801      	add	r0, sp, #4
    2bb2:	460a      	mov	r2, r1
    2bb4:	f7ff fe3c 	bl	2830 <I2C_Send>
    2bb8:	b918      	cbnz	r0, 2bc2 <LED_readPage+0x7a>
			delay(1);
    2bba:	2001      	movs	r0, #1
    2bbc:	f7ff fd0c 	bl	25d8 <delay>
    2bc0:	e7f5      	b.n	2bae <LED_readPage+0x66>
		dbug_print("NEXT");
    2bc2:	4806      	ldr	r0, [pc, #24]	; (2bdc <LED_readPage+0x94>)
    2bc4:	f003 fc04 	bl	63d0 <_print>
    2bc8:	3401      	adds	r4, #1
    2bca:	e7de      	b.n	2b8a <LED_readPage+0x42>
	}

	// Disable software shutdown
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2bcc:	200a      	movs	r0, #10
    2bce:	2101      	movs	r1, #1
    2bd0:	220b      	movs	r2, #11
    2bd2:	f7ff ff17 	bl	2a04 <LED_writeReg>
}
    2bd6:	b005      	add	sp, #20
    2bd8:	bd30      	pop	{r4, r5, pc}
    2bda:	bf00      	nop
    2bdc:	0000694a 	.word	0x0000694a

00002be0 <cliFunc_ledRPage>:
	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
}

// TODO Currently not working correctly
void cliFunc_ledRPage( char* args )
{
    2be0:	b513      	push	{r0, r1, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2be2:	4669      	mov	r1, sp
    2be4:	aa01      	add	r2, sp, #4
    2be6:	f003 f92b 	bl	5e40 <CLI_argumentIsolation>

	// Default to 0 if no argument is given
	uint8_t page = 0;

	if ( arg1Ptr[0] != '\0' )
    2bea:	9800      	ldr	r0, [sp, #0]
    2bec:	7804      	ldrb	r4, [r0, #0]
    2bee:	b114      	cbz	r4, 2bf6 <cliFunc_ledRPage+0x16>
	{
		page = (uint8_t)numToInt( arg1Ptr );
    2bf0:	f003 fcec 	bl	65cc <numToInt>
    2bf4:	b2c4      	uxtb	r4, r0
	}

	// No \r\n by default after the command is entered
	print( NL );
    2bf6:	4804      	ldr	r0, [pc, #16]	; (2c08 <cliFunc_ledRPage+0x28>)
    2bf8:	f003 fbea 	bl	63d0 <_print>

	LED_readPage( 0x1, page );
    2bfc:	2001      	movs	r0, #1
    2bfe:	4621      	mov	r1, r4
    2c00:	f7ff ffa2 	bl	2b48 <LED_readPage>
	//LED_readPage( 0xB4, page );
}
    2c04:	b002      	add	sp, #8
    2c06:	bd10      	pop	{r4, pc}
    2c08:	000093eb 	.word	0x000093eb

00002c0c <cliFunc_i2cSend>:

// ----- CLI Command Functions -----

// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
    2c0c:	b530      	push	{r4, r5, lr}
    2c0e:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c10:	2500      	movs	r5, #0
// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c12:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c14:	481b      	ldr	r0, [pc, #108]	; (2c84 <cliFunc_i2cSend+0x78>)
    2c16:	f003 fbdb 	bl	63d0 <_print>
	info_msg("Sending: ");
    2c1a:	481b      	ldr	r0, [pc, #108]	; (2c88 <cliFunc_i2cSend+0x7c>)
    2c1c:	f003 fbd8 	bl	63d0 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2c20:	9801      	ldr	r0, [sp, #4]
    2c22:	4669      	mov	r1, sp
    2c24:	aa01      	add	r2, sp, #4
    2c26:	f003 f90b 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2c2a:	9800      	ldr	r0, [sp, #0]
    2c2c:	7803      	ldrb	r3, [r0, #0]
    2c2e:	b1eb      	cbz	r3, 2c6c <cliFunc_i2cSend+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2c30:	2b7c      	cmp	r3, #124	; 0x7c
    2c32:	d10a      	bne.n	2c4a <cliFunc_i2cSend+0x3e>
		{
			print("| ");
    2c34:	4815      	ldr	r0, [pc, #84]	; (2c8c <cliFunc_i2cSend+0x80>)
    2c36:	f003 fbcb 	bl	63d0 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2c3a:	a802      	add	r0, sp, #8
    2c3c:	4629      	mov	r1, r5
    2c3e:	2200      	movs	r2, #0
    2c40:	f7ff fdf6 	bl	2830 <I2C_Send>
			bufferLen = 0;
    2c44:	2400      	movs	r4, #0
    2c46:	4625      	mov	r5, r4
    2c48:	e7ea      	b.n	2c20 <cliFunc_i2cSend+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2c4a:	f003 fcbf 	bl	65cc <numToInt>
    2c4e:	ab04      	add	r3, sp, #16
    2c50:	1c6c      	adds	r4, r5, #1
    2c52:	441d      	add	r5, r3
    2c54:	b2e4      	uxtb	r4, r4
    2c56:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2c5a:	9800      	ldr	r0, [sp, #0]
    2c5c:	f001 ff50 	bl	4b00 <Output_putstr>
		print(" ");
    2c60:	480b      	ldr	r0, [pc, #44]	; (2c90 <cliFunc_i2cSend+0x84>)
    2c62:	f003 fbb5 	bl	63d0 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2c66:	2c07      	cmp	r4, #7
    2c68:	d9ed      	bls.n	2c46 <cliFunc_i2cSend+0x3a>
    2c6a:	e000      	b.n	2c6e <cliFunc_i2cSend+0x62>
    2c6c:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2c6e:	4805      	ldr	r0, [pc, #20]	; (2c84 <cliFunc_i2cSend+0x78>)
    2c70:	f003 fbae 	bl	63d0 <_print>

	I2C_Send( buffer, bufferLen, 0 );
    2c74:	a802      	add	r0, sp, #8
    2c76:	4621      	mov	r1, r4
    2c78:	2200      	movs	r2, #0
    2c7a:	f7ff fdd9 	bl	2830 <I2C_Send>
}
    2c7e:	b005      	add	sp, #20
    2c80:	bd30      	pop	{r4, r5, pc}
    2c82:	bf00      	nop
    2c84:	000093eb 	.word	0x000093eb
    2c88:	00006964 	.word	0x00006964
    2c8c:	00006980 	.word	0x00006980
    2c90:	00006d66 	.word	0x00006d66

00002c94 <cliFunc_i2cRecv>:

void cliFunc_i2cRecv( char* args )
{
    2c94:	b530      	push	{r4, r5, lr}
    2c96:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c98:	2500      	movs	r5, #0

void cliFunc_i2cRecv( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c9a:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c9c:	481b      	ldr	r0, [pc, #108]	; (2d0c <cliFunc_i2cRecv+0x78>)
    2c9e:	f003 fb97 	bl	63d0 <_print>
	info_msg("Sending: ");
    2ca2:	481b      	ldr	r0, [pc, #108]	; (2d10 <cliFunc_i2cRecv+0x7c>)
    2ca4:	f003 fb94 	bl	63d0 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ca8:	9801      	ldr	r0, [sp, #4]
    2caa:	4669      	mov	r1, sp
    2cac:	aa01      	add	r2, sp, #4
    2cae:	f003 f8c7 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2cb2:	9800      	ldr	r0, [sp, #0]
    2cb4:	7803      	ldrb	r3, [r0, #0]
    2cb6:	b1eb      	cbz	r3, 2cf4 <cliFunc_i2cRecv+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2cb8:	2b7c      	cmp	r3, #124	; 0x7c
    2cba:	d10a      	bne.n	2cd2 <cliFunc_i2cRecv+0x3e>
		{
			print("| ");
    2cbc:	4815      	ldr	r0, [pc, #84]	; (2d14 <cliFunc_i2cRecv+0x80>)
    2cbe:	f003 fb87 	bl	63d0 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2cc2:	a802      	add	r0, sp, #8
    2cc4:	4629      	mov	r1, r5
    2cc6:	2200      	movs	r2, #0
    2cc8:	f7ff fdb2 	bl	2830 <I2C_Send>
			bufferLen = 0;
    2ccc:	2400      	movs	r4, #0
    2cce:	4625      	mov	r5, r4
    2cd0:	e7ea      	b.n	2ca8 <cliFunc_i2cRecv+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2cd2:	f003 fc7b 	bl	65cc <numToInt>
    2cd6:	ab04      	add	r3, sp, #16
    2cd8:	1c6c      	adds	r4, r5, #1
    2cda:	441d      	add	r5, r3
    2cdc:	b2e4      	uxtb	r4, r4
    2cde:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2ce2:	9800      	ldr	r0, [sp, #0]
    2ce4:	f001 ff0c 	bl	4b00 <Output_putstr>
		print(" ");
    2ce8:	480b      	ldr	r0, [pc, #44]	; (2d18 <cliFunc_i2cRecv+0x84>)
    2cea:	f003 fb71 	bl	63d0 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2cee:	2c07      	cmp	r4, #7
    2cf0:	d9ed      	bls.n	2cce <cliFunc_i2cRecv+0x3a>
    2cf2:	e000      	b.n	2cf6 <cliFunc_i2cRecv+0x62>
    2cf4:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2cf6:	4805      	ldr	r0, [pc, #20]	; (2d0c <cliFunc_i2cRecv+0x78>)
    2cf8:	f003 fb6a 	bl	63d0 <_print>

	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
    2cfc:	a802      	add	r0, sp, #8
    2cfe:	4621      	mov	r1, r4
    2d00:	2201      	movs	r2, #1
    2d02:	f7ff fd95 	bl	2830 <I2C_Send>
}
    2d06:	b005      	add	sp, #20
    2d08:	bd30      	pop	{r4, r5, pc}
    2d0a:	bf00      	nop
    2d0c:	000093eb 	.word	0x000093eb
    2d10:	00006964 	.word	0x00006964
    2d14:	00006980 	.word	0x00006980
    2d18:	00006d66 	.word	0x00006d66

00002d1c <cliFunc_ledWPage>:
	LED_readPage( 0x1, page );
	//LED_readPage( 0xB4, page );
}

void cliFunc_ledWPage( char* args )
{
    2d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr = args;

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d1e:	a902      	add	r1, sp, #8
    2d20:	aa03      	add	r2, sp, #12

void cliFunc_ledWPage( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2d22:	9003      	str	r0, [sp, #12]

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d24:	f003 f88c 	bl	5e40 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d28:	9802      	ldr	r0, [sp, #8]
    2d2a:	7803      	ldrb	r3, [r0, #0]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d040      	beq.n	2db2 <cliFunc_ledWPage+0x96>
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d30:	23fd      	movs	r3, #253	; 0xfd
    2d32:	24e8      	movs	r4, #232	; 0xe8
    2d34:	f88d 3001 	strb.w	r3, [sp, #1]
    2d38:	f88d 4000 	strb.w	r4, [sp]
    2d3c:	f003 fc46 	bl	65cc <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d40:	a902      	add	r1, sp, #8
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d42:	f88d 0002 	strb.w	r0, [sp, #2]

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d46:	aa03      	add	r2, sp, #12
    2d48:	9803      	ldr	r0, [sp, #12]
    2d4a:	f003 f879 	bl	5e40 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d4e:	9802      	ldr	r0, [sp, #8]
    2d50:	7803      	ldrb	r3, [r0, #0]
    2d52:	b373      	cbz	r3, 2db2 <cliFunc_ledWPage+0x96>
		return;
	uint8_t data[] = { 0xE8, numToInt( arg1Ptr ), 0 };
    2d54:	f88d 4004 	strb.w	r4, [sp, #4]
    2d58:	f003 fc38 	bl	65cc <numToInt>
    2d5c:	2300      	movs	r3, #0
    2d5e:	f88d 0005 	strb.w	r0, [sp, #5]
    2d62:	f88d 3006 	strb.w	r3, [sp, #6]

	// Set the register page
	while ( I2C_Send( page, sizeof( page ), 0 ) == 0 )
    2d66:	4668      	mov	r0, sp
    2d68:	2103      	movs	r1, #3
    2d6a:	2200      	movs	r2, #0
    2d6c:	f7ff fd60 	bl	2830 <I2C_Send>
    2d70:	b940      	cbnz	r0, 2d84 <cliFunc_ledWPage+0x68>
		delay(1);
    2d72:	2001      	movs	r0, #1
    2d74:	f7ff fc30 	bl	25d8 <delay>
    2d78:	e7f5      	b.n	2d66 <cliFunc_ledWPage+0x4a>
		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
			delay(1);

		// Increment address
		data[1]++;
    2d7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2d7e:	3301      	adds	r3, #1
    2d80:	f88d 3005 	strb.w	r3, [sp, #5]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d84:	9803      	ldr	r0, [sp, #12]
    2d86:	a902      	add	r1, sp, #8
    2d88:	aa03      	add	r2, sp, #12
    2d8a:	f003 f859 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2d8e:	9802      	ldr	r0, [sp, #8]
    2d90:	7803      	ldrb	r3, [r0, #0]
    2d92:	b173      	cbz	r3, 2db2 <cliFunc_ledWPage+0x96>
			break;

		data[2] = numToInt( arg1Ptr );
    2d94:	f003 fc1a 	bl	65cc <numToInt>
    2d98:	f88d 0006 	strb.w	r0, [sp, #6]

		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
    2d9c:	a801      	add	r0, sp, #4
    2d9e:	2103      	movs	r1, #3
    2da0:	2200      	movs	r2, #0
    2da2:	f7ff fd45 	bl	2830 <I2C_Send>
    2da6:	2800      	cmp	r0, #0
    2da8:	d1e7      	bne.n	2d7a <cliFunc_ledWPage+0x5e>
			delay(1);
    2daa:	2001      	movs	r0, #1
    2dac:	f7ff fc14 	bl	25d8 <delay>
    2db0:	e7f4      	b.n	2d9c <cliFunc_ledWPage+0x80>

		// Increment address
		data[1]++;
	}
}
    2db2:	b004      	add	sp, #16
    2db4:	bd10      	pop	{r4, pc}
    2db6:	0000      	movs	r0, r0

00002db8 <LED_scan>:
// LED State processing loop
unsigned int LED_currentEvent = 0;
inline uint8_t LED_scan()
{
	// Check for current change event
	if ( LED_currentEvent )
    2db8:	4b08      	ldr	r3, [pc, #32]	; (2ddc <LED_scan+0x24>)
    2dba:	681a      	ldr	r2, [r3, #0]


// LED State processing loop
unsigned int LED_currentEvent = 0;
inline uint8_t LED_scan()
{
    2dbc:	b510      	push	{r4, lr}
    2dbe:	461c      	mov	r4, r3
	// Check for current change event
	if ( LED_currentEvent )
    2dc0:	b152      	cbz	r2, 2dd8 <LED_scan+0x20>
	{
		// TODO dim LEDs in low power mode instead of shutting off
		if ( LED_currentEvent < 150 )
    2dc2:	2a95      	cmp	r2, #149	; 0x95
		{
			// Enable Software shutdown of ISSI chip
			LED_writeReg( 0x0A, 0x00, 0x0B );
    2dc4:	f04f 000a 	mov.w	r0, #10
    2dc8:	bf94      	ite	ls
    2dca:	2100      	movls	r1, #0
		}
		else
		{
			// Disable Software shutdown of ISSI chip
			LED_writeReg( 0x0A, 0x01, 0x0B );
    2dcc:	2101      	movhi	r1, #1
    2dce:	220b      	movs	r2, #11
    2dd0:	f7ff fe18 	bl	2a04 <LED_writeReg>
		}

		LED_currentEvent = 0;
    2dd4:	2300      	movs	r3, #0
    2dd6:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    2dd8:	2000      	movs	r0, #0
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	1fff9054 	.word	0x1fff9054

00002de0 <LED_currentChange>:
// Called by parent Scan Module whenver the available current has changed
// current - mA
void LED_currentChange( unsigned int current )
{
	// Delay action till next LED scan loop (as this callback sometimes occurs during interrupt requests)
	LED_currentEvent = current;
    2de0:	4b01      	ldr	r3, [pc, #4]	; (2de8 <LED_currentChange+0x8>)
    2de2:	6018      	str	r0, [r3, #0]
    2de4:	4770      	bx	lr
    2de6:	bf00      	nop
    2de8:	1fff9054 	.word	0x1fff9054

00002dec <LED_control>:
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2dec:	7803      	ldrb	r3, [r0, #0]
	uint8_t        amount;
	uint16_t       index;
} LedControl;

void LED_control( LedControl *control )
{
    2dee:	b510      	push	{r4, lr}
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2df0:	2b05      	cmp	r3, #5
    2df2:	d837      	bhi.n	2e64 <LED_control+0x78>
    2df4:	e8df f003 	tbb	[pc, r3]
    2df8:	17120a03 	.word	0x17120a03
    2dfc:	2e23      	.short	0x2e23
	{
	case LedControlMode_brightness_decrease:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] -= control->amount;
    2dfe:	4a1f      	ldr	r2, [pc, #124]	; (2e7c <LED_control+0x90>)
    2e00:	8843      	ldrh	r3, [r0, #2]
    2e02:	7841      	ldrb	r1, [r0, #1]
    2e04:	4413      	add	r3, r2
    2e06:	789a      	ldrb	r2, [r3, #2]
    2e08:	1a52      	subs	r2, r2, r1
    2e0a:	e005      	b.n	2e18 <LED_control+0x2c>
		break;

	case LedControlMode_brightness_increase:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] += control->amount;
    2e0c:	4a1b      	ldr	r2, [pc, #108]	; (2e7c <LED_control+0x90>)
    2e0e:	8843      	ldrh	r3, [r0, #2]
    2e10:	4413      	add	r3, r2
    2e12:	7842      	ldrb	r2, [r0, #1]
    2e14:	7899      	ldrb	r1, [r3, #2]
    2e16:	440a      	add	r2, r1
    2e18:	709a      	strb	r2, [r3, #2]
		break;
    2e1a:	e023      	b.n	2e64 <LED_control+0x78>

	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
    2e1c:	8843      	ldrh	r3, [r0, #2]
    2e1e:	4917      	ldr	r1, [pc, #92]	; (2e7c <LED_control+0x90>)
    2e20:	7842      	ldrb	r2, [r0, #1]
    2e22:	440b      	add	r3, r1
    2e24:	e7f8      	b.n	2e18 <LED_control+0x2c>
    2e26:	4b16      	ldr	r3, [pc, #88]	; (2e80 <LED_control+0x94>)
    2e28:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2e2c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    2e30:	7844      	ldrb	r4, [r0, #1]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e32:	428b      	cmp	r3, r1
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2e34:	eba2 0204 	sub.w	r2, r2, r4
    2e38:	701a      	strb	r2, [r3, #0]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e3a:	d1f7      	bne.n	2e2c <LED_control+0x40>
    2e3c:	e012      	b.n	2e64 <LED_control+0x78>
    2e3e:	4b10      	ldr	r3, [pc, #64]	; (2e80 <LED_control+0x94>)
    2e40:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e44:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    2e48:	7842      	ldrb	r2, [r0, #1]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e4a:	428b      	cmp	r3, r1
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e4c:	4422      	add	r2, r4
    2e4e:	701a      	strb	r2, [r3, #0]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e50:	d1f8      	bne.n	2e44 <LED_control+0x58>
    2e52:	e007      	b.n	2e64 <LED_control+0x78>
    2e54:	4b0a      	ldr	r3, [pc, #40]	; (2e80 <LED_control+0x94>)
    2e56:	f103 0290 	add.w	r2, r3, #144	; 0x90
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			LED_pageBuffer.buffer[ channel ] = control->amount;
    2e5a:	7841      	ldrb	r1, [r0, #1]
    2e5c:	f803 1f01 	strb.w	r1, [r3, #1]!
			LED_pageBuffer.buffer[ channel ] += control->amount;
		}
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e60:	4293      	cmp	r3, r2
    2e62:	d1fa      	bne.n	2e5a <LED_control+0x6e>
		break;
	}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
    2e64:	4805      	ldr	r0, [pc, #20]	; (2e7c <LED_control+0x90>)
    2e66:	23e8      	movs	r3, #232	; 0xe8
    2e68:	7003      	strb	r3, [r0, #0]
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
    2e6a:	2324      	movs	r3, #36	; 0x24
    2e6c:	7043      	strb	r3, [r0, #1]
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e6e:	2192      	movs	r1, #146	; 0x92
    2e70:	2200      	movs	r2, #0
}
    2e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e76:	f7ff bd93 	b.w	29a0 <LED_sendPage>
    2e7a:	bf00      	nop
    2e7c:	1fff9959 	.word	0x1fff9959
    2e80:	1fff995a 	.word	0x1fff995a

00002e84 <cliFunc_ledCtrl>:
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
}

void cliFunc_ledCtrl( char* args )
{
    2e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg2Ptr = args;
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e86:	a901      	add	r1, sp, #4
    2e88:	aa02      	add	r2, sp, #8

void cliFunc_ledCtrl( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2e8a:	9002      	str	r0, [sp, #8]
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e8c:	f002 ffd8 	bl	5e40 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2e90:	9801      	ldr	r0, [sp, #4]
    2e92:	7803      	ldrb	r3, [r0, #0]
    2e94:	b30b      	cbz	r3, 2eda <cliFunc_ledCtrl+0x56>
		return;
	control.mode = numToInt( arg1Ptr );
    2e96:	f003 fb99 	bl	65cc <numToInt>


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e9a:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.mode = numToInt( arg1Ptr );
    2e9c:	f88d 000c 	strb.w	r0, [sp, #12]


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ea0:	aa02      	add	r2, sp, #8
    2ea2:	9802      	ldr	r0, [sp, #8]
    2ea4:	f002 ffcc 	bl	5e40 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2ea8:	9801      	ldr	r0, [sp, #4]
    2eaa:	7803      	ldrb	r3, [r0, #0]
    2eac:	b1ab      	cbz	r3, 2eda <cliFunc_ledCtrl+0x56>
		return;
	control.amount = numToInt( arg1Ptr );
    2eae:	f003 fb8d 	bl	65cc <numToInt>


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2eb2:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.amount = numToInt( arg1Ptr );
    2eb4:	f88d 000d 	strb.w	r0, [sp, #13]


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2eb8:	aa02      	add	r2, sp, #8
    2eba:	9802      	ldr	r0, [sp, #8]
    2ebc:	f002 ffc0 	bl	5e40 <CLI_argumentIsolation>
	control.index = *arg1Ptr == '\0' ? 0 : numToInt( arg1Ptr );
    2ec0:	9801      	ldr	r0, [sp, #4]
    2ec2:	7803      	ldrb	r3, [r0, #0]
    2ec4:	b11b      	cbz	r3, 2ece <cliFunc_ledCtrl+0x4a>
    2ec6:	f003 fb81 	bl	65cc <numToInt>
    2eca:	b280      	uxth	r0, r0
    2ecc:	e000      	b.n	2ed0 <cliFunc_ledCtrl+0x4c>
    2ece:	4618      	mov	r0, r3
    2ed0:	f8ad 000e 	strh.w	r0, [sp, #14]

	// Process request
	LED_control( &control );
    2ed4:	a803      	add	r0, sp, #12
    2ed6:	f7ff ff89 	bl	2dec <LED_control>
}
    2eda:	b005      	add	sp, #20
    2edc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee0 <LED_control_capability>:

uint8_t LED_control_timer = 0;
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2ee0:	29ff      	cmp	r1, #255	; 0xff
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
}

uint8_t LED_control_timer = 0;
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    2ee2:	b510      	push	{r4, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2ee4:	d106      	bne.n	2ef4 <LED_control_capability+0x14>
    2ee6:	28ff      	cmp	r0, #255	; 0xff
    2ee8:	d107      	bne.n	2efa <LED_control_capability+0x1a>
	{
		print("LED_control_capability(mode,amount,index)");
    2eea:	480c      	ldr	r0, [pc, #48]	; (2f1c <LED_control_capability+0x3c>)
		return;
#endif

	// Modify led state of this node
	LED_control( control );
}
    2eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("LED_control_capability(mode,amount,index)");
    2ef0:	f003 ba6e 	b.w	63d0 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state == 0x03 ) // Not on release
    2ef4:	b909      	cbnz	r1, 2efa <LED_control_capability+0x1a>
    2ef6:	2803      	cmp	r0, #3
    2ef8:	d00f      	beq.n	2f1a <LED_control_capability+0x3a>
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2efa:	4b09      	ldr	r3, [pc, #36]	; (2f20 <LED_control_capability+0x40>)
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2efc:	4c09      	ldr	r4, [pc, #36]	; (2f24 <LED_control_capability+0x44>)
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2efe:	6819      	ldr	r1, [r3, #0]
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2f00:	7823      	ldrb	r3, [r4, #0]
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2f02:	b2c9      	uxtb	r1, r1
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2f04:	1acb      	subs	r3, r1, r3
	if ( compare < 30 )
    2f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2f0a:	2b1d      	cmp	r3, #29
    2f0c:	dd05      	ble.n	2f1a <LED_control_capability+0x3a>
	{
		return;
	}
	LED_control_timer = currentTime;
    2f0e:	7021      	strb	r1, [r4, #0]
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f10:	4610      	mov	r0, r2
}
    2f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f16:	f7ff bf69 	b.w	2dec <LED_control>
    2f1a:	bd10      	pop	{r4, pc}
    2f1c:	00006983 	.word	0x00006983
    2f20:	1fff9050 	.word	0x1fff9050
    2f24:	1fff9058 	.word	0x1fff9058

00002f28 <cliFunc_matrixInfo>:


// ----- CLI Command Functions -----

void cliFunc_matrixInfo( char* args )
{
    2f28:	b510      	push	{r4, lr}
	print( NL );
    2f2a:	4c10      	ldr	r4, [pc, #64]	; (2f6c <cliFunc_matrixInfo+0x44>)
    2f2c:	4620      	mov	r0, r4
    2f2e:	f003 fa4f 	bl	63d0 <_print>
	info_msg("Columns:  ");
    2f32:	480f      	ldr	r0, [pc, #60]	; (2f70 <cliFunc_matrixInfo+0x48>)
    2f34:	f003 fa4c 	bl	63d0 <_print>
	printHex( Matrix_colsNum );
    2f38:	2101      	movs	r1, #1
    2f3a:	2009      	movs	r0, #9
    2f3c:	f003 faea 	bl	6514 <printHex_op>

	print( NL );
    2f40:	4620      	mov	r0, r4
    2f42:	f003 fa45 	bl	63d0 <_print>
	info_msg("Rows:     ");
    2f46:	480b      	ldr	r0, [pc, #44]	; (2f74 <cliFunc_matrixInfo+0x4c>)
    2f48:	f003 fa42 	bl	63d0 <_print>
	printHex( Matrix_rowsNum );
    2f4c:	2101      	movs	r1, #1
    2f4e:	2008      	movs	r0, #8
    2f50:	f003 fae0 	bl	6514 <printHex_op>

	print( NL );
    2f54:	4620      	mov	r0, r4
    2f56:	f003 fa3b 	bl	63d0 <_print>
	info_msg("Max Keys: ");
    2f5a:	4807      	ldr	r0, [pc, #28]	; (2f78 <cliFunc_matrixInfo+0x50>)
    2f5c:	f003 fa38 	bl	63d0 <_print>
	printHex( Matrix_maxKeys );
    2f60:	2048      	movs	r0, #72	; 0x48
    2f62:	2101      	movs	r1, #1
}
    2f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	info_msg("Rows:     ");
	printHex( Matrix_rowsNum );

	print( NL );
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
    2f68:	f003 bad4 	b.w	6514 <printHex_op>
    2f6c:	000093eb 	.word	0x000093eb
    2f70:	00006c56 	.word	0x00006c56
    2f74:	00006c73 	.word	0x00006c73
    2f78:	00006c90 	.word	0x00006c90

00002f7c <cliFunc_matrixState>:
	info_msg("Matrix Debug Mode: ");
	printInt8( matrixDebugMode );
}

void cliFunc_matrixState( char* args )
{
    2f7c:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f7e:	4c07      	ldr	r4, [pc, #28]	; (2f9c <cliFunc_matrixState+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2f80:	4669      	mov	r1, sp
    2f82:	aa01      	add	r2, sp, #4
    2f84:	f002 ff5c 	bl	5e40 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f88:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    2f8a:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2f8c:	8023      	strh	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    2f8e:	7803      	ldrb	r3, [r0, #0]
    2f90:	b113      	cbz	r3, 2f98 <cliFunc_matrixState+0x1c>
	{
		matrixDebugStateCounter = (uint16_t)numToInt( arg1Ptr );
    2f92:	f003 fb1b 	bl	65cc <numToInt>
    2f96:	8020      	strh	r0, [r4, #0]
	}
}
    2f98:	b002      	add	sp, #8
    2f9a:	bd10      	pop	{r4, pc}
    2f9c:	1fff9062 	.word	0x1fff9062

00002fa0 <cliFunc_matrixDebug>:
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
}

void cliFunc_matrixDebug( char* args )
{
    2fa0:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2fa2:	4669      	mov	r1, sp
    2fa4:	aa01      	add	r2, sp, #4
    2fa6:	f002 ff4b 	bl	5e40 <CLI_argumentIsolation>

	// Set the matrix debug flag depending on the argument
	// If no argument, set to scan code only
	// If set to T, set to state transition
	switch ( arg1Ptr[0] )
    2faa:	9b00      	ldr	r3, [sp, #0]
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	2b54      	cmp	r3, #84	; 0x54
    2fb0:	d00a      	beq.n	2fc8 <cliFunc_matrixDebug+0x28>
    2fb2:	2b74      	cmp	r3, #116	; 0x74
    2fb4:	d008      	beq.n	2fc8 <cliFunc_matrixDebug+0x28>
    2fb6:	b9c3      	cbnz	r3, 2fea <cliFunc_matrixDebug+0x4a>
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
		break;

	// No argument
	case '\0':
		matrixDebugMode = matrixDebugMode != 1 ? 1 : 0;
    2fb8:	4a0d      	ldr	r2, [pc, #52]	; (2ff0 <cliFunc_matrixDebug+0x50>)
    2fba:	7813      	ldrb	r3, [r2, #0]
    2fbc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    2fc0:	bf18      	it	ne
    2fc2:	2301      	movne	r3, #1
    2fc4:	7013      	strb	r3, [r2, #0]
		break;
    2fc6:	e006      	b.n	2fd6 <cliFunc_matrixDebug+0x36>
	switch ( arg1Ptr[0] )
	{
	// T as argument
	case 'T':
	case 't':
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
    2fc8:	4b09      	ldr	r3, [pc, #36]	; (2ff0 <cliFunc_matrixDebug+0x50>)
    2fca:	781a      	ldrb	r2, [r3, #0]
    2fcc:	2a02      	cmp	r2, #2
    2fce:	bf14      	ite	ne
    2fd0:	2202      	movne	r2, #2
    2fd2:	2200      	moveq	r2, #0
    2fd4:	701a      	strb	r2, [r3, #0]
	// Invalid argument
	default:
		return;
	}

	print( NL );
    2fd6:	4807      	ldr	r0, [pc, #28]	; (2ff4 <cliFunc_matrixDebug+0x54>)
    2fd8:	f003 f9fa 	bl	63d0 <_print>
	info_msg("Matrix Debug Mode: ");
    2fdc:	4806      	ldr	r0, [pc, #24]	; (2ff8 <cliFunc_matrixDebug+0x58>)
    2fde:	f003 f9f7 	bl	63d0 <_print>
	printInt8( matrixDebugMode );
    2fe2:	4b03      	ldr	r3, [pc, #12]	; (2ff0 <cliFunc_matrixDebug+0x50>)
    2fe4:	7818      	ldrb	r0, [r3, #0]
    2fe6:	f003 fa22 	bl	642e <printInt8>
}
    2fea:	b003      	add	sp, #12
    2fec:	f85d fb04 	ldr.w	pc, [sp], #4
    2ff0:	1fff9060 	.word	0x1fff9060
    2ff4:	000093eb 	.word	0x000093eb
    2ff8:	00006cad 	.word	0x00006cad

00002ffc <Matrix_pin>:

// Pin action (Strobe, Sense, Strobe Setup, Sense Setup)
// NOTE: This function is highly dependent upon the organization of the register map
//       Only guaranteed to work with Freescale MK20 series uCs
uint8_t Matrix_pin( GPIO_Pin gpio, Type type )
{
    2ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2ffe:	b2c3      	uxtb	r3, r0
    3000:	f8ad 0004 	strh.w	r0, [sp, #4]
    3004:	f3c0 2007 	ubfx	r0, r0, #8, #8
	// Register width is defined as size of a pointer
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
    3008:	011a      	lsls	r2, r3, #4
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;
    300a:	eb00 2383 	add.w	r3, r0, r3, lsl #10
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    300e:	009b      	lsls	r3, r3, #2
    3010:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
    3014:	4c26      	ldr	r4, [pc, #152]	; (30b0 <Matrix_pin+0xb4>)
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    3016:	f503 2392 	add.w	r3, r3, #299008	; 0x49000

	// Operation depends on Type
	switch ( type )
    301a:	2904      	cmp	r1, #4
    301c:	d845      	bhi.n	30aa <Matrix_pin+0xae>
    301e:	e8df f001 	tbb	[pc, r1]
    3022:	0503      	.short	0x0503
    3024:	200e      	.short	0x200e
    3026:	2a          	.byte	0x2a
    3027:	00          	.byte	0x00

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
    3028:	4922      	ldr	r1, [pc, #136]	; (30b4 <Matrix_pin+0xb8>)
    302a:	e000      	b.n	302e <Matrix_pin+0x32>
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
    302c:	4922      	ldr	r1, [pc, #136]	; (30b8 <Matrix_pin+0xbc>)
	case Type_StrobeOff:
		#ifdef GHOSTING_MATRIX
		// Ghosting martix needs to put not used (off) strobes in high impedance state
		*GPIO_PDDR &= ~(1 << gpio.pin);  // input, high Z state
		#endif
		*GPIO_PCOR |= (1 << gpio.pin);
    302e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    3032:	2301      	movs	r3, #1
    3034:	4083      	lsls	r3, r0
    3036:	4323      	orrs	r3, r4
    3038:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    303c:	e035      	b.n	30aa <Matrix_pin+0xae>
		#ifdef GHOSTING_MATRIX
		*GPIO_PDDR &= ~(1 << gpio.pin);  // input, high Z state
		*GPIO_PCOR |= (1 << gpio.pin);
		#else
		// Set as output pin
		*GPIO_PDDR |= (1 << gpio.pin);
    303e:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    3042:	2101      	movs	r1, #1
    3044:	4081      	lsls	r1, r0
    3046:	4329      	orrs	r1, r5
    3048:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		#endif

		// Configure pin with slow slew, high drive strength and GPIO mux
		*PORT_PCR = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    304c:	f44f 72a2 	mov.w	r2, #324	; 0x144
    3050:	601a      	str	r2, [r3, #0]

		// Enabling open-drain if specified
		switch ( Matrix_type )
    3052:	4a1a      	ldr	r2, [pc, #104]	; (30bc <Matrix_pin+0xc0>)
    3054:	7812      	ldrb	r2, [r2, #0]
    3056:	2a02      	cmp	r2, #2
    3058:	d127      	bne.n	30aa <Matrix_pin+0xae>
		{
		case Config_Opendrain:
			*PORT_PCR |= PORT_PCR_ODE;
    305a:	681a      	ldr	r2, [r3, #0]
    305c:	f042 0220 	orr.w	r2, r2, #32
    3060:	e022      	b.n	30a8 <Matrix_pin+0xac>
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
    3062:	4b17      	ldr	r3, [pc, #92]	; (30c0 <Matrix_pin+0xc4>)

	case Type_Sense:
		#ifdef GHOSTING_MATRIX  // inverted
		return *GPIO_PDIR & (1 << gpio.pin) ? 0 : 1;
		#else
		return *GPIO_PDIR & (1 << gpio.pin) ? 1 : 0;
    3064:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3068:	2301      	movs	r3, #1
    306a:	4083      	lsls	r3, r0
    306c:	421a      	tst	r2, r3
    306e:	bf14      	ite	ne
    3070:	2001      	movne	r0, #1
    3072:	2000      	moveq	r0, #0
    3074:	e01a      	b.n	30ac <Matrix_pin+0xb0>
		#endif

	case Type_SenseSetup:
		// Set as input pin
		*GPIO_PDDR &= ~(1 << gpio.pin);
    3076:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    307a:	2101      	movs	r1, #1
    307c:	4081      	lsls	r1, r0
    307e:	ea25 0101 	bic.w	r1, r5, r1
    3082:	f844 1022 	str.w	r1, [r4, r2, lsl #2]

		// Configure pin with passive filter and GPIO mux
		*PORT_PCR = PORT_PCR_PFE | PORT_PCR_MUX(1);
    3086:	f44f 7288 	mov.w	r2, #272	; 0x110
    308a:	601a      	str	r2, [r3, #0]

		// Pull resistor config
		switch ( Matrix_type )
    308c:	4a0b      	ldr	r2, [pc, #44]	; (30bc <Matrix_pin+0xc0>)
    308e:	7810      	ldrb	r0, [r2, #0]
    3090:	b128      	cbz	r0, 309e <Matrix_pin+0xa2>
    3092:	2801      	cmp	r0, #1
    3094:	d109      	bne.n	30aa <Matrix_pin+0xae>
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
			break;

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    3096:	681a      	ldr	r2, [r3, #0]
    3098:	f042 0202 	orr.w	r2, r2, #2
    309c:	e004      	b.n	30a8 <Matrix_pin+0xac>

		// Pull resistor config
		switch ( Matrix_type )
		{
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
    309e:	681a      	ldr	r2, [r3, #0]
    30a0:	f042 0203 	orr.w	r2, r2, #3
    30a4:	601a      	str	r2, [r3, #0]
			break;
    30a6:	e001      	b.n	30ac <Matrix_pin+0xb0>

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    30a8:	601a      	str	r2, [r3, #0]
			break;
		}
		break;
	}

	return 0;
    30aa:	2000      	movs	r0, #0
}
    30ac:	b003      	add	sp, #12
    30ae:	bd30      	pop	{r4, r5, pc}
    30b0:	400ff014 	.word	0x400ff014
    30b4:	400ff004 	.word	0x400ff004
    30b8:	400ff008 	.word	0x400ff008
    30bc:	1fff8a0a 	.word	0x1fff8a0a
    30c0:	400ff010 	.word	0x400ff010

000030c4 <Matrix_setup>:

// Setup GPIO pins for matrix scanning
void Matrix_setup()
{
    30c4:	b538      	push	{r3, r4, r5, lr}
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );
    30c6:	481e      	ldr	r0, [pc, #120]	; (3140 <Matrix_setup+0x7c>)
    30c8:	491e      	ldr	r1, [pc, #120]	; (3144 <Matrix_setup+0x80>)
    30ca:	f002 ff2d 	bl	5f28 <CLI_registerDictionary>
    30ce:	2400      	movs	r4, #0

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
    30d0:	4b1d      	ldr	r3, [pc, #116]	; (3148 <Matrix_setup+0x84>)
    30d2:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    30d6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    30da:	2102      	movs	r1, #2
    30dc:	7858      	ldrb	r0, [r3, #1]
    30de:	3401      	adds	r4, #1
    30e0:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    30e4:	f7ff ff8a 	bl	2ffc <Matrix_pin>
{
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
    30e8:	2c09      	cmp	r4, #9
    30ea:	d1f1      	bne.n	30d0 <Matrix_setup+0xc>
    30ec:	2400      	movs	r4, #0
	}

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
	{
		Matrix_pin( Matrix_rows[ pin ], Type_SenseSetup );
    30ee:	4b17      	ldr	r3, [pc, #92]	; (314c <Matrix_setup+0x88>)
    30f0:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    30f4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    30f8:	2104      	movs	r1, #4
    30fa:	7858      	ldrb	r0, [r3, #1]
    30fc:	3401      	adds	r4, #1
    30fe:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    3102:	f7ff ff7b 	bl	2ffc <Matrix_pin>
		col_ghost_old[pin] = 0;
		#endif
	}

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
    3106:	2c08      	cmp	r4, #8
    3108:	d1f1      	bne.n	30ee <Matrix_setup+0x2a>
    310a:	4a11      	ldr	r2, [pc, #68]	; (3150 <Matrix_setup+0x8c>)
    310c:	2100      	movs	r1, #0
    310e:	4615      	mov	r5, r2
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3110:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    3114:	2300      	movs	r3, #0
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3116:	1928      	adds	r0, r5, r4
    3118:	3101      	adds	r1, #1
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    311a:	7113      	strb	r3, [r2, #4]
		Matrix_scanArray[ item ].curState         = KeyState_Off;
    311c:	7153      	strb	r3, [r2, #5]
		row_ghost_old[pin] = 0;
		#endif
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    311e:	2948      	cmp	r1, #72	; 0x48
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3120:	552b      	strb	r3, [r5, r4]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3122:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3126:	7043      	strb	r3, [r0, #1]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3128:	7084      	strb	r4, [r0, #2]
    312a:	70c4      	strb	r4, [r0, #3]
    312c:	f102 0207 	add.w	r2, r2, #7
		Matrix_scanArray[ item ].prevDecisionTime = 0;
    3130:	f802 3c01 	strb.w	r3, [r2, #-1]
		row_ghost_old[pin] = 0;
		#endif
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    3134:	d1ec      	bne.n	3110 <Matrix_setup+0x4c>
		Matrix_ghostArray[ item ].saved           = KeyState_Off;
		#endif
	}

	// Clear scan stats counters
	matrixMaxScans  = 0;
    3136:	4a07      	ldr	r2, [pc, #28]	; (3154 <Matrix_setup+0x90>)
    3138:	8013      	strh	r3, [r2, #0]
	matrixPrevScans = 0;
    313a:	4a07      	ldr	r2, [pc, #28]	; (3158 <Matrix_setup+0x94>)
    313c:	8013      	strh	r3, [r2, #0]
    313e:	bd38      	pop	{r3, r4, r5, pc}
    3140:	00006f00 	.word	0x00006f00
    3144:	00006ee6 	.word	0x00006ee6
    3148:	1fff89e8 	.word	0x1fff89e8
    314c:	1fff89fa 	.word	0x1fff89fa
    3150:	1fff9b17 	.word	0x1fff9b17
    3154:	1fff905e 	.word	0x1fff905e
    3158:	1fff905c 	.word	0x1fff905c

0000315c <Matrix_keyPositionDebug>:
}

void Matrix_keyPositionDebug( KeyPosition pos )
{
	// Depending on the state, use a different flag + color
	switch ( pos )
    315c:	2803      	cmp	r0, #3
    315e:	d80b      	bhi.n	3178 <Matrix_keyPositionDebug+0x1c>
    3160:	e8df f000 	tbb	[pc, r0]
    3164:	08060402 	.word	0x08060402
	{
	case KeyState_Off:
		print("\033[1mO\033[0m");
    3168:	4805      	ldr	r0, [pc, #20]	; (3180 <Matrix_keyPositionDebug+0x24>)
    316a:	e006      	b.n	317a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Press:
		print("\033[1;33mP\033[0m");
    316c:	4805      	ldr	r0, [pc, #20]	; (3184 <Matrix_keyPositionDebug+0x28>)
    316e:	e004      	b.n	317a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Hold:
		print("\033[1;32mH\033[0m");
    3170:	4805      	ldr	r0, [pc, #20]	; (3188 <Matrix_keyPositionDebug+0x2c>)
    3172:	e002      	b.n	317a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Release:
		print("\033[1;35mR\033[0m");
    3174:	4805      	ldr	r0, [pc, #20]	; (318c <Matrix_keyPositionDebug+0x30>)
    3176:	e000      	b.n	317a <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Invalid:
	default:
		print("\033[1;31mI\033[0m");
    3178:	4805      	ldr	r0, [pc, #20]	; (3190 <Matrix_keyPositionDebug+0x34>)
    317a:	f003 b929 	b.w	63d0 <_print>
    317e:	bf00      	nop
    3180:	00006cd3 	.word	0x00006cd3
    3184:	00006cdd 	.word	0x00006cdd
    3188:	00006cea 	.word	0x00006cea
    318c:	00006cf7 	.word	0x00006cf7
    3190:	00006d04 	.word	0x00006d04

00003194 <Matrix_scan>:


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    3194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( !( Matrix_divCounter++ & (1 << ( DebounceThrottleDiv_define - 1 )) ) )
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
    3198:	4b9d      	ldr	r3, [pc, #628]	; (3410 <Matrix_scan+0x27c>)
    319a:	9301      	str	r3, [sp, #4]
    319c:	881a      	ldrh	r2, [r3, #0]
    319e:	4282      	cmp	r2, r0
    31a0:	bf38      	it	cc
    31a2:	8018      	strhcc	r0, [r3, #0]


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    31a4:	4607      	mov	r7, r0
    31a6:	4b9b      	ldr	r3, [pc, #620]	; (3414 <Matrix_scan+0x280>)
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
	if ( scanNum == 0 )
    31a8:	b920      	cbnz	r0, 31b4 <Matrix_scan+0x20>
	{
		matrixPrevScans = matrixCurScans;
    31aa:	4a9b      	ldr	r2, [pc, #620]	; (3418 <Matrix_scan+0x284>)
    31ac:	8819      	ldrh	r1, [r3, #0]
    31ae:	8011      	strh	r1, [r2, #0]
		matrixCurScans = 0;
    31b0:	8018      	strh	r0, [r3, #0]
    31b2:	e002      	b.n	31ba <Matrix_scan+0x26>
	}
	else
	{
		matrixCurScans++;
    31b4:	881a      	ldrh	r2, [r3, #0]
    31b6:	3201      	adds	r2, #1
    31b8:	801a      	strh	r2, [r3, #0]
	}

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;
    31ba:	4b98      	ldr	r3, [pc, #608]	; (341c <Matrix_scan+0x288>)
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	2600      	movs	r6, #0
    31c0:	fa5f fb83 	uxtb.w	fp, r3
		uint32_t start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );
    31c4:	f8df a26c 	ldr.w	sl, [pc, #620]	; 3434 <Matrix_scan+0x2a0>
    31c8:	0072      	lsls	r2, r6, #1
    31ca:	9200      	str	r2, [sp, #0]
    31cc:	4452      	add	r2, sl
    31ce:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    31d2:	7850      	ldrb	r0, [r2, #1]
    31d4:	2100      	movs	r1, #0
    31d6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    31da:	f7ff ff0f 	bl	2ffc <Matrix_pin>
    31de:	b2f4      	uxtb	r4, r6
    31e0:	f04f 0800 	mov.w	r8, #0
    31e4:	4d8e      	ldr	r5, [pc, #568]	; (3420 <Matrix_scan+0x28c>)
    31e6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
			// Key position
			uint8_t key = Matrix_colsNum * sense + strobe;
			KeyState *state = &Matrix_scanArray[ key ];

			// If first scan, reset state
			if ( scanNum == 0 )
    31ea:	b937      	cbnz	r7, 31fa <Matrix_scan+0x66>
			{
				// Set previous state, and reset current state
				state->prevState = state->curState;
    31ec:	ebc4 0209 	rsb	r2, r4, r9
    31f0:	442a      	add	r2, r5
    31f2:	7951      	ldrb	r1, [r2, #5]
    31f4:	7111      	strb	r1, [r2, #4]
				state->curState  = KeyState_Invalid;
    31f6:	2104      	movs	r1, #4
    31f8:	7151      	strb	r1, [r2, #5]
			// This means there is a maximum of scan 13 cycles on a perfect off to on transition
			//  (coming from a steady state 0xFFFF off scans)
			// Somewhat longer with switch bounciness
			// The advantage of this is that the count is ongoing and never needs to be reset
			// State still needs to be kept track of to deal with what to send to the Macro module
			if ( Matrix_pin( Matrix_rows[ sense ], Type_Sense ) )
    31fa:	4a8a      	ldr	r2, [pc, #552]	; (3424 <Matrix_scan+0x290>)
    31fc:	f812 1018 	ldrb.w	r1, [r2, r8, lsl #1]
    3200:	eb02 0248 	add.w	r2, r2, r8, lsl #1
    3204:	7850      	ldrb	r0, [r2, #1]
    3206:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    320a:	2103      	movs	r1, #3
    320c:	f7ff fef6 	bl	2ffc <Matrix_pin>
    3210:	b178      	cbz	r0, 3232 <Matrix_scan+0x9e>
			{
				// Only update if not going to wrap around
				if ( state->activeCount < DebounceDivThreshold_define ) state->activeCount += 1;
    3212:	ebc4 0109 	rsb	r1, r4, r9
    3216:	f64f 70ff 	movw	r0, #65535	; 0xffff
    321a:	5a6a      	ldrh	r2, [r5, r1]
    321c:	4282      	cmp	r2, r0
    321e:	bf1c      	itt	ne
    3220:	3201      	addne	r2, #1
    3222:	526a      	strhne	r2, [r5, r1]
				state->inactiveCount >>= 1;
    3224:	ebc4 0209 	rsb	r2, r4, r9
    3228:	442a      	add	r2, r5
    322a:	8851      	ldrh	r1, [r2, #2]
    322c:	0849      	lsrs	r1, r1, #1
    322e:	8051      	strh	r1, [r2, #2]
    3230:	e00e      	b.n	3250 <Matrix_scan+0xbc>
			}
			// Signal Not Detected
			else
			{
				// Only update if not going to wrap around
				if ( state->inactiveCount < DebounceDivThreshold_define ) state->inactiveCount += 1;
    3232:	ebc4 0209 	rsb	r2, r4, r9
    3236:	442a      	add	r2, r5
    3238:	f64f 70ff 	movw	r0, #65535	; 0xffff
    323c:	8851      	ldrh	r1, [r2, #2]
    323e:	4281      	cmp	r1, r0
    3240:	bf1c      	itt	ne
    3242:	3101      	addne	r1, #1
    3244:	8051      	strhne	r1, [r2, #2]
				state->activeCount >>= 1;
    3246:	ebc4 0109 	rsb	r1, r4, r9
    324a:	5a6a      	ldrh	r2, [r5, r1]
    324c:	0852      	lsrs	r2, r2, #1
    324e:	526a      	strh	r2, [r5, r1]
			// Check for state change if it hasn't been set
			// But only if enough time has passed since last state change
			// Only check if the minimum number of scans has been met
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
    3250:	ebc4 0209 	rsb	r2, r4, r9
    3254:	442a      	add	r2, r5
    3256:	7951      	ldrb	r1, [r2, #5]
    3258:	2904      	cmp	r1, #4
    325a:	d157      	bne.n	330c <Matrix_scan+0x178>
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    325c:	7991      	ldrb	r1, [r2, #6]

				// Attempt state transition
				switch ( state->prevState )
    325e:	7910      	ldrb	r0, [r2, #4]
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    3260:	ebc1 010b 	rsb	r1, r1, fp
    3264:	b2c9      	uxtb	r1, r1

				// Attempt state transition
				switch ( state->prevState )
    3266:	2803      	cmp	r0, #3
    3268:	d824      	bhi.n	32b4 <Matrix_scan+0x120>
    326a:	e8df f000 	tbb	[pc, r0]
    326e:	0211      	.short	0x0211
    3270:	1102      	.short	0x1102
				{
				case KeyState_Press:
				case KeyState_Hold:
					if ( state->activeCount > state->inactiveCount )
    3272:	ebc4 0209 	rsb	r2, r4, r9
    3276:	442a      	add	r2, r5
    3278:	f8b2 c000 	ldrh.w	ip, [r2]
    327c:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    3280:	45f4      	cmp	ip, lr
    3282:	d901      	bls.n	3288 <Matrix_scan+0xf4>
					{
						state->curState = KeyState_Hold;
    3284:	2102      	movs	r1, #2
    3286:	e011      	b.n	32ac <Matrix_scan+0x118>
					}
					else
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    3288:	2904      	cmp	r1, #4
    328a:	d90c      	bls.n	32a6 <Matrix_scan+0x112>
							//warn_print("FAST Release stopped");
							state->curState = state->prevState;
							continue;
						}

						state->curState = KeyState_Release;
    328c:	2103      	movs	r1, #3
    328e:	e00d      	b.n	32ac <Matrix_scan+0x118>
					}
					break;

				case KeyState_Release:
				case KeyState_Off:
					if ( state->activeCount > state->inactiveCount )
    3290:	ebc4 0209 	rsb	r2, r4, r9
    3294:	442a      	add	r2, r5
    3296:	f8b2 c000 	ldrh.w	ip, [r2]
    329a:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    329e:	45f4      	cmp	ip, lr
    32a0:	d906      	bls.n	32b0 <Matrix_scan+0x11c>
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    32a2:	2904      	cmp	r1, #4
    32a4:	d801      	bhi.n	32aa <Matrix_scan+0x116>
						{
							//warn_print("FAST Press stopped");
							state->curState = state->prevState;
    32a6:	7150      	strb	r0, [r2, #5]
							continue;
    32a8:	e030      	b.n	330c <Matrix_scan+0x178>
						}

						state->curState = KeyState_Press;
    32aa:	2101      	movs	r1, #1
    32ac:	7151      	strb	r1, [r2, #5]
    32ae:	e004      	b.n	32ba <Matrix_scan+0x126>
					}
					else
					{
						state->curState = KeyState_Off;
    32b0:	2100      	movs	r1, #0
    32b2:	e7fb      	b.n	32ac <Matrix_scan+0x118>
					}
					break;

				case KeyState_Invalid:
				default:
					erro_print("Matrix scan bug!! Report me!");
    32b4:	485c      	ldr	r0, [pc, #368]	; (3428 <Matrix_scan+0x294>)
    32b6:	f003 f88b 	bl	63d0 <_print>
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    32ba:	ebc4 0309 	rsb	r3, r4, r9
    32be:	eb05 0903 	add.w	r9, r5, r3

				// Send keystate to macro module
				#ifndef GHOSTING_MATRIX
				Macro_keyState( key, state->curState );
    32c2:	4620      	mov	r0, r4
					erro_print("Matrix scan bug!! Report me!");
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    32c4:	f889 b006 	strb.w	fp, [r9, #6]

				// Send keystate to macro module
				#ifndef GHOSTING_MATRIX
				Macro_keyState( key, state->curState );
    32c8:	f899 1005 	ldrb.w	r1, [r9, #5]
    32cc:	f000 fca4 	bl	3c18 <Macro_keyState>
				#endif

				// Matrix Debug, only if there is a state change
				if ( matrixDebugMode && state->curState != state->prevState )
    32d0:	4a56      	ldr	r2, [pc, #344]	; (342c <Matrix_scan+0x298>)
    32d2:	7812      	ldrb	r2, [r2, #0]
    32d4:	b1d2      	cbz	r2, 330c <Matrix_scan+0x178>
    32d6:	f899 1005 	ldrb.w	r1, [r9, #5]
    32da:	f899 0004 	ldrb.w	r0, [r9, #4]
    32de:	4288      	cmp	r0, r1
    32e0:	d014      	beq.n	330c <Matrix_scan+0x178>
				{
					// Basic debug output
					if ( matrixDebugMode == 1 && state->curState == KeyState_Press )
    32e2:	2a01      	cmp	r2, #1
    32e4:	d105      	bne.n	32f2 <Matrix_scan+0x15e>
    32e6:	2901      	cmp	r1, #1
    32e8:	d110      	bne.n	330c <Matrix_scan+0x178>
					{
						printHex( key );
    32ea:	4620      	mov	r0, r4
    32ec:	f003 f912 	bl	6514 <printHex_op>
    32f0:	e009      	b.n	3306 <Matrix_scan+0x172>
						print(" ");
					}
					// State transition debug output
					else if ( matrixDebugMode == 2 )
    32f2:	2a02      	cmp	r2, #2
    32f4:	d10a      	bne.n	330c <Matrix_scan+0x178>
					{
						printHex( key );
    32f6:	4620      	mov	r0, r4
    32f8:	2101      	movs	r1, #1
    32fa:	f003 f90b 	bl	6514 <printHex_op>
						Matrix_keyPositionDebug( state->curState );
    32fe:	f899 0005 	ldrb.w	r0, [r9, #5]
    3302:	f7ff ff2b 	bl	315c <Matrix_keyPositionDebug>
						print(" ");
    3306:	484a      	ldr	r0, [pc, #296]	; (3430 <Matrix_scan+0x29c>)
    3308:	f003 f862 	bl	63d0 <_print>
    330c:	f108 0801 	add.w	r8, r8, #1
    3310:	3409      	adds	r4, #9
		start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Scan each of the sense pins
		for ( uint8_t sense = 0; sense < Matrix_rowsNum; sense++ )
    3312:	f1b8 0f08 	cmp.w	r8, #8
    3316:	b2e4      	uxtb	r4, r4
    3318:	f47f af64 	bne.w	31e4 <Matrix_scan+0x50>
				}
			}
		}

		// Unstrobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOff );
    331c:	9a00      	ldr	r2, [sp, #0]
    331e:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    3322:	4691      	mov	r9, r2
    3324:	4a43      	ldr	r2, [pc, #268]	; (3434 <Matrix_scan+0x2a0>)
    3326:	4491      	add	r9, r2
    3328:	2101      	movs	r1, #1
    332a:	f899 0001 	ldrb.w	r0, [r9, #1]
    332e:	3601      	adds	r6, #1
    3330:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3334:	f7ff fe62 	bl	2ffc <Matrix_pin>

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;

	// For each strobe, scan each of the sense pins
	for ( uint8_t strobe = 0; strobe < Matrix_colsNum; strobe++ )
    3338:	2e09      	cmp	r6, #9
    333a:	f47f af43 	bne.w	31c4 <Matrix_scan+0x30>
#endif
	// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .


	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
    333e:	4a3e      	ldr	r2, [pc, #248]	; (3438 <Matrix_scan+0x2a4>)
    3340:	8813      	ldrh	r3, [r2, #0]
    3342:	2b00      	cmp	r3, #0
    3344:	d060      	beq.n	3408 <Matrix_scan+0x274>
	{
		// Decrement counter
		matrixDebugStateCounter--;
    3346:	3b01      	subs	r3, #1

		// Output stats on number of scans being done per USB send
		print( NL );
    3348:	483c      	ldr	r0, [pc, #240]	; (343c <Matrix_scan+0x2a8>)

	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
	{
		// Decrement counter
		matrixDebugStateCounter--;
    334a:	8013      	strh	r3, [r2, #0]

		// Output stats on number of scans being done per USB send
		print( NL );
    334c:	f003 f840 	bl	63d0 <_print>
		info_msg("Max scans:      ");
    3350:	483b      	ldr	r0, [pc, #236]	; (3440 <Matrix_scan+0x2ac>)
    3352:	4e33      	ldr	r6, [pc, #204]	; (3420 <Matrix_scan+0x28c>)
    3354:	f003 f83c 	bl	63d0 <_print>
		printHex( matrixMaxScans );
    3358:	9b01      	ldr	r3, [sp, #4]
    335a:	2101      	movs	r1, #1
    335c:	8818      	ldrh	r0, [r3, #0]
    335e:	f003 f8d9 	bl	6514 <printHex_op>
		print( NL );
    3362:	4836      	ldr	r0, [pc, #216]	; (343c <Matrix_scan+0x2a8>)
    3364:	f003 f834 	bl	63d0 <_print>
		info_msg("Previous scans: ");
    3368:	4836      	ldr	r0, [pc, #216]	; (3444 <Matrix_scan+0x2b0>)
    336a:	f003 f831 	bl	63d0 <_print>
		printHex( matrixPrevScans );
    336e:	4b2a      	ldr	r3, [pc, #168]	; (3418 <Matrix_scan+0x284>)
    3370:	2101      	movs	r1, #1
    3372:	8818      	ldrh	r0, [r3, #0]
    3374:	f003 f8ce 	bl	6514 <printHex_op>
		print( NL );
    3378:	4830      	ldr	r0, [pc, #192]	; (343c <Matrix_scan+0x2a8>)
    337a:	f003 f829 	bl	63d0 <_print>

		// Output current scan number
		info_msg("Scan Number:    ");
    337e:	4832      	ldr	r0, [pc, #200]	; (3448 <Matrix_scan+0x2b4>)
    3380:	f003 f826 	bl	63d0 <_print>
		printHex( scanNum );
    3384:	2101      	movs	r1, #1
    3386:	4638      	mov	r0, r7
    3388:	f003 f8c4 	bl	6514 <printHex_op>
		print( NL );
    338c:	482b      	ldr	r0, [pc, #172]	; (343c <Matrix_scan+0x2a8>)
    338e:	f003 f81f 	bl	63d0 <_print>

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
    3392:	482e      	ldr	r0, [pc, #184]	; (344c <Matrix_scan+0x2b8>)
    3394:	f003 f81c 	bl	63d0 <_print>
    3398:	2400      	movs	r4, #0
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
		{
			// Every 4 keys, put a newline
			if ( key % 4 == 0 )
    339a:	07a3      	lsls	r3, r4, #30
    339c:	d102      	bne.n	33a4 <Matrix_scan+0x210>
				print( NL );
    339e:	4827      	ldr	r0, [pc, #156]	; (343c <Matrix_scan+0x2a8>)
    33a0:	f003 f816 	bl	63d0 <_print>

			print("\033[1m0x");
    33a4:	482a      	ldr	r0, [pc, #168]	; (3450 <Matrix_scan+0x2bc>)
    33a6:	f003 f813 	bl	63d0 <_print>
			printHex_op( key, 2 );
    33aa:	2102      	movs	r1, #2
    33ac:	b2a0      	uxth	r0, r4
    33ae:	f003 f8b1 	bl	6514 <printHex_op>
			print("\033[0m");
    33b2:	4828      	ldr	r0, [pc, #160]	; (3454 <Matrix_scan+0x2c0>)
    33b4:	f003 f80c 	bl	63d0 <_print>
			print(":");
    33b8:	4827      	ldr	r0, [pc, #156]	; (3458 <Matrix_scan+0x2c4>)
    33ba:	f003 f809 	bl	63d0 <_print>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33be:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3

			print("\033[1m0x");
			printHex_op( key, 2 );
			print("\033[0m");
			print(":");
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
    33c2:	7930      	ldrb	r0, [r6, #4]
    33c4:	f7ff feca 	bl	315c <Matrix_keyPositionDebug>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33c8:	442f      	add	r7, r5
			print("\033[1m0x");
			printHex_op( key, 2 );
			print("\033[0m");
			print(":");
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
    33ca:	7970      	ldrb	r0, [r6, #5]
    33cc:	f7ff fec6 	bl	315c <Matrix_keyPositionDebug>
			print(" 0x");
    33d0:	4822      	ldr	r0, [pc, #136]	; (345c <Matrix_scan+0x2c8>)
    33d2:	f002 fffd 	bl	63d0 <_print>
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    33d6:	2104      	movs	r1, #4
    33d8:	8838      	ldrh	r0, [r7, #0]
    33da:	f003 f89b 	bl	6514 <printHex_op>
			print(" 0x");
    33de:	481f      	ldr	r0, [pc, #124]	; (345c <Matrix_scan+0x2c8>)
    33e0:	f002 fff6 	bl	63d0 <_print>
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
    33e4:	8878      	ldrh	r0, [r7, #2]
    33e6:	2104      	movs	r1, #4
    33e8:	f003 f894 	bl	6514 <printHex_op>
    33ec:	3401      	adds	r4, #1
			print(" ");
    33ee:	4810      	ldr	r0, [pc, #64]	; (3430 <Matrix_scan+0x29c>)
    33f0:	f002 ffee 	bl	63d0 <_print>
		printHex( scanNum );
		print( NL );

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
    33f4:	2c48      	cmp	r4, #72	; 0x48
    33f6:	f106 0607 	add.w	r6, r6, #7
    33fa:	d1ce      	bne.n	339a <Matrix_scan+0x206>
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    33fc:	480f      	ldr	r0, [pc, #60]	; (343c <Matrix_scan+0x2a8>)
	}
}
    33fe:	b003      	add	sp, #12
    3400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    3404:	f002 bfe4 	b.w	63d0 <_print>
	}
}
    3408:	b003      	add	sp, #12
    340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    340e:	bf00      	nop
    3410:	1fff905e 	.word	0x1fff905e
    3414:	1fff905a 	.word	0x1fff905a
    3418:	1fff905c 	.word	0x1fff905c
    341c:	1fff9050 	.word	0x1fff9050
    3420:	1fff9b17 	.word	0x1fff9b17
    3424:	1fff89fa 	.word	0x1fff89fa
    3428:	00006d11 	.word	0x00006d11
    342c:	1fff9060 	.word	0x1fff9060
    3430:	00006d66 	.word	0x00006d66
    3434:	1fff89e8 	.word	0x1fff89e8
    3438:	1fff9062 	.word	0x1fff9062
    343c:	000093eb 	.word	0x000093eb
    3440:	00006d45 	.word	0x00006d45
    3444:	00006d68 	.word	0x00006d68
    3448:	00006d8b 	.word	0x00006d8b
    344c:	00006dae 	.word	0x00006dae
    3450:	00006df4 	.word	0x00006df4
    3454:	000081f8 	.word	0x000081f8
    3458:	00006dfb 	.word	0x00006dfb
    345c:	00006dfd 	.word	0x00006dfd

00003460 <Matrix_currentChange>:


// Called by parent scan module whenever the available current changes
// current - mA
void Matrix_currentChange( unsigned int current )
{
    3460:	4770      	bx	lr
    3462:	0000      	movs	r0, r0

00003464 <Scan_setup>:

// ----- Functions -----

// Setup
inline void Scan_setup()
{
    3464:	b508      	push	{r3, lr}
	// Setup GPIO pins for matrix scanning
	Matrix_setup();
    3466:	f7ff fe2d 	bl	30c4 <Matrix_setup>

	// Setup ISSI chip to control the leds
	LED_setup();
    346a:	f7ff faf1 	bl	2a50 <LED_setup>

	// Reset scan count
	Scan_scanCount = 0;
    346e:	4b02      	ldr	r3, [pc, #8]	; (3478 <Scan_setup+0x14>)
    3470:	2200      	movs	r2, #0
    3472:	801a      	strh	r2, [r3, #0]
    3474:	bd08      	pop	{r3, pc}
    3476:	bf00      	nop
    3478:	1fff9064 	.word	0x1fff9064

0000347c <Scan_loop>:
}


// Main Detection Loop
inline uint8_t Scan_loop()
{
    347c:	b508      	push	{r3, lr}
	// Scan Matrix
	Matrix_scan( Scan_scanCount++ );
    347e:	4b05      	ldr	r3, [pc, #20]	; (3494 <Scan_loop+0x18>)
    3480:	8818      	ldrh	r0, [r3, #0]
    3482:	1c42      	adds	r2, r0, #1
    3484:	801a      	strh	r2, [r3, #0]
    3486:	f7ff fe85 	bl	3194 <Matrix_scan>

	// Process any LED events
	LED_scan();
    348a:	f7ff fc95 	bl	2db8 <LED_scan>

	return 0;
}
    348e:	2000      	movs	r0, #0
    3490:	bd08      	pop	{r3, pc}
    3492:	bf00      	nop
    3494:	1fff9064 	.word	0x1fff9064

00003498 <Scan_finishedWithMacro>:


// Signal from Macro Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithMacro( uint8_t sentKeys )
{
    3498:	4770      	bx	lr
    349a:	0000      	movs	r0, r0

0000349c <Scan_finishedWithOutput>:
// Signal from Output Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithOutput( uint8_t sentKeys )
{
	// Reset scan loop indicator (resets each key debounce state)
	// TODO should this occur after USB send or Macro processing?
	Scan_scanCount = 0;
    349c:	4b01      	ldr	r3, [pc, #4]	; (34a4 <Scan_finishedWithOutput+0x8>)
    349e:	2200      	movs	r2, #0
    34a0:	801a      	strh	r2, [r3, #0]
    34a2:	4770      	bx	lr
    34a4:	1fff9064 	.word	0x1fff9064

000034a8 <Scan_currentChange>:


// Signal from the Output Module that the available current has changed
// current - mA
void Scan_currentChange( unsigned int current )
{
    34a8:	b510      	push	{r4, lr}
    34aa:	4604      	mov	r4, r0
	// Indicate to all submodules current change
	Matrix_currentChange( current );
    34ac:	f7ff ffd8 	bl	3460 <Matrix_currentChange>
	LED_currentChange( current );
    34b0:	4620      	mov	r0, r4
}
    34b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// current - mA
void Scan_currentChange( unsigned int current )
{
	// Indicate to all submodules current change
	Matrix_currentChange( current );
	LED_currentChange( current );
    34b6:	f7ff bc93 	b.w	2de0 <LED_currentChange>
    34ba:	0000      	movs	r0, r0

000034bc <cliFunc_capList>:


// ----- CLI Command Functions -----

void cliFunc_capList( char* args )
{
    34bc:	b510      	push	{r4, lr}
	print( NL );
    34be:	4810      	ldr	r0, [pc, #64]	; (3500 <cliFunc_capList+0x44>)
    34c0:	f002 ff86 	bl	63d0 <_print>
	info_msg("Capabilities List ");
    34c4:	480f      	ldr	r0, [pc, #60]	; (3504 <cliFunc_capList+0x48>)
    34c6:	f002 ff83 	bl	63d0 <_print>
	printHex( CapabilitiesNum );
    34ca:	200f      	movs	r0, #15
    34cc:	2101      	movs	r1, #1
    34ce:	f003 f821 	bl	6514 <printHex_op>
    34d2:	2400      	movs	r4, #0

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
	{
		print( NL "\t" );
    34d4:	480c      	ldr	r0, [pc, #48]	; (3508 <cliFunc_capList+0x4c>)
    34d6:	f002 ff7b 	bl	63d0 <_print>
		printHex( cap );
    34da:	b2a0      	uxth	r0, r4
    34dc:	2101      	movs	r1, #1
    34de:	f003 f819 	bl	6514 <printHex_op>
		print(" - ");
    34e2:	480a      	ldr	r0, [pc, #40]	; (350c <cliFunc_capList+0x50>)
    34e4:	f002 ff74 	bl	63d0 <_print>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
    34e8:	4b09      	ldr	r3, [pc, #36]	; (3510 <cliFunc_capList+0x54>)
		capability( 0xFF, 0xFF, 0 );
    34ea:	20ff      	movs	r0, #255	; 0xff
    34ec:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    34f0:	4601      	mov	r1, r0
    34f2:	2200      	movs	r2, #0
    34f4:	3401      	adds	r4, #1
    34f6:	4798      	blx	r3
	print( NL );
	info_msg("Capabilities List ");
	printHex( CapabilitiesNum );

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
    34f8:	2c0f      	cmp	r4, #15
    34fa:	d1eb      	bne.n	34d4 <cliFunc_capList+0x18>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
		capability( 0xFF, 0xFF, 0 );
	}
}
    34fc:	bd10      	pop	{r4, pc}
    34fe:	bf00      	nop
    3500:	000093eb 	.word	0x000093eb
    3504:	0000805d 	.word	0x0000805d
    3508:	00008082 	.word	0x00008082
    350c:	00009182 	.word	0x00009182
    3510:	0000756c 	.word	0x0000756c

00003514 <cliFunc_macroStep>:
		}
	}
}

void cliFunc_macroStep( char* args )
{
    3514:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    3516:	4669      	mov	r1, sp
    3518:	aa01      	add	r2, sp, #4
    351a:	f002 fc91 	bl	5e40 <CLI_argumentIsolation>

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );
    351e:	9800      	ldr	r0, [sp, #0]
    3520:	f003 f854 	bl	65cc <numToInt>
    3524:	b2c0      	uxtb	r0, r0

	if ( count == 0 )
    3526:	2800      	cmp	r0, #0
		count = 1;

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    3528:	4b03      	ldr	r3, [pc, #12]	; (3538 <cliFunc_macroStep+0x24>)

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );

	if ( count == 0 )
		count = 1;
    352a:	bf08      	it	eq
    352c:	2001      	moveq	r0, #1

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    352e:	8018      	strh	r0, [r3, #0]
}
    3530:	b003      	add	sp, #12
    3532:	f85d fb04 	ldr.w	pc, [sp], #4
    3536:	bf00      	nop
    3538:	1fff9066 	.word	0x1fff9066

0000353c <cliFunc_capSelect>:
		capability( 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    353c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3540:	2700      	movs	r7, #0
		capability( 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    3542:	4604      	mov	r4, r0
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3544:	9001      	str	r0, [sp, #4]
	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;

	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
    3546:	46b9      	mov	r9, r7
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;
    3548:	46b8      	mov	r8, r7
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
    354a:	2602      	movs	r6, #2

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    354c:	9801      	ldr	r0, [sp, #4]
    354e:	4669      	mov	r1, sp
    3550:	aa01      	add	r2, sp, #4
    3552:	f002 fc75 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		// Extra arguments are ignored
		if ( *arg1Ptr == '\0' )
    3556:	9800      	ldr	r0, [sp, #0]
    3558:	7803      	ldrb	r3, [r0, #0]
    355a:	2b00      	cmp	r3, #0
    355c:	d05c      	beq.n	3618 <cliFunc_capSelect+0xdc>
			break;

		// For the first argument, choose the capability
		if ( c == 0 ) switch ( arg1Ptr[0] )
    355e:	f017 0fff 	tst.w	r7, #255	; 0xff
    3562:	d10e      	bne.n	3582 <cliFunc_capSelect+0x46>
    3564:	2b4b      	cmp	r3, #75	; 0x4b
    3566:	d10c      	bne.n	3582 <cliFunc_capSelect+0x46>
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    3568:	3001      	adds	r0, #1
    356a:	f003 f82f 	bl	65cc <numToInt>

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    356e:	4b2c      	ldr	r3, [pc, #176]	; (3620 <cliFunc_capSelect+0xe4>)
		if ( c == 0 ) switch ( arg1Ptr[0] )
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    3570:	fa5f f880 	uxtb.w	r8, r0

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    3574:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
			continue;
    3578:	464d      	mov	r5, r9
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    357a:	791b      	ldrb	r3, [r3, #4]
    357c:	441e      	add	r6, r3
    357e:	b2f6      	uxtb	r6, r6
			continue;
    3580:	e044      	b.n	360c <cliFunc_capSelect+0xd0>
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    3582:	f003 f823 	bl	65cc <numToInt>
    3586:	f109 0501 	add.w	r5, r9, #1
    358a:	b2ed      	uxtb	r5, r5

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    358c:	42b5      	cmp	r5, r6
			continue;
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    358e:	f804 0009 	strb.w	r0, [r4, r9]

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    3592:	d13b      	bne.n	360c <cliFunc_capSelect+0xd0>
		{
			// Indicate that the capability was called
			print( NL );
    3594:	4823      	ldr	r0, [pc, #140]	; (3624 <cliFunc_capSelect+0xe8>)
    3596:	f002 ff1b 	bl	63d0 <_print>
			info_msg("K");
    359a:	4823      	ldr	r0, [pc, #140]	; (3628 <cliFunc_capSelect+0xec>)
    359c:	f002 ff18 	bl	63d0 <_print>
			printInt8( cap );
    35a0:	4640      	mov	r0, r8
    35a2:	f002 ff44 	bl	642e <printInt8>
			print(" - ");
    35a6:	4821      	ldr	r0, [pc, #132]	; (362c <cliFunc_capSelect+0xf0>)
    35a8:	f002 ff12 	bl	63d0 <_print>
			printHex( argSet[0] );
    35ac:	2101      	movs	r1, #1
    35ae:	7820      	ldrb	r0, [r4, #0]
    35b0:	f002 ffb0 	bl	6514 <printHex_op>
			print(" - ");
    35b4:	481d      	ldr	r0, [pc, #116]	; (362c <cliFunc_capSelect+0xf0>)
    35b6:	f002 ff0b 	bl	63d0 <_print>
			printHex( argSet[1] );
    35ba:	2101      	movs	r1, #1
    35bc:	7860      	ldrb	r0, [r4, #1]
    35be:	f002 ffa9 	bl	6514 <printHex_op>
			print(" - ");
    35c2:	481a      	ldr	r0, [pc, #104]	; (362c <cliFunc_capSelect+0xf0>)
    35c4:	f002 ff04 	bl	63d0 <_print>
			printHex( argSet[2] );
    35c8:	78a0      	ldrb	r0, [r4, #2]
    35ca:	2101      	movs	r1, #1
    35cc:	f002 ffa2 	bl	6514 <printHex_op>
			print( "..." NL );
    35d0:	4817      	ldr	r0, [pc, #92]	; (3630 <cliFunc_capSelect+0xf4>)
    35d2:	f002 fefd 	bl	63d0 <_print>

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
    35d6:	2300      	movs	r3, #0
			{
				if ( CapabilitiesList[ cap ].func == (const void*)Output_flashMode_capability )
    35d8:	4a11      	ldr	r2, [pc, #68]	; (3620 <cliFunc_capSelect+0xe4>)
    35da:	4916      	ldr	r1, [pc, #88]	; (3634 <cliFunc_capSelect+0xf8>)
    35dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    35e0:	4288      	cmp	r0, r1
    35e2:	d109      	bne.n	35f8 <cliFunc_capSelect+0xbc>
				{
					print( NL );
    35e4:	480f      	ldr	r0, [pc, #60]	; (3624 <cliFunc_capSelect+0xe8>)
    35e6:	f002 fef3 	bl	63d0 <_print>
					warn_print("flashModeEnabled not set, cancelling firmware reload...");
    35ea:	4813      	ldr	r0, [pc, #76]	; (3638 <cliFunc_capSelect+0xfc>)
    35ec:	f002 fef0 	bl	63d0 <_print>
					info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    35f0:	4812      	ldr	r0, [pc, #72]	; (363c <cliFunc_capSelect+0x100>)
    35f2:	f002 feed 	bl	63d0 <_print>
    35f6:	e00f      	b.n	3618 <cliFunc_capSelect+0xdc>
			printHex( argSet[2] );
			print( "..." NL );

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
    35f8:	3301      	adds	r3, #1
    35fa:	2b0f      	cmp	r3, #15
    35fc:	d1ec      	bne.n	35d8 <cliFunc_capSelect+0x9c>
					return;
				}
			}

			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( argSet[0], argSet[1], &argSet[2] );
    35fe:	f852 3038 	ldr.w	r3, [r2, r8, lsl #3]
    3602:	7820      	ldrb	r0, [r4, #0]
    3604:	7861      	ldrb	r1, [r4, #1]
    3606:	1ca2      	adds	r2, r4, #2
    3608:	4798      	blx	r3
    360a:	462e      	mov	r6, r5
	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
	uint8_t *argSet = (uint8_t*)args;

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
    360c:	42b5      	cmp	r5, r6
    360e:	f107 0701 	add.w	r7, r7, #1
    3612:	d201      	bcs.n	3618 <cliFunc_capSelect+0xdc>
    3614:	46a9      	mov	r9, r5
    3616:	e799      	b.n	354c <cliFunc_capSelect+0x10>

			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( argSet[0], argSet[1], &argSet[2] );
		}
	}
}
    3618:	b003      	add	sp, #12
    361a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    361e:	bf00      	nop
    3620:	0000756c 	.word	0x0000756c
    3624:	000093eb 	.word	0x000093eb
    3628:	00008086 	.word	0x00008086
    362c:	00009182 	.word	0x00009182
    3630:	000080e3 	.word	0x000080e3
    3634:	00004739 	.word	0x00004739
    3638:	0000809a 	.word	0x0000809a
    363c:	000080e9 	.word	0x000080e9

00003640 <cliFunc_layerDebug>:
		}
	}
}

void cliFunc_layerDebug( char *args )
{
    3640:	b510      	push	{r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    3642:	4c08      	ldr	r4, [pc, #32]	; (3664 <cliFunc_layerDebug+0x24>)

	print( NL );
    3644:	4808      	ldr	r0, [pc, #32]	; (3668 <cliFunc_layerDebug+0x28>)
}

void cliFunc_layerDebug( char *args )
{
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    3646:	7823      	ldrb	r3, [r4, #0]
    3648:	fab3 f383 	clz	r3, r3
    364c:	095b      	lsrs	r3, r3, #5
    364e:	7023      	strb	r3, [r4, #0]

	print( NL );
    3650:	f002 febe 	bl	63d0 <_print>
	info_msg("Layer Debug Mode: ");
    3654:	4805      	ldr	r0, [pc, #20]	; (366c <cliFunc_layerDebug+0x2c>)
    3656:	f002 febb 	bl	63d0 <_print>
	printInt8( layerDebugMode );
    365a:	7820      	ldrb	r0, [r4, #0]
}
    365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;

	print( NL );
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
    3660:	f002 bee5 	b.w	642e <printInt8>
    3664:	1fff9074 	.word	0x1fff9074
    3668:	000093eb 	.word	0x000093eb
    366c:	00008130 	.word	0x00008130

00003670 <cliFunc_layerState>:
		printHex( LayerIndex[ layer ].last );
	}
}

void cliFunc_layerState( char* args )
{
    3670:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t arg1 = 0;
	uint8_t arg2 = 0;

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
    3672:	2400      	movs	r4, #0
void cliFunc_layerState( char* args )
{
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3674:	9001      	str	r0, [sp, #4]

	uint8_t arg1 = 0;
    3676:	4625      	mov	r5, r4

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3678:	9801      	ldr	r0, [sp, #4]
    367a:	4669      	mov	r1, sp
    367c:	aa01      	add	r2, sp, #4
    367e:	f002 fbdf 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3682:	9800      	ldr	r0, [sp, #0]
    3684:	7803      	ldrb	r3, [r0, #0]
    3686:	b1eb      	cbz	r3, 36c4 <cliFunc_layerState+0x54>
			break;

		switch ( c )
    3688:	b93c      	cbnz	r4, 369a <cliFunc_layerState+0x2a>
		{
		// First argument (e.g. L1)
		case 0:
			if ( arg1Ptr[0] != 'L' )
    368a:	2b4c      	cmp	r3, #76	; 0x4c
    368c:	d11a      	bne.n	36c4 <cliFunc_layerState+0x54>
				return;

			arg1 = (uint8_t)numToInt( &arg1Ptr[1] );
    368e:	3001      	adds	r0, #1
    3690:	f002 ff9c 	bl	65cc <numToInt>
    3694:	2401      	movs	r4, #1
    3696:	b2c5      	uxtb	r5, r0
    3698:	e7ee      	b.n	3678 <cliFunc_layerState+0x8>
			break;
		// Second argument (e.g. 4)
		case 1:
			arg2 = (uint8_t)numToInt( arg1Ptr );
    369a:	f002 ff97 	bl	65cc <numToInt>
    369e:	b2c6      	uxtb	r6, r0

			// Display operation (to indicate that it worked)
			print( NL );
    36a0:	4809      	ldr	r0, [pc, #36]	; (36c8 <cliFunc_layerState+0x58>)
    36a2:	f002 fe95 	bl	63d0 <_print>
			info_msg("Setting Layer L");
    36a6:	4809      	ldr	r0, [pc, #36]	; (36cc <cliFunc_layerState+0x5c>)
    36a8:	f002 fe92 	bl	63d0 <_print>
			printInt8( arg1 );
    36ac:	4628      	mov	r0, r5
    36ae:	f002 febe 	bl	642e <printInt8>
			print(" to - ");
    36b2:	4807      	ldr	r0, [pc, #28]	; (36d0 <cliFunc_layerState+0x60>)
    36b4:	f002 fe8c 	bl	63d0 <_print>
			printHex( arg2 );
    36b8:	4630      	mov	r0, r6
    36ba:	4621      	mov	r1, r4
    36bc:	f002 ff2a 	bl	6514 <printHex_op>

			// Set the layer state
			LayerState[ arg1 ] = arg2;
    36c0:	4b04      	ldr	r3, [pc, #16]	; (36d4 <cliFunc_layerState+0x64>)
    36c2:	555e      	strb	r6, [r3, r5]
			break;
		}
	}
}
    36c4:	b002      	add	sp, #8
    36c6:	bd70      	pop	{r4, r5, r6, pc}
    36c8:	000093eb 	.word	0x000093eb
    36cc:	00008155 	.word	0x00008155
    36d0:	00008177 	.word	0x00008177
    36d4:	1fff9f04 	.word	0x1fff9f04

000036d8 <cliFunc_macroDebug>:

void cliFunc_macroDebug( char* args )
{
    36d8:	b510      	push	{r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    36da:	4c08      	ldr	r4, [pc, #32]	; (36fc <cliFunc_macroDebug+0x24>)

	print( NL );
    36dc:	4808      	ldr	r0, [pc, #32]	; (3700 <cliFunc_macroDebug+0x28>)
}

void cliFunc_macroDebug( char* args )
{
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    36de:	7823      	ldrb	r3, [r4, #0]
    36e0:	fab3 f383 	clz	r3, r3
    36e4:	095b      	lsrs	r3, r3, #5
    36e6:	7023      	strb	r3, [r4, #0]

	print( NL );
    36e8:	f002 fe72 	bl	63d0 <_print>
	info_msg("Macro Debug Mode: ");
    36ec:	4805      	ldr	r0, [pc, #20]	; (3704 <cliFunc_macroDebug+0x2c>)
    36ee:	f002 fe6f 	bl	63d0 <_print>
	printInt8( macroDebugMode );
    36f2:	7820      	ldrb	r0, [r4, #0]
}
    36f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;

	print( NL );
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
    36f8:	f002 be99 	b.w	642e <printInt8>
    36fc:	1fff9075 	.word	0x1fff9075
    3700:	000093eb 	.word	0x000093eb
    3704:	0000817e 	.word	0x0000817e

00003708 <cliFunc_macroProc>:
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}

void cliFunc_macroProc( char* args )
{
    3708:	b510      	push	{r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    370a:	4c08      	ldr	r4, [pc, #32]	; (372c <cliFunc_macroProc+0x24>)

	print( NL );
    370c:	4808      	ldr	r0, [pc, #32]	; (3730 <cliFunc_macroProc+0x28>)
}

void cliFunc_macroProc( char* args )
{
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    370e:	7823      	ldrb	r3, [r4, #0]
    3710:	fab3 f383 	clz	r3, r3
    3714:	095b      	lsrs	r3, r3, #5
    3716:	7023      	strb	r3, [r4, #0]

	print( NL );
    3718:	f002 fe5a 	bl	63d0 <_print>
	info_msg("Macro Processing Mode: ");
    371c:	4805      	ldr	r0, [pc, #20]	; (3734 <cliFunc_macroProc+0x2c>)
    371e:	f002 fe57 	bl	63d0 <_print>
	printInt8( macroPauseMode );
    3722:	7820      	ldrb	r0, [r4, #0]
}
    3724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;

	print( NL );
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
    3728:	f002 be81 	b.w	642e <printInt8>
    372c:	1fff9076 	.word	0x1fff9076
    3730:	000093eb 	.word	0x000093eb
    3734:	000081a3 	.word	0x000081a3

00003738 <cliFunc_layerList>:
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
    3738:	b538      	push	{r3, r4, r5, lr}
	print( NL );
    373a:	481a      	ldr	r0, [pc, #104]	; (37a4 <cliFunc_layerList+0x6c>)
    373c:	4d1a      	ldr	r5, [pc, #104]	; (37a8 <cliFunc_layerList+0x70>)
    373e:	f002 fe47 	bl	63d0 <_print>
	info_msg("Layer List");
    3742:	481a      	ldr	r0, [pc, #104]	; (37ac <cliFunc_layerList+0x74>)
    3744:	f002 fe44 	bl	63d0 <_print>
    3748:	2400      	movs	r4, #0

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    374a:	4819      	ldr	r0, [pc, #100]	; (37b0 <cliFunc_layerList+0x78>)
    374c:	f002 fe40 	bl	63d0 <_print>
		printHex( layer );
    3750:	b2a0      	uxth	r0, r4
    3752:	2101      	movs	r1, #1
    3754:	f002 fede 	bl	6514 <printHex_op>
		print(" - ");
    3758:	4816      	ldr	r0, [pc, #88]	; (37b4 <cliFunc_layerList+0x7c>)
    375a:	f002 fe39 	bl	63d0 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    375e:	6868      	ldr	r0, [r5, #4]
    3760:	f001 f9ce 	bl	4b00 <Output_putstr>

		// Default map
		if ( layer == 0 )
    3764:	b914      	cbnz	r4, 376c <cliFunc_layerList+0x34>
			print(" \033[1m(default)\033[0m");
    3766:	4814      	ldr	r0, [pc, #80]	; (37b8 <cliFunc_layerList+0x80>)
    3768:	f002 fe32 	bl	63d0 <_print>

		// Layer State
		print( NL "\t\t Layer State: " );
    376c:	4813      	ldr	r0, [pc, #76]	; (37bc <cliFunc_layerList+0x84>)
    376e:	f002 fe2f 	bl	63d0 <_print>
		printHex( LayerState[ layer ] );
    3772:	4b13      	ldr	r3, [pc, #76]	; (37c0 <cliFunc_layerList+0x88>)
    3774:	2101      	movs	r1, #1
    3776:	5d18      	ldrb	r0, [r3, r4]
    3778:	f002 fecc 	bl	6514 <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    377c:	4811      	ldr	r0, [pc, #68]	; (37c4 <cliFunc_layerList+0x8c>)
    377e:	f002 fe27 	bl	63d0 <_print>
		printHex( LayerIndex[ layer ].first );
    3782:	7a28      	ldrb	r0, [r5, #8]
    3784:	2101      	movs	r1, #1
    3786:	f002 fec5 	bl	6514 <printHex_op>
		print(" -> ");
    378a:	480f      	ldr	r0, [pc, #60]	; (37c8 <cliFunc_layerList+0x90>)
    378c:	f002 fe20 	bl	63d0 <_print>
    3790:	3401      	adds	r4, #1
		printHex( LayerIndex[ layer ].last );
    3792:	7a68      	ldrb	r0, [r5, #9]
    3794:	2101      	movs	r1, #1
    3796:	f002 febd 	bl	6514 <printHex_op>
{
	print( NL );
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
    379a:	2c03      	cmp	r4, #3
    379c:	f105 050c 	add.w	r5, r5, #12
    37a0:	d1d3      	bne.n	374a <cliFunc_layerList+0x12>
		print(" First -> Last Indices: ");
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
		printHex( LayerIndex[ layer ].last );
	}
}
    37a2:	bd38      	pop	{r3, r4, r5, pc}
    37a4:	000093eb 	.word	0x000093eb
    37a8:	00007c90 	.word	0x00007c90
    37ac:	000081cd 	.word	0x000081cd
    37b0:	00008082 	.word	0x00008082
    37b4:	00009182 	.word	0x00009182
    37b8:	000081ea 	.word	0x000081ea
    37bc:	000081fd 	.word	0x000081fd
    37c0:	1fff9f04 	.word	0x1fff9f04
    37c4:	00008210 	.word	0x00008210
    37c8:	00008229 	.word	0x00008229

000037cc <cliFunc_macroList>:
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
}

void cliFunc_macroList( char* args )
{
    37cc:	b538      	push	{r3, r4, r5, lr}
	// Show pending key events
	print( NL );
    37ce:	4845      	ldr	r0, [pc, #276]	; (38e4 <cliFunc_macroList+0x118>)
	info_msg("Pending Key Events: ");
	printInt16( (uint16_t)macroTriggerListBufferSize );
    37d0:	4c45      	ldr	r4, [pc, #276]	; (38e8 <cliFunc_macroList+0x11c>)
}

void cliFunc_macroList( char* args )
{
	// Show pending key events
	print( NL );
    37d2:	f002 fdfd 	bl	63d0 <_print>
	info_msg("Pending Key Events: ");
    37d6:	4845      	ldr	r0, [pc, #276]	; (38ec <cliFunc_macroList+0x120>)
    37d8:	f002 fdfa 	bl	63d0 <_print>
	printInt16( (uint16_t)macroTriggerListBufferSize );
    37dc:	7820      	ldrb	r0, [r4, #0]
    37de:	f002 fe44 	bl	646a <printInt16>
	print(" : ");
    37e2:	4843      	ldr	r0, [pc, #268]	; (38f0 <cliFunc_macroList+0x124>)
    37e4:	f002 fdf4 	bl	63d0 <_print>
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    37e8:	2300      	movs	r3, #0
    37ea:	7822      	ldrb	r2, [r4, #0]
    37ec:	1c5d      	adds	r5, r3, #1
    37ee:	b2db      	uxtb	r3, r3
    37f0:	429a      	cmp	r2, r3
    37f2:	d90c      	bls.n	380e <cliFunc_macroList+0x42>
	{
		printHex( macroTriggerListBuffer[ key ].scanCode );
    37f4:	4a3f      	ldr	r2, [pc, #252]	; (38f4 <cliFunc_macroList+0x128>)
    37f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    37fa:	4413      	add	r3, r2
    37fc:	2101      	movs	r1, #1
    37fe:	7898      	ldrb	r0, [r3, #2]
    3800:	f002 fe88 	bl	6514 <printHex_op>
		print(" ");
    3804:	483c      	ldr	r0, [pc, #240]	; (38f8 <cliFunc_macroList+0x12c>)
    3806:	f002 fde3 	bl	63d0 <_print>
    380a:	462b      	mov	r3, r5
    380c:	e7ed      	b.n	37ea <cliFunc_macroList+0x1e>
	}

	// Show pending trigger macros
	print( NL );
    380e:	4835      	ldr	r0, [pc, #212]	; (38e4 <cliFunc_macroList+0x118>)
	info_msg("Pending Trigger Macros: ");
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    3810:	4c3a      	ldr	r4, [pc, #232]	; (38fc <cliFunc_macroList+0x130>)
		printHex( macroTriggerListBuffer[ key ].scanCode );
		print(" ");
	}

	// Show pending trigger macros
	print( NL );
    3812:	f002 fddd 	bl	63d0 <_print>
	info_msg("Pending Trigger Macros: ");
    3816:	483a      	ldr	r0, [pc, #232]	; (3900 <cliFunc_macroList+0x134>)
    3818:	f002 fdda 	bl	63d0 <_print>
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    381c:	8820      	ldrh	r0, [r4, #0]
    381e:	f002 fe24 	bl	646a <printInt16>
	print(" : ");
    3822:	4833      	ldr	r0, [pc, #204]	; (38f0 <cliFunc_macroList+0x124>)
    3824:	f002 fdd4 	bl	63d0 <_print>
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    3828:	2300      	movs	r3, #0
    382a:	8822      	ldrh	r2, [r4, #0]
    382c:	1c5d      	adds	r5, r3, #1
    382e:	b2db      	uxtb	r3, r3
    3830:	4293      	cmp	r3, r2
    3832:	d20a      	bcs.n	384a <cliFunc_macroList+0x7e>
	{
		printHex( macroTriggerMacroPendingList[ macro ] );
    3834:	4a33      	ldr	r2, [pc, #204]	; (3904 <cliFunc_macroList+0x138>)
    3836:	2101      	movs	r1, #1
    3838:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    383c:	f002 fe6a 	bl	6514 <printHex_op>
		print(" ");
    3840:	482d      	ldr	r0, [pc, #180]	; (38f8 <cliFunc_macroList+0x12c>)
    3842:	f002 fdc5 	bl	63d0 <_print>
    3846:	462b      	mov	r3, r5
    3848:	e7ef      	b.n	382a <cliFunc_macroList+0x5e>
	}

	// Show pending result macros
	print( NL );
    384a:	4826      	ldr	r0, [pc, #152]	; (38e4 <cliFunc_macroList+0x118>)
	info_msg("Pending Result Macros: ");
	printInt16( (uint16_t)macroResultMacroPendingListSize );
    384c:	4c2e      	ldr	r4, [pc, #184]	; (3908 <cliFunc_macroList+0x13c>)
		printHex( macroTriggerMacroPendingList[ macro ] );
		print(" ");
	}

	// Show pending result macros
	print( NL );
    384e:	f002 fdbf 	bl	63d0 <_print>
	info_msg("Pending Result Macros: ");
    3852:	482e      	ldr	r0, [pc, #184]	; (390c <cliFunc_macroList+0x140>)
    3854:	f002 fdbc 	bl	63d0 <_print>
	printInt16( (uint16_t)macroResultMacroPendingListSize );
    3858:	8820      	ldrh	r0, [r4, #0]
    385a:	f002 fe06 	bl	646a <printInt16>
	print(" : ");
    385e:	4824      	ldr	r0, [pc, #144]	; (38f0 <cliFunc_macroList+0x124>)
    3860:	f002 fdb6 	bl	63d0 <_print>
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    3864:	2300      	movs	r3, #0
    3866:	8822      	ldrh	r2, [r4, #0]
    3868:	1c5d      	adds	r5, r3, #1
    386a:	b2db      	uxtb	r3, r3
    386c:	4293      	cmp	r3, r2
    386e:	d20a      	bcs.n	3886 <cliFunc_macroList+0xba>
	{
		printHex( macroResultMacroPendingList[ macro ] );
    3870:	4a27      	ldr	r2, [pc, #156]	; (3910 <cliFunc_macroList+0x144>)
    3872:	2101      	movs	r1, #1
    3874:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    3878:	f002 fe4c 	bl	6514 <printHex_op>
		print(" ");
    387c:	481e      	ldr	r0, [pc, #120]	; (38f8 <cliFunc_macroList+0x12c>)
    387e:	f002 fda7 	bl	63d0 <_print>
    3882:	462b      	mov	r3, r5
    3884:	e7ef      	b.n	3866 <cliFunc_macroList+0x9a>
	}

	// Show available trigger macro indices
	print( NL );
    3886:	4817      	ldr	r0, [pc, #92]	; (38e4 <cliFunc_macroList+0x118>)
    3888:	f002 fda2 	bl	63d0 <_print>
	info_msg("Trigger Macros Range: T0 -> T");
    388c:	4821      	ldr	r0, [pc, #132]	; (3914 <cliFunc_macroList+0x148>)
    388e:	f002 fd9f 	bl	63d0 <_print>
	printInt16( (uint16_t)TriggerMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    3892:	2063      	movs	r0, #99	; 0x63
    3894:	f002 fde9 	bl	646a <printInt16>

	// Show available result macro indices
	print( NL );
    3898:	4812      	ldr	r0, [pc, #72]	; (38e4 <cliFunc_macroList+0x118>)
    389a:	f002 fd99 	bl	63d0 <_print>
	info_msg("Result  Macros Range: R0 -> R");
    389e:	481e      	ldr	r0, [pc, #120]	; (3918 <cliFunc_macroList+0x14c>)
    38a0:	f002 fd96 	bl	63d0 <_print>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    38a4:	205f      	movs	r0, #95	; 0x5f
    38a6:	f002 fde0 	bl	646a <printInt16>

	// Show Trigger to Result Macro Links
	print( NL );
    38aa:	480e      	ldr	r0, [pc, #56]	; (38e4 <cliFunc_macroList+0x118>)
    38ac:	f002 fd90 	bl	63d0 <_print>
	info_msg("Trigger : Result Macro Pairs");
    38b0:	481a      	ldr	r0, [pc, #104]	; (391c <cliFunc_macroList+0x150>)
    38b2:	f002 fd8d 	bl	63d0 <_print>
    38b6:	2400      	movs	r4, #0
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		print( NL );
    38b8:	480a      	ldr	r0, [pc, #40]	; (38e4 <cliFunc_macroList+0x118>)
    38ba:	f002 fd89 	bl	63d0 <_print>
		print("\tT");
    38be:	4818      	ldr	r0, [pc, #96]	; (3920 <cliFunc_macroList+0x154>)
    38c0:	f002 fd86 	bl	63d0 <_print>
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
    38c4:	b2a0      	uxth	r0, r4
    38c6:	f002 fdd0 	bl	646a <printInt16>
		print(" : R");
    38ca:	4816      	ldr	r0, [pc, #88]	; (3924 <cliFunc_macroList+0x158>)
    38cc:	f002 fd80 	bl	63d0 <_print>
    38d0:	4b15      	ldr	r3, [pc, #84]	; (3928 <cliFunc_macroList+0x15c>)
    38d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    38d6:	3401      	adds	r4, #1
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
    38d8:	7918      	ldrb	r0, [r3, #4]
    38da:	f002 fdc6 	bl	646a <printInt16>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)

	// Show Trigger to Result Macro Links
	print( NL );
	info_msg("Trigger : Result Macro Pairs");
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    38de:	2c64      	cmp	r4, #100	; 0x64
    38e0:	d1ea      	bne.n	38b8 <cliFunc_macroList+0xec>
		print("\tT");
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
		print(" : R");
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}
    38e2:	bd38      	pop	{r3, r4, r5, pc}
    38e4:	000093eb 	.word	0x000093eb
    38e8:	1fff906a 	.word	0x1fff906a
    38ec:	0000822e 	.word	0x0000822e
    38f0:	00008255 	.word	0x00008255
    38f4:	1fff9d12 	.word	0x1fff9d12
    38f8:	00006d66 	.word	0x00006d66
    38fc:	1fff913a 	.word	0x1fff913a
    3900:	00008259 	.word	0x00008259
    3904:	1fff913c 	.word	0x1fff913c
    3908:	1fff9078 	.word	0x1fff9078
    390c:	00008284 	.word	0x00008284
    3910:	1fff907a 	.word	0x1fff907a
    3914:	000082ae 	.word	0x000082ae
    3918:	000082de 	.word	0x000082de
    391c:	0000830e 	.word	0x0000830e
    3920:	0000833d 	.word	0x0000833d
    3924:	00008340 	.word	0x00008340
    3928:	00007748 	.word	0x00007748

0000392c <Macro_layerState>:

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    392c:	1e51      	subs	r1, r2, #1
    392e:	2901      	cmp	r1, #1

// ----- Capabilities -----

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
    3930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    3932:	d852      	bhi.n	39da <Macro_layerState+0xae>
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
	uint16_t stackItem = 0;
	while ( stackItem < macroLayerIndexStackSize )
    3934:	4c29      	ldr	r4, [pc, #164]	; (39dc <Macro_layerState+0xb0>)
    3936:	8827      	ldrh	r7, [r4, #0]
    3938:	2000      	movs	r0, #0
    393a:	b281      	uxth	r1, r0
    393c:	42b9      	cmp	r1, r7
    393e:	d209      	bcs.n	3954 <Macro_layerState+0x28>
    3940:	4d27      	ldr	r5, [pc, #156]	; (39e0 <Macro_layerState+0xb4>)
    3942:	3001      	adds	r0, #1
    3944:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	{
		// Flag if layer is already in the LayerIndexStack
		if ( macroLayerIndexStack[ stackItem ] == layer )
    3948:	f835 5c02 	ldrh.w	r5, [r5, #-2]
    394c:	4295      	cmp	r5, r2
    394e:	d1f4      	bne.n	393a <Macro_layerState+0xe>
		{
			inLayerIndexStack = 1;
    3950:	2601      	movs	r6, #1
    3952:	e000      	b.n	3956 <Macro_layerState+0x2a>
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
    3954:	2600      	movs	r6, #0
		// Increment to next item
		stackItem++;
	}

	// Toggle Layer State Byte
	if ( LayerState[ layer ] & layerState )
    3956:	4d23      	ldr	r5, [pc, #140]	; (39e4 <Macro_layerState+0xb8>)
    3958:	5ca8      	ldrb	r0, [r5, r2]
    395a:	4218      	tst	r0, r3
	{
		// Unset
		LayerState[ layer ] &= ~layerState;
    395c:	bf14      	ite	ne
    395e:	ea20 0303 	bicne.w	r3, r0, r3
	}
	else
	{
		// Set
		LayerState[ layer ] |= layerState;
    3962:	4303      	orreq	r3, r0
    3964:	54ab      	strb	r3, [r5, r2]
	}

	// If the layer was not in the LayerIndexStack add it
	if ( !inLayerIndexStack )
    3966:	b926      	cbnz	r6, 3972 <Macro_layerState+0x46>
	{
		macroLayerIndexStack[ macroLayerIndexStackSize++ ] = layer;
    3968:	1c7b      	adds	r3, r7, #1
    396a:	8023      	strh	r3, [r4, #0]
    396c:	4b1c      	ldr	r3, [pc, #112]	; (39e0 <Macro_layerState+0xb4>)
    396e:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
	}

	// If the layer is in the LayerIndexStack and the state is 0x00, remove
	if ( LayerState[ layer ] == 0x00 && inLayerIndexStack )
    3972:	5cab      	ldrb	r3, [r5, r2]
    3974:	b96b      	cbnz	r3, 3992 <Macro_layerState+0x66>
    3976:	b166      	cbz	r6, 3992 <Macro_layerState+0x66>
	{
		// Remove the layer from the LayerIndexStack
		// Using the already positioned stackItem variable from the loop above
		while ( stackItem < macroLayerIndexStackSize )
    3978:	8823      	ldrh	r3, [r4, #0]
    397a:	4299      	cmp	r1, r3
    397c:	d207      	bcs.n	398e <Macro_layerState+0x62>
		{
			macroLayerIndexStack[ stackItem ] = macroLayerIndexStack[ stackItem + 1 ];
    397e:	4818      	ldr	r0, [pc, #96]	; (39e0 <Macro_layerState+0xb4>)
    3980:	1c4a      	adds	r2, r1, #1
    3982:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
    3986:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
			stackItem++;
    398a:	b291      	uxth	r1, r2
    398c:	e7f5      	b.n	397a <Macro_layerState+0x4e>
		}

		// Reduce LayerIndexStack size
		macroLayerIndexStackSize--;
    398e:	3b01      	subs	r3, #1
    3990:	8023      	strh	r3, [r4, #0]
	}

	// Layer Debug Mode
	if ( layerDebugMode )
    3992:	4b15      	ldr	r3, [pc, #84]	; (39e8 <Macro_layerState+0xbc>)
    3994:	781b      	ldrb	r3, [r3, #0]
    3996:	b303      	cbz	r3, 39da <Macro_layerState+0xae>
	{
		dbug_msg("Layer ");
    3998:	4814      	ldr	r0, [pc, #80]	; (39ec <Macro_layerState+0xc0>)
    399a:	f002 fd19 	bl	63d0 <_print>
    399e:	2600      	movs	r6, #0

		// Iterate over each of the layers displaying the state as a hex value
		for ( index_uint_t index = 0; index < LayerNum; index++ )
		{
			printHex_op( LayerState[ index ], 0 );
    39a0:	5da8      	ldrb	r0, [r5, r6]
    39a2:	2100      	movs	r1, #0
    39a4:	3601      	adds	r6, #1
    39a6:	f002 fdb5 	bl	6514 <printHex_op>
	if ( layerDebugMode )
	{
		dbug_msg("Layer ");

		// Iterate over each of the layers displaying the state as a hex value
		for ( index_uint_t index = 0; index < LayerNum; index++ )
    39aa:	2e03      	cmp	r6, #3
    39ac:	d1f8      	bne.n	39a0 <Macro_layerState+0x74>
		{
			printHex_op( LayerState[ index ], 0 );
		}

		// Always show the default layer (it's always 0)
		print(" 0");
    39ae:	4810      	ldr	r0, [pc, #64]	; (39f0 <Macro_layerState+0xc4>)
    39b0:	f002 fd0e 	bl	63d0 <_print>

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
    39b4:	8824      	ldrh	r4, [r4, #0]
    39b6:	b15c      	cbz	r4, 39d0 <Macro_layerState+0xa4>
		{
			print(":");
    39b8:	480e      	ldr	r0, [pc, #56]	; (39f4 <Macro_layerState+0xc8>)
    39ba:	f002 fd09 	bl	63d0 <_print>
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
    39be:	3c01      	subs	r4, #1
    39c0:	4b07      	ldr	r3, [pc, #28]	; (39e0 <Macro_layerState+0xb4>)
    39c2:	2100      	movs	r1, #0
    39c4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    39c8:	f002 fda4 	bl	6514 <printHex_op>

		// Always show the default layer (it's always 0)
		print(" 0");

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
    39cc:	b2a4      	uxth	r4, r4
    39ce:	e7f2      	b.n	39b6 <Macro_layerState+0x8a>
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    39d0:	4809      	ldr	r0, [pc, #36]	; (39f8 <Macro_layerState+0xcc>)
	}
}
    39d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    39d6:	f002 bcfb 	b.w	63d0 <_print>
    39da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39dc:	1fff9068 	.word	0x1fff9068
    39e0:	1fff906c 	.word	0x1fff906c
    39e4:	1fff9f04 	.word	0x1fff9f04
    39e8:	1fff9074 	.word	0x1fff9074
    39ec:	00008345 	.word	0x00008345
    39f0:	0000835f 	.word	0x0000835f
    39f4:	00006dfb 	.word	0x00006dfb
    39f8:	000093eb 	.word	0x000093eb

000039fc <Macro_layerState_capability>:
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    39fc:	29ff      	cmp	r1, #255	; 0xff

// Modifies the specified Layer control byte
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    39fe:	4613      	mov	r3, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3a00:	d104      	bne.n	3a0c <Macro_layerState_capability+0x10>
    3a02:	28ff      	cmp	r0, #255	; 0xff
    3a04:	d105      	bne.n	3a12 <Macro_layerState_capability+0x16>
	{
		print("Macro_layerState(layerIndex,layerState)");
    3a06:	4805      	ldr	r0, [pc, #20]	; (3a1c <Macro_layerState_capability+0x20>)
    3a08:	f002 bce2 	b.w	63d0 <_print>
	}

	// Only use capability on press or release
	// TODO Analog
	// XXX This may cause issues, might be better to implement state table here to decide -HaaTa
	if ( stateType == 0x00 && state == 0x02 ) // Hold condition
    3a0c:	b909      	cbnz	r1, 3a12 <Macro_layerState_capability+0x16>
    3a0e:	2802      	cmp	r0, #2
    3a10:	d003      	beq.n	3a1a <Macro_layerState_capability+0x1e>
	uint16_t layer = *(uint16_t*)(&args[0]);

	// Get layer toggle byte
	uint8_t layerState = args[ sizeof(uint16_t) ];

	Macro_layerState( state, stateType, layer, layerState );
    3a12:	881a      	ldrh	r2, [r3, #0]
    3a14:	789b      	ldrb	r3, [r3, #2]
    3a16:	f7ff bf89 	b.w	392c <Macro_layerState>
    3a1a:	4770      	bx	lr
    3a1c:	00008362 	.word	0x00008362

00003a20 <Macro_layerLatch_capability>:
// Latches given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLatch_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3a20:	29ff      	cmp	r1, #255	; 0xff
    3a22:	d104      	bne.n	3a2e <Macro_layerLatch_capability+0xe>
    3a24:	28ff      	cmp	r0, #255	; 0xff
    3a26:	d105      	bne.n	3a34 <Macro_layerLatch_capability+0x14>
	{
		print("Macro_layerLatch(layerIndex)");
    3a28:	4805      	ldr	r0, [pc, #20]	; (3a40 <Macro_layerLatch_capability+0x20>)
    3a2a:	f002 bcd1 	b.w	63d0 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state != 0x03 ) // Only on release
    3a2e:	b909      	cbnz	r1, 3a34 <Macro_layerLatch_capability+0x14>
    3a30:	2803      	cmp	r0, #3
    3a32:	d103      	bne.n	3a3c <Macro_layerLatch_capability+0x1c>

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	Macro_layerState( state, stateType, layer, 0x02 );
    3a34:	8812      	ldrh	r2, [r2, #0]
    3a36:	2302      	movs	r3, #2
    3a38:	f7ff bf78 	b.w	392c <Macro_layerState>
    3a3c:	4770      	bx	lr
    3a3e:	bf00      	nop
    3a40:	0000838a 	.word	0x0000838a

00003a44 <Macro_layerLock_capability>:
// Locks given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLock_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3a44:	29ff      	cmp	r1, #255	; 0xff
    3a46:	d104      	bne.n	3a52 <Macro_layerLock_capability+0xe>
    3a48:	28ff      	cmp	r0, #255	; 0xff
    3a4a:	d105      	bne.n	3a58 <Macro_layerLock_capability+0x14>
	{
		print("Macro_layerLock(layerIndex)");
    3a4c:	4805      	ldr	r0, [pc, #20]	; (3a64 <Macro_layerLock_capability+0x20>)
    3a4e:	f002 bcbf 	b.w	63d0 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    3a52:	b909      	cbnz	r1, 3a58 <Macro_layerLock_capability+0x14>
    3a54:	2801      	cmp	r0, #1
    3a56:	d103      	bne.n	3a60 <Macro_layerLock_capability+0x1c>

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	Macro_layerState( state, stateType, layer, 0x04 );
    3a58:	8812      	ldrh	r2, [r2, #0]
    3a5a:	2304      	movs	r3, #4
    3a5c:	f7ff bf66 	b.w	392c <Macro_layerState>
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	000083a7 	.word	0x000083a7

00003a68 <Macro_layerShift_capability>:
// Shifts given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerShift_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3a68:	29ff      	cmp	r1, #255	; 0xff
    3a6a:	d104      	bne.n	3a76 <Macro_layerShift_capability+0xe>
    3a6c:	28ff      	cmp	r0, #255	; 0xff
    3a6e:	d106      	bne.n	3a7e <Macro_layerShift_capability+0x16>
	{
		print("Macro_layerShift(layerIndex)");
    3a70:	4805      	ldr	r0, [pc, #20]	; (3a88 <Macro_layerShift_capability+0x20>)
    3a72:	f002 bcad 	b.w	63d0 <_print>
		return;
	}

	// Only use capability on press or release
	// TODO Analog
	if ( stateType == 0x00 && ( state == 0x00 || state == 0x02 ) ) // Only pass press or release conditions
    3a76:	b911      	cbnz	r1, 3a7e <Macro_layerShift_capability+0x16>
    3a78:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    3a7c:	d003      	beq.n	3a86 <Macro_layerShift_capability+0x1e>

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	Macro_layerState( state, stateType, layer, 0x01 );
    3a7e:	8812      	ldrh	r2, [r2, #0]
    3a80:	2301      	movs	r3, #1
    3a82:	f7ff bf53 	b.w	392c <Macro_layerState>
    3a86:	4770      	bx	lr
    3a88:	000083c3 	.word	0x000083c3

00003a8c <Macro_layerRotate_capability>:
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3a8c:	29ff      	cmp	r1, #255	; 0xff
// Rotate layer to next/previous
// Uses state variable to keep track of the current layer position
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    3a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a92:	4606      	mov	r6, r0
    3a94:	460d      	mov	r5, r1
    3a96:	4617      	mov	r7, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3a98:	d106      	bne.n	3aa8 <Macro_layerRotate_capability+0x1c>
    3a9a:	28ff      	cmp	r0, #255	; 0xff
    3a9c:	d107      	bne.n	3aae <Macro_layerRotate_capability+0x22>
	{
		print("Macro_layerRotate(previous)");
    3a9e:	4815      	ldr	r0, [pc, #84]	; (3af4 <Macro_layerRotate_capability+0x68>)
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    3aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Macro_layerRotate(previous)");
    3aa4:	f002 bc94 	b.w	63d0 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    3aa8:	b909      	cbnz	r1, 3aae <Macro_layerRotate_capability+0x22>
    3aaa:	2801      	cmp	r0, #1
    3aac:	d11f      	bne.n	3aee <Macro_layerRotate_capability+0x62>
		return;

	// Unset previous rotation layer if not 0
	if ( Macro_rotationLayer != 0 )
    3aae:	4c12      	ldr	r4, [pc, #72]	; (3af8 <Macro_layerRotate_capability+0x6c>)
    3ab0:	8822      	ldrh	r2, [r4, #0]
    3ab2:	b122      	cbz	r2, 3abe <Macro_layerRotate_capability+0x32>
	{
		Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    3ab4:	4630      	mov	r0, r6
    3ab6:	4629      	mov	r1, r5
    3ab8:	2304      	movs	r3, #4
    3aba:	f7ff ff37 	bl	392c <Macro_layerState>

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    3abe:	7839      	ldrb	r1, [r7, #0]
	{
		Macro_rotationLayer++;
    3ac0:	4a0d      	ldr	r2, [pc, #52]	; (3af8 <Macro_layerRotate_capability+0x6c>)
    3ac2:	8823      	ldrh	r3, [r4, #0]

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    3ac4:	b929      	cbnz	r1, 3ad2 <Macro_layerRotate_capability+0x46>
	{
		Macro_rotationLayer++;
    3ac6:	3301      	adds	r3, #1
    3ac8:	b29b      	uxth	r3, r3

		// Invalid layer
		if ( Macro_rotationLayer >= LayerNum )
    3aca:	2b02      	cmp	r3, #2
    3acc:	d906      	bls.n	3adc <Macro_layerRotate_capability+0x50>
			Macro_rotationLayer = 0;
    3ace:	8011      	strh	r1, [r2, #0]
    3ad0:	e005      	b.n	3ade <Macro_layerRotate_capability+0x52>
	}
	// Previous
	else
	{
		Macro_rotationLayer--;
    3ad2:	3b01      	subs	r3, #1
    3ad4:	b29b      	uxth	r3, r3

		// Layer wrap
		if ( Macro_rotationLayer >= LayerNum )
    3ad6:	2b02      	cmp	r3, #2
			Macro_rotationLayer = LayerNum - 1;
    3ad8:	bf88      	it	hi
    3ada:	2302      	movhi	r3, #2
    3adc:	8013      	strh	r3, [r2, #0]
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    3ade:	4630      	mov	r0, r6
    3ae0:	4629      	mov	r1, r5
    3ae2:	8822      	ldrh	r2, [r4, #0]
    3ae4:	2304      	movs	r3, #4
}
    3ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if ( Macro_rotationLayer >= LayerNum )
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    3aea:	f7ff bf1f 	b.w	392c <Macro_layerState>
    3aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3af2:	bf00      	nop
    3af4:	000083e0 	.word	0x000083e0
    3af8:	1fff9d10 	.word	0x1fff9d10

00003afc <Macro_layerLookup>:
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    3afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b00:	4603      	mov	r3, r0
	uint8_t scanCode = guide->scanCode;
    3b02:	7884      	ldrb	r4, [r0, #2]

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    3b04:	7800      	ldrb	r0, [r0, #0]
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    3b06:	460e      	mov	r6, r1
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    3b08:	b9c0      	cbnz	r0, 3b3c <Macro_layerLookup+0x40>
    3b0a:	785b      	ldrb	r3, [r3, #1]
    3b0c:	2b01      	cmp	r3, #1
    3b0e:	d015      	beq.n	3b3c <Macro_layerLookup+0x40>
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    3b10:	4b39      	ldr	r3, [pc, #228]	; (3bf8 <Macro_layerLookup+0xfc>)

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    3b12:	4d3a      	ldr	r5, [pc, #232]	; (3bfc <Macro_layerLookup+0x100>)
	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    3b14:	5d1a      	ldrb	r2, [r3, r4]

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    3b16:	230c      	movs	r3, #12
    3b18:	4353      	muls	r3, r2
    3b1a:	18e9      	adds	r1, r5, r3
		const Layer *layer = &LayerIndex[ cachedLayer ];

		// Cache trigger list before attempting to expire latch
		nat_ptr_t *trigger_list = map[ scanCode - layer->first ];
    3b1c:	58eb      	ldr	r3, [r5, r3]
    3b1e:	7a09      	ldrb	r1, [r1, #8]
    3b20:	1a64      	subs	r4, r4, r1
    3b22:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

		// Check if latch has been pressed for this layer
		uint8_t latch = LayerState[ cachedLayer ] & 0x02;
    3b26:	4b36      	ldr	r3, [pc, #216]	; (3c00 <Macro_layerLookup+0x104>)
    3b28:	5c9b      	ldrb	r3, [r3, r2]
		if ( latch && latch_expire )
    3b2a:	079b      	lsls	r3, r3, #30
    3b2c:	d560      	bpl.n	3bf0 <Macro_layerLookup+0xf4>
    3b2e:	2e00      	cmp	r6, #0
    3b30:	d05e      	beq.n	3bf0 <Macro_layerLookup+0xf4>
		{
			Macro_layerState( 0, 0, cachedLayer, 0x02 );
    3b32:	4601      	mov	r1, r0
    3b34:	2302      	movs	r3, #2
    3b36:	f7ff fef9 	bl	392c <Macro_layerState>
    3b3a:	e059      	b.n	3bf0 <Macro_layerLookup+0xf4>

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    3b3c:	4b31      	ldr	r3, [pc, #196]	; (3c04 <Macro_layerLookup+0x108>)
    3b3e:	881d      	ldrh	r5, [r3, #0]
    3b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3b44:	429d      	cmp	r5, r3
    3b46:	d03a      	beq.n	3bbe <Macro_layerLookup+0xc2>
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    3b48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3c14 <Macro_layerLookup+0x118>

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    3b4c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 3c00 <Macro_layerLookup+0x104>

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    3b50:	f83a 7015 	ldrh.w	r7, [sl, r5, lsl #1]

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    3b54:	f819 3007 	ldrb.w	r3, [r9, r7]
    3b58:	f003 0302 	and.w	r3, r3, #2
		if ( latch && latch_expire )
    3b5c:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    3b60:	b133      	cbz	r3, 3b70 <Macro_layerLookup+0x74>
    3b62:	b12e      	cbz	r6, 3b70 <Macro_layerLookup+0x74>
		{
			Macro_layerState( 0, 0, macroLayerIndexStack[ layerIndex ], 0x02 );
    3b64:	2000      	movs	r0, #0
    3b66:	4601      	mov	r1, r0
    3b68:	463a      	mov	r2, r7
    3b6a:	2302      	movs	r3, #2
    3b6c:	f7ff fede 	bl	392c <Macro_layerState>
		}

		// Only use layer, if state is valid
		// XOR each of the state bits
		// If only two are enabled, do not use this state
		if ( (LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x01) ^ (latch>>1) ^ ((LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x04)>>2) )
    3b70:	f83a 1015 	ldrh.w	r1, [sl, r5, lsl #1]
    3b74:	f819 3001 	ldrb.w	r3, [r9, r1]
    3b78:	f003 0201 	and.w	r2, r3, #1
    3b7c:	ea82 0258 	eor.w	r2, r2, r8, lsr #1
    3b80:	f3c3 0380 	ubfx	r3, r3, #2, #1
    3b84:	429a      	cmp	r2, r3
    3b86:	d017      	beq.n	3bb8 <Macro_layerLookup+0xbc>
		{
			// Lookup layer
			nat_ptr_t **map = (nat_ptr_t**)layer->triggerMap;
    3b88:	220c      	movs	r2, #12
    3b8a:	481c      	ldr	r0, [pc, #112]	; (3bfc <Macro_layerLookup+0x100>)
    3b8c:	437a      	muls	r2, r7
    3b8e:	1883      	adds	r3, r0, r2
    3b90:	5882      	ldr	r2, [r0, r2]

			// Determine if layer has key defined
			// Make sure scanCode is between layer first and last scancodes
			if ( map != 0
    3b92:	b18a      	cbz	r2, 3bb8 <Macro_layerLookup+0xbc>
				&& scanCode <= layer->last
    3b94:	7a58      	ldrb	r0, [r3, #9]
    3b96:	42a0      	cmp	r0, r4
    3b98:	d30e      	bcc.n	3bb8 <Macro_layerLookup+0xbc>
				&& scanCode >= layer->first
    3b9a:	7a1b      	ldrb	r3, [r3, #8]
    3b9c:	429c      	cmp	r4, r3
    3b9e:	d30b      	bcc.n	3bb8 <Macro_layerLookup+0xbc>
				&& *map[ scanCode - layer->first ] != 0 )
    3ba0:	1ae3      	subs	r3, r4, r3
    3ba2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    3ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	b123      	cbz	r3, 3bb8 <Macro_layerLookup+0xbc>
			{
				// Set the layer cache
				macroTriggerListLayerCache[ scanCode ] = macroLayerIndexStack[ layerIndex ];
    3bae:	4b12      	ldr	r3, [pc, #72]	; (3bf8 <Macro_layerLookup+0xfc>)
    3bb0:	5519      	strb	r1, [r3, r4]

				return map[ scanCode - layer->first ];
    3bb2:	6800      	ldr	r0, [r0, #0]
    3bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    3bb8:	3d01      	subs	r5, #1
    3bba:	b2ad      	uxth	r5, r5
    3bbc:	e7c0      	b.n	3b40 <Macro_layerLookup+0x44>
	// Lookup default layer
	const Layer *layer = &LayerIndex[0];

	// Make sure scanCode is between layer first and last scancodes
	if ( map != 0
		&& scanCode <= layer->last
    3bbe:	2c46      	cmp	r4, #70	; 0x46
    3bc0:	d809      	bhi.n	3bd6 <Macro_layerLookup+0xda>
		&& scanCode >= layer->first
		&& *map[ scanCode - layer->first ] != 0 )
    3bc2:	4b11      	ldr	r3, [pc, #68]	; (3c08 <Macro_layerLookup+0x10c>)
    3bc4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    3bc8:	6803      	ldr	r3, [r0, #0]
    3bca:	b123      	cbz	r3, 3bd6 <Macro_layerLookup+0xda>
	{
		// Set the layer cache to default map
		macroTriggerListLayerCache[ scanCode ] = 0;
    3bcc:	4b0a      	ldr	r3, [pc, #40]	; (3bf8 <Macro_layerLookup+0xfc>)
    3bce:	2200      	movs	r2, #0
    3bd0:	551a      	strb	r2, [r3, r4]

		return map[ scanCode - layer->first ];
    3bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
    3bd6:	480d      	ldr	r0, [pc, #52]	; (3c0c <Macro_layerLookup+0x110>)
    3bd8:	f002 fbfa 	bl	63d0 <_print>
	printHex( scanCode );
    3bdc:	4620      	mov	r0, r4
    3bde:	2101      	movs	r1, #1
    3be0:	f002 fc98 	bl	6514 <printHex_op>
	print( NL );
    3be4:	480a      	ldr	r0, [pc, #40]	; (3c10 <Macro_layerLookup+0x114>)
    3be6:	f002 fbf3 	bl	63d0 <_print>
	return 0;
    3bea:	2000      	movs	r0, #0
    3bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			extern void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args );
			LCD_layerStack_capability( 0, 0, 0 );
#endif
		}

		return trigger_list;
    3bf0:	4620      	mov	r0, r4
	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
	printHex( scanCode );
	print( NL );
	return 0;
}
    3bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bf6:	bf00      	nop
    3bf8:	1fff9f07 	.word	0x1fff9f07
    3bfc:	00007c90 	.word	0x00007c90
    3c00:	1fff9f04 	.word	0x1fff9f04
    3c04:	1fff9068 	.word	0x1fff9068
    3c08:	1fff8b24 	.word	0x1fff8b24
    3c0c:	000083fc 	.word	0x000083fc
    3c10:	000093eb 	.word	0x000093eb
    3c14:	1fff906c 	.word	0x1fff906c

00003c18 <Macro_keyState>:
		}
	}
#endif

	// Only add to macro trigger list if one of three states
	switch ( state )
    3c18:	1e4b      	subs	r3, r1, #1
    3c1a:	2b02      	cmp	r3, #2
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    3c1c:	b570      	push	{r4, r5, r6, lr}
    3c1e:	4604      	mov	r4, r0
		}
	}
#endif

	// Only add to macro trigger list if one of three states
	switch ( state )
    3c20:	d819      	bhi.n	3c56 <Macro_keyState+0x3e>
	{
	case 0x01: // Pressed
	case 0x02: // Held
	case 0x03: // Released
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
    3c22:	2846      	cmp	r0, #70	; 0x46
    3c24:	d90b      	bls.n	3c3e <Macro_keyState+0x26>
		{
			warn_msg("ScanCode is out of range/not defined: ");
    3c26:	480c      	ldr	r0, [pc, #48]	; (3c58 <Macro_keyState+0x40>)
    3c28:	f002 fbd2 	bl	63d0 <_print>
			printHex( scanCode );
    3c2c:	4620      	mov	r0, r4
    3c2e:	2101      	movs	r1, #1
    3c30:	f002 fc70 	bl	6514 <printHex_op>
			print( NL );
    3c34:	4809      	ldr	r0, [pc, #36]	; (3c5c <Macro_keyState+0x44>)
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
		break;
	}
}
    3c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
		{
			warn_msg("ScanCode is out of range/not defined: ");
			printHex( scanCode );
			print( NL );
    3c3a:	f002 bbc9 	b.w	63d0 <_print>
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    3c3e:	4a08      	ldr	r2, [pc, #32]	; (3c60 <Macro_keyState+0x48>)
    3c40:	4d08      	ldr	r5, [pc, #32]	; (3c64 <Macro_keyState+0x4c>)
    3c42:	7813      	ldrb	r3, [r2, #0]
    3c44:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    3c48:	182e      	adds	r6, r5, r0
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    3c4a:	3301      	adds	r3, #1
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
    3c4c:	7071      	strb	r1, [r6, #1]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
    3c4e:	2100      	movs	r1, #0
    3c50:	5429      	strb	r1, [r5, r0]
			printHex( scanCode );
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    3c52:	70b4      	strb	r4, [r6, #2]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    3c54:	7013      	strb	r3, [r2, #0]
    3c56:	bd70      	pop	{r4, r5, r6, pc}
    3c58:	0000843a 	.word	0x0000843a
    3c5c:	000093eb 	.word	0x000093eb
    3c60:	1fff906a 	.word	0x1fff906a
    3c64:	1fff9d12 	.word	0x1fff9d12

00003c68 <cliFunc_keyHold>:
		}
	}
}

void cliFunc_keyHold( char* args )
{
    3c68:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3c6a:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3c6c:	9801      	ldr	r0, [sp, #4]
    3c6e:	4669      	mov	r1, sp
    3c70:	aa01      	add	r2, sp, #4
    3c72:	f002 f8e5 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3c76:	9800      	ldr	r0, [sp, #0]
    3c78:	7803      	ldrb	r3, [r0, #0]
    3c7a:	b14b      	cbz	r3, 3c90 <cliFunc_keyHold+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    3c7c:	2b53      	cmp	r3, #83	; 0x53
    3c7e:	d1f5      	bne.n	3c6c <cliFunc_keyHold+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x02 ); // Hold scancode
    3c80:	3001      	adds	r0, #1
    3c82:	f002 fca3 	bl	65cc <numToInt>
    3c86:	2102      	movs	r1, #2
    3c88:	b2c0      	uxtb	r0, r0
    3c8a:	f7ff ffc5 	bl	3c18 <Macro_keyState>
			break;
    3c8e:	e7ed      	b.n	3c6c <cliFunc_keyHold+0x4>
		}
	}
}
    3c90:	b003      	add	sp, #12
    3c92:	f85d fb04 	ldr.w	pc, [sp], #4

00003c96 <cliFunc_keyPress>:

void cliFunc_keyPress( char* args )
{
    3c96:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3c98:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3c9a:	9801      	ldr	r0, [sp, #4]
    3c9c:	4669      	mov	r1, sp
    3c9e:	aa01      	add	r2, sp, #4
    3ca0:	f002 f8ce 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3ca4:	9800      	ldr	r0, [sp, #0]
    3ca6:	7803      	ldrb	r3, [r0, #0]
    3ca8:	b14b      	cbz	r3, 3cbe <cliFunc_keyPress+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    3caa:	2b53      	cmp	r3, #83	; 0x53
    3cac:	d1f5      	bne.n	3c9a <cliFunc_keyPress+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x01 ); // Press scancode
    3cae:	3001      	adds	r0, #1
    3cb0:	f002 fc8c 	bl	65cc <numToInt>
    3cb4:	2101      	movs	r1, #1
    3cb6:	b2c0      	uxtb	r0, r0
    3cb8:	f7ff ffae 	bl	3c18 <Macro_keyState>
			break;
    3cbc:	e7ed      	b.n	3c9a <cliFunc_keyPress+0x4>
		}
	}
}
    3cbe:	b003      	add	sp, #12
    3cc0:	f85d fb04 	ldr.w	pc, [sp], #4

00003cc4 <cliFunc_keyRelease>:

void cliFunc_keyRelease( char* args )
{
    3cc4:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3cc6:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    3cc8:	9801      	ldr	r0, [sp, #4]
    3cca:	4669      	mov	r1, sp
    3ccc:	aa01      	add	r2, sp, #4
    3cce:	f002 f8b7 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3cd2:	9800      	ldr	r0, [sp, #0]
    3cd4:	7803      	ldrb	r3, [r0, #0]
    3cd6:	b14b      	cbz	r3, 3cec <cliFunc_keyRelease+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    3cd8:	2b53      	cmp	r3, #83	; 0x53
    3cda:	d1f5      	bne.n	3cc8 <cliFunc_keyRelease+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x03 ); // Release scancode
    3cdc:	3001      	adds	r0, #1
    3cde:	f002 fc75 	bl	65cc <numToInt>
    3ce2:	2103      	movs	r1, #3
    3ce4:	b2c0      	uxtb	r0, r0
    3ce6:	f7ff ff97 	bl	3c18 <Macro_keyState>
			break;
    3cea:	e7ed      	b.n	3cc8 <cliFunc_keyRelease+0x4>
		}
	}
}
    3cec:	b003      	add	sp, #12
    3cee:	f85d fb04 	ldr.w	pc, [sp], #4
    3cf2:	0000      	movs	r0, r0

00003cf4 <Macro_appendResultMacroToPendingList>:


// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
    3cf4:	b570      	push	{r4, r5, r6, lr}
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    3cf6:	4a1f      	ldr	r2, [pc, #124]	; (3d74 <Macro_appendResultMacroToPendingList+0x80>)
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    3cf8:	7903      	ldrb	r3, [r0, #4]

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    3cfa:	8811      	ldrh	r1, [r2, #0]
    3cfc:	2400      	movs	r4, #0
    3cfe:	b2e6      	uxtb	r6, r4
    3d00:	428e      	cmp	r6, r1
    3d02:	4d1d      	ldr	r5, [pc, #116]	; (3d78 <Macro_appendResultMacroToPendingList+0x84>)
    3d04:	d206      	bcs.n	3d14 <Macro_appendResultMacroToPendingList+0x20>
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
    3d06:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
    3d0a:	429d      	cmp	r5, r3
    3d0c:	f104 0401 	add.w	r4, r4, #1
    3d10:	d1f5      	bne.n	3cfe <Macro_appendResultMacroToPendingList+0xa>
    3d12:	e02d      	b.n	3d70 <Macro_appendResultMacroToPendingList+0x7c>
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    3d14:	1c4c      	adds	r4, r1, #1
    3d16:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    3d1a:	6800      	ldr	r0, [r0, #0]
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    3d1c:	8014      	strh	r4, [r2, #0]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    3d1e:	7801      	ldrb	r1, [r0, #0]

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
    3d20:	2200      	movs	r2, #0
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    3d22:	b131      	cbz	r1, 3d32 <Macro_appendResultMacroToPendingList+0x3e>
	{
		pos += TriggerGuideSize * comboLength + 1;
    3d24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3d28:	3101      	adds	r1, #1
    3d2a:	4411      	add	r1, r2
    3d2c:	b2ca      	uxtb	r2, r1
		comboLength = triggerMacro->guide[ pos ];
    3d2e:	5c81      	ldrb	r1, [r0, r2]
    3d30:	e7f7      	b.n	3d22 <Macro_appendResultMacroToPendingList+0x2e>
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    3d32:	4402      	add	r2, r0
    3d34:	2003      	movs	r0, #3
    3d36:	f812 4c01 	ldrb.w	r4, [r2, #-1]

	// Lookup scanCode in buffer list for the current state and stateType
	for ( var_uint_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    3d3a:	4a10      	ldr	r2, [pc, #64]	; (3d7c <Macro_appendResultMacroToPendingList+0x88>)
    3d3c:	7811      	ldrb	r1, [r2, #0]
    3d3e:	4a10      	ldr	r2, [pc, #64]	; (3d80 <Macro_appendResultMacroToPendingList+0x8c>)
    3d40:	fb00 2001 	mla	r0, r0, r1, r2
    3d44:	4282      	cmp	r2, r0
    3d46:	d00e      	beq.n	3d66 <Macro_appendResultMacroToPendingList+0x72>
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
    3d48:	7811      	ldrb	r1, [r2, #0]
    3d4a:	42a1      	cmp	r1, r4
    3d4c:	d109      	bne.n	3d62 <Macro_appendResultMacroToPendingList+0x6e>
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    3d4e:	4d0d      	ldr	r5, [pc, #52]	; (3d84 <Macro_appendResultMacroToPendingList+0x90>)
    3d50:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    3d54:	4429      	add	r1, r5
    3d56:	f812 5c01 	ldrb.w	r5, [r2, #-1]
    3d5a:	704d      	strb	r5, [r1, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    3d5c:	f812 5c02 	ldrb.w	r5, [r2, #-2]
    3d60:	708d      	strb	r5, [r1, #2]
    3d62:	3203      	adds	r2, #3
    3d64:	e7ee      	b.n	3d44 <Macro_appendResultMacroToPendingList+0x50>
		}
	}

	// Reset the macro position
	ResultMacroRecordList[ resultMacroIndex ].pos = 0;
    3d66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d6a:	4a06      	ldr	r2, [pc, #24]	; (3d84 <Macro_appendResultMacroToPendingList+0x90>)
    3d6c:	2100      	movs	r1, #0
    3d6e:	54d1      	strb	r1, [r2, r3]
    3d70:	bd70      	pop	{r4, r5, r6, pc}
    3d72:	bf00      	nop
    3d74:	1fff9078 	.word	0x1fff9078
    3d78:	1fff907a 	.word	0x1fff907a
    3d7c:	1fff906a 	.word	0x1fff906a
    3d80:	1fff9d14 	.word	0x1fff9d14
    3d84:	1fff9de4 	.word	0x1fff9de4

00003d88 <Macro_process>:


// Macro Procesing Loop
// Called once per USB buffer send
inline void Macro_process()
{
    3d88:	b538      	push	{r3, r4, r5, lr}
		return;
	}
#endif

	// Only do one round of macro processing between Output Module timer sends
	if ( USBKeys_Sent != 0 )
    3d8a:	4b10      	ldr	r3, [pc, #64]	; (3dcc <Macro_process+0x44>)
    3d8c:	781a      	ldrb	r2, [r3, #0]
    3d8e:	461d      	mov	r5, r3
    3d90:	b9d2      	cbnz	r2, 3dc8 <Macro_process+0x40>
		}
	}
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
    3d92:	4b0f      	ldr	r3, [pc, #60]	; (3dd0 <Macro_process+0x48>)
    3d94:	781b      	ldrb	r3, [r3, #0]
    3d96:	b13b      	cbz	r3, 3da8 <Macro_process+0x20>
	{
		if ( macroStepCounter == 0 )
    3d98:	4a0e      	ldr	r2, [pc, #56]	; (3dd4 <Macro_process+0x4c>)
    3d9a:	8813      	ldrh	r3, [r2, #0]
    3d9c:	b1a3      	cbz	r3, 3dc8 <Macro_process+0x40>
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    3d9e:	3b01      	subs	r3, #1
		dbug_print("Macro Step");
    3da0:	480d      	ldr	r0, [pc, #52]	; (3dd8 <Macro_process+0x50>)
	{
		if ( macroStepCounter == 0 )
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    3da2:	8013      	strh	r3, [r2, #0]
		dbug_print("Macro Step");
    3da4:	f002 fb14 	bl	63d0 <_print>

	// Process result macros
	Result_process();

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    3da8:	4c0c      	ldr	r4, [pc, #48]	; (3ddc <Macro_process+0x54>)
		macroStepCounter--;
		dbug_print("Macro Step");
	}

	// Process Trigger Macros
	Trigger_process();
    3daa:	f000 fb47 	bl	443c <Trigger_process>


	// Process result macros
	Result_process();
    3dae:	f000 f9af 	bl	4110 <Result_process>

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    3db2:	7820      	ldrb	r0, [r4, #0]
    3db4:	f7ff fb70 	bl	3498 <Scan_finishedWithMacro>

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    3db8:	4a09      	ldr	r2, [pc, #36]	; (3de0 <Macro_process+0x58>)
    3dba:	7812      	ldrb	r2, [r2, #0]

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;
    3dbc:	2300      	movs	r3, #0
    3dbe:	7023      	strb	r3, [r4, #0]

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    3dc0:	b112      	cbz	r2, 3dc8 <Macro_process+0x40>
	{
		USBKeys_Modifiers = 0;
    3dc2:	4a08      	ldr	r2, [pc, #32]	; (3de4 <Macro_process+0x5c>)
		USBKeys_Sent = 0;
    3dc4:	702b      	strb	r3, [r5, #0]
	macroTriggerListBufferSize = 0;

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
	{
		USBKeys_Modifiers = 0;
    3dc6:	7013      	strb	r3, [r2, #0]
    3dc8:	bd38      	pop	{r3, r4, r5, pc}
    3dca:	bf00      	nop
    3dcc:	1fff9214 	.word	0x1fff9214
    3dd0:	1fff9076 	.word	0x1fff9076
    3dd4:	1fff9066 	.word	0x1fff9066
    3dd8:	00008476 	.word	0x00008476
    3ddc:	1fff906a 	.word	0x1fff906a
    3de0:	1fff9075 	.word	0x1fff9075
    3de4:	1fff9208 	.word	0x1fff9208

00003de8 <Macro_setup>:
	}
}


inline void Macro_setup()
{
    3de8:	b508      	push	{r3, lr}
	// Register Macro CLI dictionary
	CLI_registerDictionary( macroCLIDict, macroCLIDictName );
    3dea:	480a      	ldr	r0, [pc, #40]	; (3e14 <Macro_setup+0x2c>)
    3dec:	490a      	ldr	r1, [pc, #40]	; (3e18 <Macro_setup+0x30>)
    3dee:	f002 f89b 	bl	5f28 <CLI_registerDictionary>

	// Disable Macro debug mode
	macroDebugMode = 0;
    3df2:	4a0a      	ldr	r2, [pc, #40]	; (3e1c <Macro_setup+0x34>)
    3df4:	2300      	movs	r3, #0
    3df6:	7013      	strb	r3, [r2, #0]

	// Disable Macro pause flag
	macroPauseMode = 0;
    3df8:	4a09      	ldr	r2, [pc, #36]	; (3e20 <Macro_setup+0x38>)
    3dfa:	7013      	strb	r3, [r2, #0]

	// Set Macro step counter to zero
	macroStepCounter = 0;
    3dfc:	4a09      	ldr	r2, [pc, #36]	; (3e24 <Macro_setup+0x3c>)
    3dfe:	8013      	strh	r3, [r2, #0]

	// Make sure macro trigger buffer is empty
	macroTriggerListBufferSize = 0;
    3e00:	4a09      	ldr	r2, [pc, #36]	; (3e28 <Macro_setup+0x40>)
    3e02:	7013      	strb	r3, [r2, #0]

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;
    3e04:	4a09      	ldr	r2, [pc, #36]	; (3e2c <Macro_setup+0x44>)
    3e06:	8013      	strh	r3, [r2, #0]

	// Setup Triggers
	Trigger_setup();
    3e08:	f000 fb0a 	bl	4420 <Trigger_setup>

	// Setup Results
	Result_setup();
}
    3e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Setup Triggers
	Trigger_setup();

	// Setup Results
	Result_setup();
    3e10:	f000 b970 	b.w	40f4 <Result_setup>
    3e14:	000071cc 	.word	0x000071cc
    3e18:	00006f98 	.word	0x00006f98
    3e1c:	1fff9075 	.word	0x1fff9075
    3e20:	1fff9076 	.word	0x1fff9076
    3e24:	1fff9066 	.word	0x1fff9066
    3e28:	1fff906a 	.word	0x1fff906a
    3e2c:	1fff9d10 	.word	0x1fff9d10

00003e30 <macroDebugShowTrigger>:
}

void macroDebugShowTrigger( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    3e30:	2863      	cmp	r0, #99	; 0x63
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
}

void macroDebugShowTrigger( var_uint_t index )
{
    3e32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e36:	4605      	mov	r5, r0
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    3e38:	d865      	bhi.n	3f06 <macroDebugShowTrigger+0xd6>

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    3e3a:	4834      	ldr	r0, [pc, #208]	; (3f0c <macroDebugShowTrigger+0xdc>)
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    3e3c:	4e34      	ldr	r6, [pc, #208]	; (3f10 <macroDebugShowTrigger+0xe0>)

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    3e3e:	f002 fac7 	bl	63d0 <_print>
	info_msg("Trigger Macro Index: ");
    3e42:	4834      	ldr	r0, [pc, #208]	; (3f14 <macroDebugShowTrigger+0xe4>)
    3e44:	f002 fac4 	bl	63d0 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    3e48:	4628      	mov	r0, r5
    3e4a:	f002 fb0e 	bl	646a <printInt16>
	print( NL );
    3e4e:	482f      	ldr	r0, [pc, #188]	; (3f0c <macroDebugShowTrigger+0xdc>)
    3e50:	f002 fabe 	bl	63d0 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    3e54:	f856 8035 	ldr.w	r8, [r6, r5, lsl #3]
    3e58:	f898 7000 	ldrb.w	r7, [r8]
	info_msg("Trigger Macro Index: ");
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
    3e5c:	2400      	movs	r4, #0
	uint8_t comboLength = macro->guide[ pos ];

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    3e5e:	b367      	cbz	r7, 3eba <macroDebugShowTrigger+0x8a>
	{
		// Initial position of the combo
		var_uint_t comboPos = ++pos;
    3e60:	3401      	adds	r4, #1
    3e62:	b2e4      	uxtb	r4, r4

		// Iterate through the combo
		while ( pos < comboLength * TriggerGuideSize + comboPos )
    3e64:	2303      	movs	r3, #3
    3e66:	fb13 4707 	smlabb	r7, r3, r7, r4
    3e6a:	42bc      	cmp	r4, r7
    3e6c:	d21e      	bcs.n	3eac <macroDebugShowTrigger+0x7c>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ pos ]);
    3e6e:	eb08 0904 	add.w	r9, r8, r4

			// Display guide information about trigger key
			printHex( guide->scanCode );
    3e72:	2101      	movs	r1, #1
    3e74:	f899 0002 	ldrb.w	r0, [r9, #2]
    3e78:	f002 fb4c 	bl	6514 <printHex_op>
			print("|");
    3e7c:	4826      	ldr	r0, [pc, #152]	; (3f18 <macroDebugShowTrigger+0xe8>)
    3e7e:	f002 faa7 	bl	63d0 <_print>
			printHex( guide->type );
    3e82:	f818 0004 	ldrb.w	r0, [r8, r4]
    3e86:	2101      	movs	r1, #1
    3e88:	f002 fb44 	bl	6514 <printHex_op>
			print("|");
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    3e8c:	3403      	adds	r4, #3

			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
    3e8e:	4822      	ldr	r0, [pc, #136]	; (3f18 <macroDebugShowTrigger+0xe8>)
    3e90:	f002 fa9e 	bl	63d0 <_print>
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    3e94:	b2e4      	uxtb	r4, r4
			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
			printHex( guide->state );
    3e96:	f899 0001 	ldrb.w	r0, [r9, #1]
    3e9a:	2101      	movs	r1, #1
    3e9c:	f002 fb3a 	bl	6514 <printHex_op>

			// Increment position
			pos += TriggerGuideSize;

			// Only show combo separator if there are combos left in the sequence element
			if ( pos < comboLength * TriggerGuideSize + comboPos )
    3ea0:	42bc      	cmp	r4, r7
    3ea2:	d2e2      	bcs.n	3e6a <macroDebugShowTrigger+0x3a>
				print("+");
    3ea4:	481d      	ldr	r0, [pc, #116]	; (3f1c <macroDebugShowTrigger+0xec>)
    3ea6:	f002 fa93 	bl	63d0 <_print>
    3eaa:	e7de      	b.n	3e6a <macroDebugShowTrigger+0x3a>
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos ];
    3eac:	f818 7004 	ldrb.w	r7, [r8, r4]

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    3eb0:	b11f      	cbz	r7, 3eba <macroDebugShowTrigger+0x8a>
			print(";");
    3eb2:	481b      	ldr	r0, [pc, #108]	; (3f20 <macroDebugShowTrigger+0xf0>)
    3eb4:	f002 fa8c 	bl	63d0 <_print>
    3eb8:	e7d1      	b.n	3e5e <macroDebugShowTrigger+0x2e>
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    3eba:	4c1a      	ldr	r4, [pc, #104]	; (3f24 <macroDebugShowTrigger+0xf4>)
		if ( comboLength != 0 )
			print(";");
	}

	// Display current position
	print( NL "Position: " );
    3ebc:	481a      	ldr	r0, [pc, #104]	; (3f28 <macroDebugShowTrigger+0xf8>)
    3ebe:	f002 fa87 	bl	63d0 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    3ec2:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
			print(";");
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    3ec6:	f814 0015 	ldrb.w	r0, [r4, r5, lsl #1]
    3eca:	f002 face 	bl	646a <printInt16>

	// Display result macro index
	print( NL "Result Macro Index: " );
    3ece:	4817      	ldr	r0, [pc, #92]	; (3f2c <macroDebugShowTrigger+0xfc>)
    3ed0:	f002 fa7e 	bl	63d0 <_print>
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
	switch ( record->state )
    3ed4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    3ed8:	7930      	ldrb	r0, [r6, #4]
    3eda:	f002 fac6 	bl	646a <printInt16>

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
    3ede:	4814      	ldr	r0, [pc, #80]	; (3f30 <macroDebugShowTrigger+0x100>)
    3ee0:	f002 fa76 	bl	63d0 <_print>
	switch ( record->state )
    3ee4:	786b      	ldrb	r3, [r5, #1]
    3ee6:	2b01      	cmp	r3, #1
    3ee8:	d006      	beq.n	3ef8 <macroDebugShowTrigger+0xc8>
    3eea:	d303      	bcc.n	3ef4 <macroDebugShowTrigger+0xc4>
    3eec:	2b02      	cmp	r3, #2
    3eee:	d005      	beq.n	3efc <macroDebugShowTrigger+0xcc>
    3ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	case TriggerMacro_Press:   print("Press");   break;
    3ef4:	480f      	ldr	r0, [pc, #60]	; (3f34 <macroDebugShowTrigger+0x104>)
    3ef6:	e002      	b.n	3efe <macroDebugShowTrigger+0xce>
	case TriggerMacro_Release: print("Release"); break;
    3ef8:	480f      	ldr	r0, [pc, #60]	; (3f38 <macroDebugShowTrigger+0x108>)
    3efa:	e000      	b.n	3efe <macroDebugShowTrigger+0xce>
	case TriggerMacro_Waiting: print("Waiting"); break;
    3efc:	480f      	ldr	r0, [pc, #60]	; (3f3c <macroDebugShowTrigger+0x10c>)
	}
}
    3efe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	print( NL "Trigger Macro State: " );
	switch ( record->state )
	{
	case TriggerMacro_Press:   print("Press");   break;
	case TriggerMacro_Release: print("Release"); break;
	case TriggerMacro_Waiting: print("Waiting"); break;
    3f02:	f002 ba65 	b.w	63d0 <_print>
    3f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f0a:	bf00      	nop
    3f0c:	000093eb 	.word	0x000093eb
    3f10:	00007748 	.word	0x00007748
    3f14:	00008496 	.word	0x00008496
    3f18:	000084be 	.word	0x000084be
    3f1c:	000084c0 	.word	0x000084c0
    3f20:	000084c2 	.word	0x000084c2
    3f24:	1fff9f4d 	.word	0x1fff9f4d
    3f28:	000084c4 	.word	0x000084c4
    3f2c:	000084d1 	.word	0x000084d1
    3f30:	000084e8 	.word	0x000084e8
    3f34:	00008575 	.word	0x00008575
    3f38:	0000857e 	.word	0x0000857e
    3f3c:	00008500 	.word	0x00008500

00003f40 <macroDebugShowResult>:
}

void macroDebugShowResult( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    3f40:	285f      	cmp	r0, #95	; 0x5f
	case TriggerMacro_Waiting: print("Waiting"); break;
	}
}

void macroDebugShowResult( var_uint_t index )
{
    3f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f46:	4604      	mov	r4, r0
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    3f48:	f200 8095 	bhi.w	4076 <macroDebugShowResult+0x136>

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];

	print( NL );
    3f4c:	484b      	ldr	r0, [pc, #300]	; (407c <macroDebugShowResult+0x13c>)
    3f4e:	f002 fa3f 	bl	63d0 <_print>
	info_msg("Result Macro Index: ");
    3f52:	484b      	ldr	r0, [pc, #300]	; (4080 <macroDebugShowResult+0x140>)
    3f54:	f002 fa3c 	bl	63d0 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    3f58:	4620      	mov	r0, r4
    3f5a:	f002 fa86 	bl	646a <printInt16>
	print( NL );
    3f5e:	4847      	ldr	r0, [pc, #284]	; (407c <macroDebugShowResult+0x13c>)
    3f60:	f002 fa36 	bl	63d0 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos++ ];
    3f64:	4b47      	ldr	r3, [pc, #284]	; (4084 <macroDebugShowResult+0x144>)
    3f66:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
    3f6a:	f896 8000 	ldrb.w	r8, [r6]
    3f6e:	2701      	movs	r7, #1

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    3f70:	f1b8 0f00 	cmp.w	r8, #0
    3f74:	d064      	beq.n	4040 <macroDebugShowResult+0x100>
    3f76:	463d      	mov	r5, r7
    3f78:	2700      	movs	r7, #0
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    3f7a:	2101      	movs	r1, #1
    3f7c:	5d70      	ldrb	r0, [r6, r5]
			print("|");

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    3f7e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 40b0 <macroDebugShowResult+0x170>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    3f82:	f002 fac7 	bl	6514 <printHex_op>
			print("|");
    3f86:	4840      	ldr	r0, [pc, #256]	; (4088 <macroDebugShowResult+0x148>)
    3f88:	f002 fa22 	bl	63d0 <_print>

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    3f8c:	5d73      	ldrb	r3, [r6, r5]
    3f8e:	2101      	movs	r1, #1
    3f90:	f839 0033 	ldrh.w	r0, [r9, r3, lsl #3]
    3f94:	f002 fabe 	bl	6514 <printHex_op>
			print("|");
    3f98:	483b      	ldr	r0, [pc, #236]	; (4088 <macroDebugShowResult+0x148>)
    3f9a:	f002 fa19 	bl	63d0 <_print>

			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    3f9e:	5d73      	ldrb	r3, [r6, r5]
			capability( 0xFF, 0xFF, 0 );
    3fa0:	20ff      	movs	r0, #255	; 0xff
    3fa2:	4601      	mov	r1, r0
    3fa4:	2200      	movs	r2, #0
    3fa6:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
    3faa:	4798      	blx	r3

			// Display Argument(s)
			print("(");
    3fac:	4837      	ldr	r0, [pc, #220]	; (408c <macroDebugShowResult+0x14c>)
    3fae:	f002 fa0f 	bl	63d0 <_print>

		// Iterate through the combo
		while ( funcCount < comboLength )
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);
    3fb2:	eb06 0b05 	add.w	fp, r6, r5
			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
			capability( 0xFF, 0xFF, 0 );

			// Display Argument(s)
			print("(");
    3fb6:	2200      	movs	r2, #0
			for ( var_uint_t arg = 0; arg < CapabilitiesList[ guide->index ].argCount; arg++ )
    3fb8:	f89b 3000 	ldrb.w	r3, [fp]
    3fbc:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 40b0 <macroDebugShowResult+0x170>
    3fc0:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
    3fc4:	7919      	ldrb	r1, [r3, #4]
    3fc6:	b2d3      	uxtb	r3, r2
    3fc8:	4299      	cmp	r1, r3
    3fca:	d919      	bls.n	4000 <macroDebugShowResult+0xc0>
			{
				// Arguments are only 8 bit values
				printHex( (&guide->args)[ arg ] );
    3fcc:	eb0b 0103 	add.w	r1, fp, r3
    3fd0:	9201      	str	r2, [sp, #4]
    3fd2:	7848      	ldrb	r0, [r1, #1]
    3fd4:	9300      	str	r3, [sp, #0]
    3fd6:	2101      	movs	r1, #1
    3fd8:	f002 fa9c 	bl	6514 <printHex_op>

				// Only show arg separator if there are args left
				if ( arg + 1 < CapabilitiesList[ guide->index ].argCount )
    3fdc:	f89b 1000 	ldrb.w	r1, [fp]
    3fe0:	9b00      	ldr	r3, [sp, #0]
    3fe2:	9a01      	ldr	r2, [sp, #4]
    3fe4:	eb0a 0ac1 	add.w	sl, sl, r1, lsl #3
    3fe8:	3301      	adds	r3, #1
    3fea:	f89a 1004 	ldrb.w	r1, [sl, #4]
    3fee:	428b      	cmp	r3, r1
    3ff0:	da04      	bge.n	3ffc <macroDebugShowResult+0xbc>
					print(",");
    3ff2:	4827      	ldr	r0, [pc, #156]	; (4090 <macroDebugShowResult+0x150>)
    3ff4:	9200      	str	r2, [sp, #0]
    3ff6:	f002 f9eb 	bl	63d0 <_print>
    3ffa:	9a00      	ldr	r2, [sp, #0]
    3ffc:	3201      	adds	r2, #1
    3ffe:	e7db      	b.n	3fb8 <macroDebugShowResult+0x78>
			}
			print(")");
    4000:	4824      	ldr	r0, [pc, #144]	; (4094 <macroDebugShowResult+0x154>)
    4002:	f002 f9e5 	bl	63d0 <_print>

			// Increment position
			pos += ResultGuideSize( guide );
    4006:	f89b 3000 	ldrb.w	r3, [fp]
    400a:	eb0a 0ac3 	add.w	sl, sl, r3, lsl #3

			// Increment function count
			funcCount++;
    400e:	3701      	adds	r7, #1
    4010:	f89a 3004 	ldrb.w	r3, [sl, #4]
    4014:	b2ff      	uxtb	r7, r7
    4016:	3301      	adds	r3, #1
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    4018:	441d      	add	r5, r3

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    401a:	4547      	cmp	r7, r8
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    401c:	b2ed      	uxtb	r5, r5

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    401e:	d202      	bcs.n	4026 <macroDebugShowResult+0xe6>
				print("+");
    4020:	481d      	ldr	r0, [pc, #116]	; (4098 <macroDebugShowResult+0x158>)
    4022:	f002 f9d5 	bl	63d0 <_print>
	{
		// Function Counter, used to keep track of the combos processed
		var_uint_t funcCount = 0;

		// Iterate through the combo
		while ( funcCount < comboLength )
    4026:	4547      	cmp	r7, r8
    4028:	d1a7      	bne.n	3f7a <macroDebugShowResult+0x3a>
			if ( funcCount < comboLength )
				print("+");
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos++ ];
    402a:	f816 8005 	ldrb.w	r8, [r6, r5]
    402e:	1c6f      	adds	r7, r5, #1
    4030:	b2ff      	uxtb	r7, r7

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    4032:	f1b8 0f00 	cmp.w	r8, #0
    4036:	d003      	beq.n	4040 <macroDebugShowResult+0x100>
			print(";");
    4038:	4818      	ldr	r0, [pc, #96]	; (409c <macroDebugShowResult+0x15c>)
    403a:	f002 f9c9 	bl	63d0 <_print>
    403e:	e797      	b.n	3f70 <macroDebugShowResult+0x30>
	}

	// Display current position
	print( NL "Position: " );
    4040:	4817      	ldr	r0, [pc, #92]	; (40a0 <macroDebugShowResult+0x160>)
    4042:	f002 f9c5 	bl	63d0 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    4046:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    404a:	4b16      	ldr	r3, [pc, #88]	; (40a4 <macroDebugShowResult+0x164>)
    404c:	191d      	adds	r5, r3, r4
    404e:	5d18      	ldrb	r0, [r3, r4]
    4050:	f002 fa0b 	bl	646a <printInt16>

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
    4054:	4814      	ldr	r0, [pc, #80]	; (40a8 <macroDebugShowResult+0x168>)
    4056:	f002 f9bb 	bl	63d0 <_print>
	printHex( record->state );
    405a:	7868      	ldrb	r0, [r5, #1]
    405c:	2101      	movs	r1, #1
    405e:	f002 fa59 	bl	6514 <printHex_op>
	print("/");
    4062:	4812      	ldr	r0, [pc, #72]	; (40ac <macroDebugShowResult+0x16c>)
    4064:	f002 f9b4 	bl	63d0 <_print>
	printHex( record->stateType );
    4068:	78a8      	ldrb	r0, [r5, #2]
    406a:	2101      	movs	r1, #1
}
    406c:	b003      	add	sp, #12
    406e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
	printHex( record->state );
	print("/");
	printHex( record->stateType );
    4072:	f002 ba4f 	b.w	6514 <printHex_op>
}
    4076:	b003      	add	sp, #12
    4078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    407c:	000093eb 	.word	0x000093eb
    4080:	00008508 	.word	0x00008508
    4084:	000072fc 	.word	0x000072fc
    4088:	000084be 	.word	0x000084be
    408c:	0000911b 	.word	0x0000911b
    4090:	0000852f 	.word	0x0000852f
    4094:	00008bd7 	.word	0x00008bd7
    4098:	000084c0 	.word	0x000084c0
    409c:	000084c2 	.word	0x000084c2
    40a0:	000084c4 	.word	0x000084c4
    40a4:	1fff9de4 	.word	0x1fff9de4
    40a8:	00008531 	.word	0x00008531
    40ac:	00008556 	.word	0x00008556
    40b0:	0000756c 	.word	0x0000756c

000040b4 <cliFunc_macroShow>:

void cliFunc_macroShow( char* args )
{
    40b4:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    40b6:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    40b8:	9801      	ldr	r0, [sp, #4]
    40ba:	4669      	mov	r1, sp
    40bc:	aa01      	add	r2, sp, #4
    40be:	f001 febf 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    40c2:	9800      	ldr	r0, [sp, #0]
    40c4:	7803      	ldrb	r3, [r0, #0]
    40c6:	b18b      	cbz	r3, 40ec <cliFunc_macroShow+0x38>
			break;

		// Ignore invalid codes
		switch ( arg1Ptr[0] )
    40c8:	2b52      	cmp	r3, #82	; 0x52
    40ca:	d008      	beq.n	40de <cliFunc_macroShow+0x2a>
    40cc:	2b54      	cmp	r3, #84	; 0x54
    40ce:	d1f3      	bne.n	40b8 <cliFunc_macroShow+0x4>
		{
		// Indexed Trigger Macro
		case 'T':
			macroDebugShowTrigger( numToInt( &arg1Ptr[1] ) );
    40d0:	3001      	adds	r0, #1
    40d2:	f002 fa7b 	bl	65cc <numToInt>
    40d6:	b2c0      	uxtb	r0, r0
    40d8:	f7ff feaa 	bl	3e30 <macroDebugShowTrigger>
			break;
    40dc:	e7ec      	b.n	40b8 <cliFunc_macroShow+0x4>
		// Indexed Result Macro
		case 'R':
			macroDebugShowResult( numToInt( &arg1Ptr[1] ) );
    40de:	3001      	adds	r0, #1
    40e0:	f002 fa74 	bl	65cc <numToInt>
    40e4:	b2c0      	uxtb	r0, r0
    40e6:	f7ff ff2b 	bl	3f40 <macroDebugShowResult>
			break;
    40ea:	e7e5      	b.n	40b8 <cliFunc_macroShow+0x4>
		}
	}
}
    40ec:	b003      	add	sp, #12
    40ee:	f85d fb04 	ldr.w	pc, [sp], #4
    40f2:	0000      	movs	r0, r0

000040f4 <Result_setup>:
{
}


void Result_setup()
{
    40f4:	2300      	movs	r3, #0
	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
	{
		ResultMacroRecordList[ macro ].pos       = 0;
    40f6:	4805      	ldr	r0, [pc, #20]	; (410c <Result_setup+0x18>)
    40f8:	2200      	movs	r2, #0
    40fa:	1819      	adds	r1, r3, r0
    40fc:	541a      	strb	r2, [r3, r0]
    40fe:	3303      	adds	r3, #3


void Result_setup()
{
	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    4100:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
    4104:	704a      	strb	r2, [r1, #1]
		ResultMacroRecordList[ macro ].stateType = 0;
    4106:	708a      	strb	r2, [r1, #2]


void Result_setup()
{
	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    4108:	d1f5      	bne.n	40f6 <Result_setup+0x2>
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
		ResultMacroRecordList[ macro ].stateType = 0;
	}
}
    410a:	4770      	bx	lr
    410c:	1fff9de4 	.word	0x1fff9de4

00004110 <Result_process>:


void Result_process()
{
    4110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroResultMacroPendingListTail = 0;

	// Iterate through the pending ResultMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    4114:	f04f 0800 	mov.w	r8, #0

void Result_process()
{
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroResultMacroPendingListTail = 0;
    4118:	4647      	mov	r7, r8

	// Iterate through the pending ResultMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    411a:	4b24      	ldr	r3, [pc, #144]	; (41ac <Result_process+0x9c>)
    411c:	881a      	ldrh	r2, [r3, #0]
    411e:	fa5f f988 	uxtb.w	r9, r8
    4122:	4591      	cmp	r9, r2
    4124:	d236      	bcs.n	4194 <Result_process+0x84>

// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
    4126:	4b22      	ldr	r3, [pc, #136]	; (41b0 <Result_process+0xa0>)
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    4128:	4a22      	ldr	r2, [pc, #136]	; (41b4 <Result_process+0xa4>)

// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
    412a:	f813 5019 	ldrb.w	r5, [r3, r9, lsl #1]
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    412e:	eb05 0345 	add.w	r3, r5, r5, lsl #1

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    4132:	f04f 0a00 	mov.w	sl, #0
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    4136:	5cd4      	ldrb	r4, [r2, r3]

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    4138:	4b1f      	ldr	r3, [pc, #124]	; (41b8 <Result_process+0xa8>)
    413a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
    413e:	f816 b004 	ldrb.w	fp, [r6, r4]

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    4142:	3401      	adds	r4, #1
    4144:	b2e4      	uxtb	r4, r4

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
    4146:	fa5f f38a 	uxtb.w	r3, sl
    414a:	455b      	cmp	r3, fp
    414c:	4819      	ldr	r0, [pc, #100]	; (41b4 <Result_process+0xa4>)
    414e:	d218      	bcs.n	4182 <Result_process+0x72>

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    4150:	eb05 0145 	add.w	r1, r5, r5, lsl #1
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    4154:	4b19      	ldr	r3, [pc, #100]	; (41bc <Result_process+0xac>)
    4156:	f816 e004 	ldrb.w	lr, [r6, r4]

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    415a:	9301      	str	r3, [sp, #4]
    415c:	4401      	add	r1, r0

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);
    415e:	1932      	adds	r2, r6, r4

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    4160:	f853 c03e 	ldr.w	ip, [r3, lr, lsl #3]
    4164:	7848      	ldrb	r0, [r1, #1]
    4166:	7889      	ldrb	r1, [r1, #2]
    4168:	3201      	adds	r2, #1
    416a:	47e0      	blx	ip

		// Increment counters
		funcCount++;
		comboItem += ResultGuideSize( (ResultGuide*)(&macro->guide[ comboItem ]) );
    416c:	5d32      	ldrb	r2, [r6, r4]
    416e:	9b01      	ldr	r3, [sp, #4]
    4170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4174:	f10a 0a01 	add.w	sl, sl, #1
    4178:	791b      	ldrb	r3, [r3, #4]
    417a:	3301      	adds	r3, #1
    417c:	441c      	add	r4, r3
    417e:	b2e4      	uxtb	r4, r4
    4180:	e7e1      	b.n	4146 <Result_process+0x36>
	}

	// Move to next item in the sequence
	record->pos = comboItem;
    4182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4186:	5544      	strb	r4, [r0, r5]

	// If the ResultMacro is finished, remove
	if ( macro->guide[ comboItem ] == 0 )
    4188:	5d33      	ldrb	r3, [r6, r4]
    418a:	b93b      	cbnz	r3, 419c <Result_process+0x8c>
	{
		record->pos = 0;
    418c:	5543      	strb	r3, [r0, r5]
    418e:	f108 0801 	add.w	r8, r8, #1
    4192:	e7c2      	b.n	411a <Result_process+0xa>
			break;
		}
	}

	// Update the macroResultMacroPendingListSize with the tail pointer
	macroResultMacroPendingListSize = macroResultMacroPendingListTail;
    4194:	801f      	strh	r7, [r3, #0]
}
    4196:	b003      	add	sp, #12
    4198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch ( Macro_evalResultMacro( macroResultMacroPendingList[ macro ] ) )
		{
		// Re-add macros to pending list
		case ResultMacroEval_DoNothing:
		default:
			macroResultMacroPendingList[ macroResultMacroPendingListTail++ ] = macroResultMacroPendingList[ macro ];
    419c:	4b04      	ldr	r3, [pc, #16]	; (41b0 <Result_process+0xa0>)
    419e:	1c7a      	adds	r2, r7, #1
    41a0:	f833 1019 	ldrh.w	r1, [r3, r9, lsl #1]
    41a4:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    41a8:	b2d7      	uxtb	r7, r2
			break;
    41aa:	e7f0      	b.n	418e <Result_process+0x7e>
    41ac:	1fff9078 	.word	0x1fff9078
    41b0:	1fff907a 	.word	0x1fff907a
    41b4:	1fff9de4 	.word	0x1fff9de4
    41b8:	000072fc 	.word	0x000072fc
    41bc:	0000756c 	.word	0x0000756c

000041c0 <Macro_evalTriggerMacro>:
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    41c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    41c4:	4d8d      	ldr	r5, [pc, #564]	; (43fc <Macro_evalTriggerMacro+0x23c>)
    41c6:	f8df 924c 	ldr.w	r9, [pc, #588]	; 4414 <Macro_evalTriggerMacro+0x254>
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    41ca:	b085      	sub	sp, #20
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    41cc:	0043      	lsls	r3, r0, #1
    41ce:	9302      	str	r3, [sp, #8]
    41d0:	18eb      	adds	r3, r5, r3
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    41d2:	4682      	mov	sl, r0
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    41d4:	7859      	ldrb	r1, [r3, #1]
    41d6:	2901      	cmp	r1, #1
    41d8:	d10c      	bne.n	41f4 <Macro_evalTriggerMacro+0x34>
	{
		record->state = TriggerMacro_Waiting;
    41da:	2102      	movs	r1, #2
    41dc:	7059      	strb	r1, [r3, #1]
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
    41de:	f815 1010 	ldrb.w	r1, [r5, r0, lsl #1]
    41e2:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]
    41e6:	5c5b      	ldrb	r3, [r3, r1]
    41e8:	1c48      	adds	r0, r1, #1
    41ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    41ee:	4403      	add	r3, r0
    41f0:	f805 301a 	strb.w	r3, [r5, sl, lsl #1]
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    41f4:	f815 301a 	ldrb.w	r3, [r5, sl, lsl #1]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    41f8:	f859 003a 	ldr.w	r0, [r9, sl, lsl #3]
		record->state = TriggerMacro_Waiting;
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    41fc:	9300      	str	r3, [sp, #0]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    41fe:	5cc3      	ldrb	r3, [r0, r3]
    4200:	eb03 0343 	add.w	r3, r3, r3, lsl #1

	// If no combo items are left, remove the TriggerMacro from the pending list
	if ( comboLength == 0 )
    4204:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4208:	9303      	str	r3, [sp, #12]
    420a:	d101      	bne.n	4210 <Macro_evalTriggerMacro+0x50>
	{
		return TriggerMacroEval_Remove;
    420c:	2003      	movs	r0, #3
    420e:	e0f1      	b.n	43f4 <Macro_evalTriggerMacro+0x234>
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    4210:	7801      	ldrb	r1, [r0, #0]
    4212:	2303      	movs	r3, #3
    4214:	fb03 0301 	mla	r3, r3, r1, r0
	// On scan after position increment, change to TriggerMacro_Waiting state
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
    4218:	2400      	movs	r4, #0
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    421a:	785f      	ldrb	r7, [r3, #1]
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    421c:	9b00      	ldr	r3, [sp, #0]
    421e:	f103 0801 	add.w	r8, r3, #1
    4222:	fa5f f888 	uxtb.w	r8, r8
    4226:	9b00      	ldr	r3, [sp, #0]
    4228:	9a03      	ldr	r2, [sp, #12]
    422a:	4413      	add	r3, r2
    422c:	4543      	cmp	r3, r8
    422e:	db77      	blt.n	4320 <Macro_evalTriggerMacro+0x160>
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    4230:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
		// Iterate through the key buffer, comparing to each key in the combo
		for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    4234:	f04f 0b00 	mov.w	fp, #0
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    4238:	4443      	add	r3, r8
    423a:	9301      	str	r3, [sp, #4]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
    423c:	465e      	mov	r6, fp
		// Iterate through the key buffer, comparing to each key in the combo
		for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    423e:	4b70      	ldr	r3, [pc, #448]	; (4400 <Macro_evalTriggerMacro+0x240>)
    4240:	7819      	ldrb	r1, [r3, #0]
    4242:	fa5f f38b 	uxtb.w	r3, fp
    4246:	4299      	cmp	r1, r3
    4248:	f240 80d1 	bls.w	43ee <Macro_evalTriggerMacro+0x22e>
    424c:	9a01      	ldr	r2, [sp, #4]
    424e:	7811      	ldrb	r1, [r2, #0]

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
    4250:	b36f      	cbz	r7, 42ae <Macro_evalTriggerMacro+0xee>
// Votes on the given key vs. guide, long macros
// A long macro is defined as a guide with more than 1 combo
inline TriggerMacroVote Macro_evalLongTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    4252:	2901      	cmp	r1, #1
    4254:	d024      	beq.n	42a0 <Macro_evalTriggerMacro+0xe0>
    4256:	d303      	bcc.n	4260 <Macro_evalTriggerMacro+0xa0>
    4258:	2902      	cmp	r1, #2
    425a:	d123      	bne.n	42a4 <Macro_evalTriggerMacro+0xe4>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    425c:	4869      	ldr	r0, [pc, #420]	; (4404 <Macro_evalTriggerMacro+0x244>)
    425e:	e022      	b.n	42a6 <Macro_evalTriggerMacro+0xe6>
	{
	// Normal State Type
	case 0x00:
		// Depending on the state of the buffered key, make voting decision
		// Incorrect key
		if ( guide->scanCode != key->scanCode )
    4260:	4969      	ldr	r1, [pc, #420]	; (4408 <Macro_evalTriggerMacro+0x248>)
    4262:	9a01      	ldr	r2, [sp, #4]
    4264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4268:	440b      	add	r3, r1
    426a:	7890      	ldrb	r0, [r2, #2]
    426c:	7899      	ldrb	r1, [r3, #2]
    426e:	785b      	ldrb	r3, [r3, #1]
    4270:	4288      	cmp	r0, r1
    4272:	d00c      	beq.n	428e <Macro_evalTriggerMacro+0xce>
		{
			switch ( key->state )
    4274:	2b02      	cmp	r3, #2
    4276:	d040      	beq.n	42fa <Macro_evalTriggerMacro+0x13a>
    4278:	2b03      	cmp	r3, #3
    427a:	d006      	beq.n	428a <Macro_evalTriggerMacro+0xca>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    427c:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    4280:	f1dc 0300 	rsbs	r3, ip, #0
    4284:	eb43 030c 	adc.w	r3, r3, ip
    4288:	e037      	b.n	42fa <Macro_evalTriggerMacro+0x13a>
			case 0x02:
				return TriggerMacroVote_DoNothing;

			// Wrong key released, fail out if pos == 0
			case 0x03:
				return TriggerMacroVote_DoNothing | TriggerMacroVote_DoNothingRelease;
    428a:	2306      	movs	r3, #6
    428c:	e035      	b.n	42fa <Macro_evalTriggerMacro+0x13a>
		}

		// Correct key
		else
		{
			switch ( key->state )
    428e:	2b02      	cmp	r3, #2
    4290:	d027      	beq.n	42e2 <Macro_evalTriggerMacro+0x122>
    4292:	2b03      	cmp	r3, #3
    4294:	d027      	beq.n	42e6 <Macro_evalTriggerMacro+0x126>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    4296:	2b01      	cmp	r3, #1
    4298:	bf0c      	ite	eq
    429a:	2308      	moveq	r3, #8
    429c:	2300      	movne	r3, #0
    429e:	e02c      	b.n	42fa <Macro_evalTriggerMacro+0x13a>

		break;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    42a0:	485a      	ldr	r0, [pc, #360]	; (440c <Macro_evalTriggerMacro+0x24c>)
    42a2:	e000      	b.n	42a6 <Macro_evalTriggerMacro+0xe6>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    42a4:	485a      	ldr	r0, [pc, #360]	; (4410 <Macro_evalTriggerMacro+0x250>)
    42a6:	f002 f893 	bl	63d0 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    42aa:	2300      	movs	r3, #0
    42ac:	e025      	b.n	42fa <Macro_evalTriggerMacro+0x13a>

// Votes on the given key vs. guide, short macros
inline TriggerMacroVote Macro_evalShortTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    42ae:	2901      	cmp	r1, #1
    42b0:	d01b      	beq.n	42ea <Macro_evalTriggerMacro+0x12a>
    42b2:	d303      	bcc.n	42bc <Macro_evalTriggerMacro+0xfc>
    42b4:	2902      	cmp	r1, #2
    42b6:	d11a      	bne.n	42ee <Macro_evalTriggerMacro+0x12e>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    42b8:	4852      	ldr	r0, [pc, #328]	; (4404 <Macro_evalTriggerMacro+0x244>)
    42ba:	e019      	b.n	42f0 <Macro_evalTriggerMacro+0x130>
	switch ( guide->type )
	{
	// Normal State Type
	case 0x00:
		// For short TriggerMacros completely ignore incorrect keys
		if ( guide->scanCode == key->scanCode )
    42bc:	4952      	ldr	r1, [pc, #328]	; (4408 <Macro_evalTriggerMacro+0x248>)
    42be:	9a01      	ldr	r2, [sp, #4]
    42c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    42c4:	440b      	add	r3, r1
    42c6:	7890      	ldrb	r0, [r2, #2]
    42c8:	7899      	ldrb	r1, [r3, #2]
    42ca:	4288      	cmp	r0, r1
    42cc:	d114      	bne.n	42f8 <Macro_evalTriggerMacro+0x138>
		{
			switch ( key->state )
    42ce:	785b      	ldrb	r3, [r3, #1]
    42d0:	2b02      	cmp	r3, #2
    42d2:	d006      	beq.n	42e2 <Macro_evalTriggerMacro+0x122>
    42d4:	2b03      	cmp	r3, #3
    42d6:	d006      	beq.n	42e6 <Macro_evalTriggerMacro+0x126>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    42d8:	2b01      	cmp	r3, #1
    42da:	bf0c      	ite	eq
    42dc:	2308      	moveq	r3, #8
    42de:	2302      	movne	r3, #2
    42e0:	e00b      	b.n	42fa <Macro_evalTriggerMacro+0x13a>
			case 0x01:
				return TriggerMacroVote_Pass;

			// Correct key, held, possible passing or release
			case 0x02:
				return TriggerMacroVote_PassRelease;
    42e2:	2318      	movs	r3, #24
    42e4:	e009      	b.n	42fa <Macro_evalTriggerMacro+0x13a>

			// Correct key, released, possible release
			case 0x03:
				return TriggerMacroVote_Release;
    42e6:	2310      	movs	r3, #16
    42e8:	e007      	b.n	42fa <Macro_evalTriggerMacro+0x13a>

		return TriggerMacroVote_DoNothing;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    42ea:	4848      	ldr	r0, [pc, #288]	; (440c <Macro_evalTriggerMacro+0x24c>)
    42ec:	e000      	b.n	42f0 <Macro_evalTriggerMacro+0x130>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    42ee:	4848      	ldr	r0, [pc, #288]	; (4410 <Macro_evalTriggerMacro+0x250>)
    42f0:	f002 f86e 	bl	63d0 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    42f4:	463b      	mov	r3, r7
    42f6:	e000      	b.n	42fa <Macro_evalTriggerMacro+0x13a>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    42f8:	2302      	movs	r3, #2
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    42fa:	4333      	orrs	r3, r6
    42fc:	b2de      	uxtb	r6, r3
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
			if ( vote >= TriggerMacroVote_Pass )
    42fe:	2e07      	cmp	r6, #7
    4300:	f10b 0b01 	add.w	fp, fp, #1
    4304:	d99b      	bls.n	423e <Macro_evalTriggerMacro+0x7e>
			{
				vote &= TriggerMacroVote_Release | TriggerMacroVote_PassRelease | TriggerMacroVote_Pass;
    4306:	f006 0618 	and.w	r6, r6, #24
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    430a:	b91f      	cbnz	r7, 4314 <Macro_evalTriggerMacro+0x154>
    430c:	2e07      	cmp	r6, #7
    430e:	d801      	bhi.n	4314 <Macro_evalTriggerMacro+0x154>
			vote |= TriggerMacroVote_Fail;
    4310:	f046 0601 	orr.w	r6, r6, #1
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    4314:	f108 0803 	add.w	r8, r8, #3
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
			vote |= TriggerMacroVote_Fail;

		// After voting, append to overall vote
		overallVote |= vote;
    4318:	4334      	orrs	r4, r6
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    431a:	fa5f f888 	uxtb.w	r8, r8
    431e:	e782      	b.n	4226 <Macro_evalTriggerMacro+0x66>
		overallVote |= vote;
	}

	// If no pass vote was found after scanning the entire combo
	// And this is the first position in the combo, just remove it (nothing important happened)
	if ( longMacro && overallVote & TriggerMacroVote_DoNothingRelease && pos == 0 )
    4320:	b12f      	cbz	r7, 432e <Macro_evalTriggerMacro+0x16e>
    4322:	0760      	lsls	r0, r4, #29
    4324:	d503      	bpl.n	432e <Macro_evalTriggerMacro+0x16e>
    4326:	9a00      	ldr	r2, [sp, #0]
    4328:	b90a      	cbnz	r2, 432e <Macro_evalTriggerMacro+0x16e>
		overallVote |= TriggerMacroVote_Fail;
    432a:	f044 0401 	orr.w	r4, r4, #1

	// Decide new state of macro after voting
	// Fail macro, remove from pending list
	if ( overallVote & TriggerMacroVote_Fail )
    432e:	f014 0001 	ands.w	r0, r4, #1
    4332:	f47f af6b 	bne.w	420c <Macro_evalTriggerMacro+0x4c>
	{
		return TriggerMacroEval_Remove;
	}
	// Do nothing, incorrect key is being held or released
	else if ( overallVote & TriggerMacroVote_DoNothing && longMacro )
    4336:	07a1      	lsls	r1, r4, #30
    4338:	d501      	bpl.n	433e <Macro_evalTriggerMacro+0x17e>
    433a:	2f00      	cmp	r7, #0
    433c:	d15a      	bne.n	43f4 <Macro_evalTriggerMacro+0x234>
	{
		// Just doing nothing :)
	}
	// If ready for transition and in Press state, set to Waiting and increment combo position
	// Position is incremented (and possibly remove the macro from the pending list) on the next iteration
	else if ( overallVote & TriggerMacroVote_Release && record->state == TriggerMacro_Press )
    433e:	f004 0110 	and.w	r1, r4, #16
    4342:	f001 00ff 	and.w	r0, r1, #255	; 0xff
    4346:	b1e1      	cbz	r1, 4382 <Macro_evalTriggerMacro+0x1c2>
    4348:	9a02      	ldr	r2, [sp, #8]
    434a:	18a9      	adds	r1, r5, r2
    434c:	784e      	ldrb	r6, [r1, #1]
    434e:	b9c6      	cbnz	r6, 4382 <Macro_evalTriggerMacro+0x1c2>
	{
		record->state = TriggerMacro_Release;
    4350:	2301      	movs	r3, #1
    4352:	704b      	strb	r3, [r1, #1]

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
    4354:	4b29      	ldr	r3, [pc, #164]	; (43fc <Macro_evalTriggerMacro+0x23c>)
    4356:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    435a:	f813 301a 	ldrb.w	r3, [r3, sl, lsl #1]
    435e:	5cc8      	ldrb	r0, [r1, r3]
    4360:	2203      	movs	r2, #3
    4362:	3301      	adds	r3, #1
    4364:	fb12 3300 	smlabb	r3, r2, r0, r3
    4368:	5ccb      	ldrb	r3, [r1, r3]
    436a:	b143      	cbz	r3, 437e <Macro_evalTriggerMacro+0x1be>
		return TriggerMacroEval_DoResultAndRemove;
	}

	// If this is a short macro, just remove it
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
    436c:	2f00      	cmp	r7, #0
    436e:	f43f af4d 	beq.w	420c <Macro_evalTriggerMacro+0x4c>
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
    4372:	2000      	movs	r0, #0
    4374:	e03e      	b.n	43f4 <Macro_evalTriggerMacro+0x234>
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    4376:	5cc3      	ldrb	r3, [r0, r3]
    4378:	b353      	cbz	r3, 43d0 <Macro_evalTriggerMacro+0x210>
			{
				// Only ever trigger result once, on press
				if ( overallVote == TriggerMacroVote_Pass )
    437a:	2c08      	cmp	r4, #8
    437c:	d1f6      	bne.n	436c <Macro_evalTriggerMacro+0x1ac>
	{
		record->state = TriggerMacro_Release;

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
			return TriggerMacroEval_DoResultAndRemove;
    437e:	2002      	movs	r0, #2
    4380:	e038      	b.n	43f4 <Macro_evalTriggerMacro+0x234>
	}
	// If passing and in Waiting state, set macro state to Press
	else if ( overallVote & TriggerMacroVote_Pass
    4382:	0722      	lsls	r2, r4, #28
    4384:	d530      	bpl.n	43e8 <Macro_evalTriggerMacro+0x228>
		&& ( record->state == TriggerMacro_Waiting || record->state == TriggerMacro_Press ) )
    4386:	9a02      	ldr	r2, [sp, #8]
    4388:	4415      	add	r5, r2
    438a:	7869      	ldrb	r1, [r5, #1]
    438c:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
    4390:	d12a      	bne.n	43e8 <Macro_evalTriggerMacro+0x228>
	{
		record->state = TriggerMacro_Press;
    4392:	7069      	strb	r1, [r5, #1]

		// If in press state, and this is the final combo, send request for ResultMacro
		// Check to see if the result macro only has a single element
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
    4394:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    4398:	440b      	add	r3, r1
    439a:	7859      	ldrb	r1, [r3, #1]
    439c:	2900      	cmp	r1, #0
    439e:	d1e5      	bne.n	436c <Macro_evalTriggerMacro+0x1ac>
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    43a0:	4b1c      	ldr	r3, [pc, #112]	; (4414 <Macro_evalTriggerMacro+0x254>)
    43a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    43a6:	7918      	ldrb	r0, [r3, #4]
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    43a8:	4b1b      	ldr	r3, [pc, #108]	; (4418 <Macro_evalTriggerMacro+0x258>)
    43aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    43ae:	7806      	ldrb	r6, [r0, #0]
inline uint8_t Macro_isLongResultMacro( const ResultMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
    43b0:	2301      	movs	r3, #1
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    43b2:	b2cd      	uxtb	r5, r1
    43b4:	42b5      	cmp	r5, r6
    43b6:	d2de      	bcs.n	4376 <Macro_evalTriggerMacro+0x1b6>
		position += ResultGuideSize( (ResultGuide*)&macro->guide[ position ] );
    43b8:	f810 e003 	ldrb.w	lr, [r0, r3]
    43bc:	4d17      	ldr	r5, [pc, #92]	; (441c <Macro_evalTriggerMacro+0x25c>)
    43be:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
    43c2:	3101      	adds	r1, #1
    43c4:	792d      	ldrb	r5, [r5, #4]
    43c6:	3501      	adds	r5, #1
    43c8:	fa53 f385 	uxtab	r3, r3, r5
    43cc:	b2db      	uxtb	r3, r3
    43ce:	e7f0      	b.n	43b2 <Macro_evalTriggerMacro+0x1f2>
    43d0:	4b10      	ldr	r3, [pc, #64]	; (4414 <Macro_evalTriggerMacro+0x254>)
    43d2:	f853 203a 	ldr.w	r2, [r3, sl, lsl #3]
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    43d6:	7811      	ldrb	r1, [r2, #0]
    43d8:	2001      	movs	r0, #1
    43da:	2303      	movs	r3, #3
    43dc:	fb13 0301 	smlabb	r3, r3, r1, r0
			}
			// Short result macro
			else
			{
				// Only trigger result once, on press, if long trigger (more than 1 combo)
				if ( Macro_isLongTriggerMacro( macro ) )
    43e0:	5cd3      	ldrb	r3, [r2, r3]
    43e2:	2b00      	cmp	r3, #0
    43e4:	d1cb      	bne.n	437e <Macro_evalTriggerMacro+0x1be>
    43e6:	e005      	b.n	43f4 <Macro_evalTriggerMacro+0x234>
			}
		}
	}
	// Otherwise, just remove the macro on key release
	// One more result has to be called to indicate to the ResultMacro that the key transitioned to the release state
	else if ( overallVote & TriggerMacroVote_Release )
    43e8:	2800      	cmp	r0, #0
    43ea:	d1c8      	bne.n	437e <Macro_evalTriggerMacro+0x1be>
    43ec:	e7be      	b.n	436c <Macro_evalTriggerMacro+0x1ac>
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    43ee:	2f00      	cmp	r7, #0
    43f0:	d08e      	beq.n	4310 <Macro_evalTriggerMacro+0x150>
    43f2:	e78f      	b.n	4314 <Macro_evalTriggerMacro+0x154>
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
}
    43f4:	b005      	add	sp, #20
    43f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43fa:	bf00      	nop
    43fc:	1fff9f4d 	.word	0x1fff9f4d
    4400:	1fff906a 	.word	0x1fff906a
    4404:	0000876f 	.word	0x0000876f
    4408:	1fff9d12 	.word	0x1fff9d12
    440c:	00008734 	.word	0x00008734
    4410:	000087ad 	.word	0x000087ad
    4414:	00007748 	.word	0x00007748
    4418:	000072fc 	.word	0x000072fc
    441c:	0000756c 	.word	0x0000756c

00004420 <Trigger_setup>:
	return 0;
}


void Trigger_setup()
{
    4420:	2300      	movs	r3, #0
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
    4422:	4a05      	ldr	r2, [pc, #20]	; (4438 <Trigger_setup+0x18>)
    4424:	2000      	movs	r0, #0
    4426:	1899      	adds	r1, r3, r2
    4428:	5498      	strb	r0, [r3, r2]
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    442a:	2202      	movs	r2, #2
    442c:	4413      	add	r3, r2


void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    442e:	2bc8      	cmp	r3, #200	; 0xc8
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    4430:	704a      	strb	r2, [r1, #1]


void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    4432:	d1f6      	bne.n	4422 <Trigger_setup+0x2>
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
	}
}
    4434:	4770      	bx	lr
    4436:	bf00      	nop
    4438:	1fff9f4d 	.word	0x1fff9f4d

0000443c <Trigger_process>:


void Trigger_process()
{
    443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    4440:	2500      	movs	r5, #0

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    4442:	4b36      	ldr	r3, [pc, #216]	; (451c <Trigger_process+0xe0>)
    4444:	781b      	ldrb	r3, [r3, #0]
    4446:	b2e8      	uxtb	r0, r5
    4448:	4283      	cmp	r3, r0
    444a:	d93b      	bls.n	44c4 <Trigger_process+0x88>
	{
		// TODO LED States
		// TODO Analog Switches
		// Only add TriggerMacro to pending list if key was pressed (not held, released or off)
		if ( macroTriggerListBuffer[ key ].state == 0x00 && macroTriggerListBuffer[ key ].state != 0x01 )
    444c:	4b34      	ldr	r3, [pc, #208]	; (4520 <Trigger_process+0xe4>)
    444e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4452:	4418      	add	r0, r3
    4454:	7841      	ldrb	r1, [r0, #1]
    4456:	b399      	cbz	r1, 44c0 <Trigger_process+0x84>
		// TODO Analog
		// If this is a release case, indicate to layer lookup for possible latch expiry
		uint8_t latch_expire = macroTriggerListBuffer[ key ].state == 0x03;

		// Lookup Trigger List
		nat_ptr_t *triggerList = Macro_layerLookup( &macroTriggerListBuffer[ key ], latch_expire );
    4458:	1ecb      	subs	r3, r1, #3
    445a:	4259      	negs	r1, r3
    445c:	4159      	adcs	r1, r3
    445e:	f7ff fb4d 	bl	3afc <Macro_layerLookup>

		// If there was an error during lookup, skip
		if ( triggerList == 0 )
    4462:	b368      	cbz	r0, 44c0 <Trigger_process+0x84>
    4464:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 452c <Trigger_process+0xf0>
			continue;

		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];
    4468:	f8d0 c000 	ldr.w	ip, [r0]
    446c:	f8be 3000 	ldrh.w	r3, [lr]

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    4470:	2201      	movs	r2, #1
    4472:	f10c 0101 	add.w	r1, ip, #1
    4476:	428a      	cmp	r2, r1
    4478:	d220      	bcs.n	44bc <Trigger_process+0x80>
		{
			// Lookup trigger macro index
			var_uint_t triggerMacroIndex = triggerList[ macro ];
    447a:	f810 4022 	ldrb.w	r4, [r0, r2, lsl #2]
    447e:	2600      	movs	r6, #0

			// Iterate over macroTriggerMacroPendingList to see if any macro in the scancode's
			//  triggerList needs to be added
			var_uint_t pending = 0;
			for ( ; pending < macroTriggerMacroPendingListSize; pending++ )
    4480:	b2f7      	uxtb	r7, r6
    4482:	b2b9      	uxth	r1, r7
    4484:	4299      	cmp	r1, r3
    4486:	d207      	bcs.n	4498 <Trigger_process+0x5c>
			{
				// Stop scanning if the trigger macro index is found in the pending list
				if ( macroTriggerMacroPendingList[ pending ] == triggerMacroIndex )
    4488:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4524 <Trigger_process+0xe8>
    448c:	f838 7017 	ldrh.w	r7, [r8, r7, lsl #1]
    4490:	42a7      	cmp	r7, r4
    4492:	f106 0601 	add.w	r6, r6, #1
    4496:	d1f3      	bne.n	4480 <Trigger_process+0x44>
					break;
			}

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
    4498:	4299      	cmp	r1, r3
    449a:	d10c      	bne.n	44b6 <Trigger_process+0x7a>
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    449c:	4e21      	ldr	r6, [pc, #132]	; (4524 <Trigger_process+0xe8>)
    449e:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
    44a2:	4921      	ldr	r1, [pc, #132]	; (4528 <Trigger_process+0xec>)
    44a4:	2600      	movs	r6, #0
    44a6:	f801 6014 	strb.w	r6, [r1, r4, lsl #1]
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    44aa:	eb01 0144 	add.w	r1, r1, r4, lsl #1

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    44ae:	3301      	adds	r3, #1

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    44b0:	2402      	movs	r4, #2

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    44b2:	b29b      	uxth	r3, r3

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    44b4:	704c      	strb	r4, [r1, #1]
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    44b6:	3201      	adds	r2, #1
    44b8:	b2d2      	uxtb	r2, r2
    44ba:	e7da      	b.n	4472 <Trigger_process+0x36>
    44bc:	f8ae 3000 	strh.w	r3, [lr]
    44c0:	3501      	adds	r5, #1
    44c2:	e7be      	b.n	4442 <Trigger_process+0x6>

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    44c4:	2700      	movs	r7, #0
    44c6:	463e      	mov	r6, r7
	// Tail pointer for macroTriggerMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroTriggerMacroPendingListTail = 0;

	// Iterate through the pending TriggerMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    44c8:	4b18      	ldr	r3, [pc, #96]	; (452c <Trigger_process+0xf0>)
    44ca:	881a      	ldrh	r2, [r3, #0]
    44cc:	b2fc      	uxtb	r4, r7
    44ce:	4294      	cmp	r4, r2
    44d0:	d221      	bcs.n	4516 <Trigger_process+0xda>
	{
		switch ( Macro_evalTriggerMacro( macroTriggerMacroPendingList[ macro ] ) )
    44d2:	4d14      	ldr	r5, [pc, #80]	; (4524 <Trigger_process+0xe8>)
    44d4:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
    44d8:	f7ff fe72 	bl	41c0 <Macro_evalTriggerMacro>
    44dc:	2802      	cmp	r0, #2
    44de:	d011      	beq.n	4504 <Trigger_process+0xc8>
    44e0:	2803      	cmp	r0, #3
    44e2:	d016      	beq.n	4512 <Trigger_process+0xd6>
    44e4:	2801      	cmp	r0, #1
    44e6:	d106      	bne.n	44f6 <Trigger_process+0xba>
		{
		// Trigger Result Macro (purposely falling through)
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    44e8:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    44ec:	4b10      	ldr	r3, [pc, #64]	; (4530 <Trigger_process+0xf4>)
    44ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    44f2:	f7ff fbff 	bl	3cf4 <Macro_appendResultMacroToPendingList>

		default:
			macroTriggerMacroPendingList[ macroTriggerMacroPendingListTail++ ] = macroTriggerMacroPendingList[ macro ];
    44f6:	1c73      	adds	r3, r6, #1
    44f8:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
    44fc:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
    4500:	b2de      	uxtb	r6, r3
			break;
    4502:	e006      	b.n	4512 <Trigger_process+0xd6>

		// Trigger Result Macro and Remove (purposely falling through)
		case TriggerMacroEval_DoResultAndRemove:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    4504:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    4508:	4b09      	ldr	r3, [pc, #36]	; (4530 <Trigger_process+0xf4>)
    450a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    450e:	f7ff fbf1 	bl	3cf4 <Macro_appendResultMacroToPendingList>
    4512:	3701      	adds	r7, #1
    4514:	e7d8      	b.n	44c8 <Trigger_process+0x8c>
			break;
		}
	}

	// Update the macroTriggerMacroPendingListSize with the tail pointer
	macroTriggerMacroPendingListSize = macroTriggerMacroPendingListTail;
    4516:	801e      	strh	r6, [r3, #0]
    4518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    451c:	1fff906a 	.word	0x1fff906a
    4520:	1fff9d12 	.word	0x1fff9d12
    4524:	1fff913c 	.word	0x1fff913c
    4528:	1fff9f4d 	.word	0x1fff9f4d
    452c:	1fff913a 	.word	0x1fff913a
    4530:	00007748 	.word	0x00007748

00004534 <cliFunc_sendKeys>:


void cliFunc_sendKeys( char* args )
{
	// Copy USBKeys_KeysCLI to USBKeys_Keys
	for ( uint8_t key = 0; key < USBKeys_SentCLI; ++key )
    4534:	4b04      	ldr	r3, [pc, #16]	; (4548 <cliFunc_sendKeys+0x14>)
	{
		// TODO
		//USBKeys_Keys[key] = USBKeys_KeysCLI[key];
	}
	USBKeys_Sent = USBKeys_SentCLI;
    4536:	781a      	ldrb	r2, [r3, #0]
    4538:	4b04      	ldr	r3, [pc, #16]	; (454c <cliFunc_sendKeys+0x18>)
    453a:	701a      	strb	r2, [r3, #0]

	// Set modifier byte
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
    453c:	4b04      	ldr	r3, [pc, #16]	; (4550 <cliFunc_sendKeys+0x1c>)
    453e:	781a      	ldrb	r2, [r3, #0]
    4540:	4b04      	ldr	r3, [pc, #16]	; (4554 <cliFunc_sendKeys+0x20>)
    4542:	701a      	strb	r2, [r3, #0]
    4544:	4770      	bx	lr
    4546:	bf00      	nop
    4548:	1fff9216 	.word	0x1fff9216
    454c:	1fff9214 	.word	0x1fff9214
    4550:	1fff921c 	.word	0x1fff921c
    4554:	1fff9208 	.word	0x1fff9208

00004558 <cliFunc_kbdProtocol>:


// ----- CLI Command Functions -----

void cliFunc_kbdProtocol( char* args )
{
    4558:	b508      	push	{r3, lr}
	print( NL );
    455a:	4806      	ldr	r0, [pc, #24]	; (4574 <cliFunc_kbdProtocol+0x1c>)
    455c:	f001 ff38 	bl	63d0 <_print>
	info_msg("Keyboard Protocol: ");
    4560:	4805      	ldr	r0, [pc, #20]	; (4578 <cliFunc_kbdProtocol+0x20>)
    4562:	f001 ff35 	bl	63d0 <_print>
	printInt8( USBKeys_Protocol );
    4566:	4b05      	ldr	r3, [pc, #20]	; (457c <cliFunc_kbdProtocol+0x24>)
    4568:	7818      	ldrb	r0, [r3, #0]
}
    456a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_kbdProtocol( char* args )
{
	print( NL );
	info_msg("Keyboard Protocol: ");
	printInt8( USBKeys_Protocol );
    456e:	f001 bf5e 	b.w	642e <printInt8>
    4572:	bf00      	nop
    4574:	000093eb 	.word	0x000093eb
    4578:	00008a1d 	.word	0x00008a1d
    457c:	1fff8cbc 	.word	0x1fff8cbc

00004580 <cliFunc_readLEDs>:
	}
}


void cliFunc_readLEDs( char* args )
{
    4580:	b508      	push	{r3, lr}
	print( NL );
    4582:	4806      	ldr	r0, [pc, #24]	; (459c <cliFunc_readLEDs+0x1c>)
    4584:	f001 ff24 	bl	63d0 <_print>
	info_msg("LED State: ");
    4588:	4805      	ldr	r0, [pc, #20]	; (45a0 <cliFunc_readLEDs+0x20>)
    458a:	f001 ff21 	bl	63d0 <_print>
	printInt8( USBKeys_LEDs );
    458e:	4b05      	ldr	r3, [pc, #20]	; (45a4 <cliFunc_readLEDs+0x24>)
    4590:	7818      	ldrb	r0, [r3, #0]
}
    4592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_readLEDs( char* args )
{
	print( NL );
	info_msg("LED State: ");
	printInt8( USBKeys_LEDs );
    4596:	f001 bf4a 	b.w	642e <printInt8>
    459a:	bf00      	nop
    459c:	000093eb 	.word	0x000093eb
    45a0:	00008a43 	.word	0x00008a43
    45a4:	1fff9215 	.word	0x1fff9215

000045a8 <cliFunc_setKeys>:
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
}


void cliFunc_setKeys( char* args )
{
    45a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    45aa:	4b0b      	ldr	r3, [pc, #44]	; (45d8 <cliFunc_setKeys+0x30>)

void cliFunc_setKeys( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    45ac:	9001      	str	r0, [sp, #4]

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    45ae:	2200      	movs	r2, #0
    45b0:	701a      	strb	r2, [r3, #0]
    45b2:	461c      	mov	r4, r3
    45b4:	7823      	ldrb	r3, [r4, #0]
    45b6:	4d08      	ldr	r5, [pc, #32]	; (45d8 <cliFunc_setKeys+0x30>)
    45b8:	2b05      	cmp	r3, #5
    45ba:	d80b      	bhi.n	45d4 <cliFunc_setKeys+0x2c>
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    45bc:	9801      	ldr	r0, [sp, #4]
    45be:	4669      	mov	r1, sp
    45c0:	aa01      	add	r2, sp, #4
    45c2:	f001 fc3d 	bl	5e40 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    45c6:	9b00      	ldr	r3, [sp, #0]
    45c8:	781b      	ldrb	r3, [r3, #0]
    45ca:	b11b      	cbz	r3, 45d4 <cliFunc_setKeys+0x2c>
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    45cc:	782b      	ldrb	r3, [r5, #0]
    45ce:	3301      	adds	r3, #1
    45d0:	702b      	strb	r3, [r5, #0]
    45d2:	e7ef      	b.n	45b4 <cliFunc_setKeys+0xc>

		// Add the USB code to be sent
		// TODO
		//USBKeys_KeysCLI[USBKeys_SentCLI] = numToInt( arg1Ptr );
	}
}
    45d4:	b003      	add	sp, #12
    45d6:	bd30      	pop	{r4, r5, pc}
    45d8:	1fff9216 	.word	0x1fff9216

000045dc <cliFunc_outputDebug>:
	printInt8( USBKeys_Protocol );
}


void cliFunc_outputDebug( char* args )
{
    45dc:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    45de:	4c07      	ldr	r4, [pc, #28]	; (45fc <cliFunc_outputDebug+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    45e0:	4669      	mov	r1, sp
    45e2:	aa01      	add	r2, sp, #4
    45e4:	f001 fc2c 	bl	5e40 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    45e8:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    45ea:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    45ec:	7023      	strb	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    45ee:	7803      	ldrb	r3, [r0, #0]
    45f0:	b113      	cbz	r3, 45f8 <cliFunc_outputDebug+0x1c>
	{
		Output_DebugMode = (uint16_t)numToInt( arg1Ptr );
    45f2:	f001 ffeb 	bl	65cc <numToInt>
    45f6:	7020      	strb	r0, [r4, #0]
	}
}
    45f8:	b002      	add	sp, #8
    45fa:	bd10      	pop	{r4, pc}
    45fc:	1fff921d 	.word	0x1fff921d

00004600 <cliFunc_setMod>:
	}
}


void cliFunc_setMod( char* args )
{
    4600:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    4602:	4669      	mov	r1, sp
    4604:	aa01      	add	r2, sp, #4
    4606:	f001 fc1b 	bl	5e40 <CLI_argumentIsolation>

	USBKeys_ModifiersCLI = numToInt( arg1Ptr );
    460a:	9800      	ldr	r0, [sp, #0]
    460c:	f001 ffde 	bl	65cc <numToInt>
    4610:	4b02      	ldr	r3, [pc, #8]	; (461c <cliFunc_setMod+0x1c>)
    4612:	7018      	strb	r0, [r3, #0]
}
    4614:	b003      	add	sp, #12
    4616:	f85d fb04 	ldr.w	pc, [sp], #4
    461a:	bf00      	nop
    461c:	1fff921c 	.word	0x1fff921c

00004620 <cliFunc_usbInitTime>:

void cliFunc_usbInitTime( char* args )
{
    4620:	b508      	push	{r3, lr}
	// Calculate overall USB initialization time
	// XXX A protocol analyzer will be more accurate, however, this is built-in and easier to collect data
	print(NL);
    4622:	480d      	ldr	r0, [pc, #52]	; (4658 <cliFunc_usbInitTime+0x38>)
    4624:	f001 fed4 	bl	63d0 <_print>
	info_msg("USB Init Time: ");
    4628:	480c      	ldr	r0, [pc, #48]	; (465c <cliFunc_usbInitTime+0x3c>)
    462a:	f001 fed1 	bl	63d0 <_print>
	printInt32( USBInit_TimeEnd - USBInit_TimeStart );
    462e:	4b0c      	ldr	r3, [pc, #48]	; (4660 <cliFunc_usbInitTime+0x40>)
    4630:	6818      	ldr	r0, [r3, #0]
    4632:	4b0c      	ldr	r3, [pc, #48]	; (4664 <cliFunc_usbInitTime+0x44>)
    4634:	681b      	ldr	r3, [r3, #0]
    4636:	1ac0      	subs	r0, r0, r3
    4638:	f001 ff36 	bl	64a8 <printInt32>
	print(" ms - ");
    463c:	480a      	ldr	r0, [pc, #40]	; (4668 <cliFunc_usbInitTime+0x48>)
    463e:	f001 fec7 	bl	63d0 <_print>
	printInt16( USBInit_Ticks );
    4642:	4b0a      	ldr	r3, [pc, #40]	; (466c <cliFunc_usbInitTime+0x4c>)
    4644:	8818      	ldrh	r0, [r3, #0]
    4646:	b280      	uxth	r0, r0
    4648:	f001 ff0f 	bl	646a <printInt16>
	print(" ticks");
    464c:	4808      	ldr	r0, [pc, #32]	; (4670 <cliFunc_usbInitTime+0x50>)
}
    464e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	print(NL);
	info_msg("USB Init Time: ");
	printInt32( USBInit_TimeEnd - USBInit_TimeStart );
	print(" ms - ");
	printInt16( USBInit_Ticks );
	print(" ticks");
    4652:	f001 bebd 	b.w	63d0 <_print>
    4656:	bf00      	nop
    4658:	000093eb 	.word	0x000093eb
    465c:	00008a61 	.word	0x00008a61
    4660:	1fffa018 	.word	0x1fffa018
    4664:	1fffa058 	.word	0x1fffa058
    4668:	00008a83 	.word	0x00008a83
    466c:	1fffa01e 	.word	0x1fffa01e
    4670:	00008a8a 	.word	0x00008a8a

00004674 <Output_consCtrlSend_capability>:
// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4674:	29ff      	cmp	r1, #255	; 0xff
}


// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    4676:	b530      	push	{r4, r5, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4678:	d103      	bne.n	4682 <Output_consCtrlSend_capability+0xe>
    467a:	28ff      	cmp	r0, #255	; 0xff
    467c:	d101      	bne.n	4682 <Output_consCtrlSend_capability+0xe>
	{
		print("Output_consCtrlSend(consCode)");
    467e:	480e      	ldr	r0, [pc, #56]	; (46b8 <Output_consCtrlSend_capability+0x44>)
    4680:	e003      	b.n	468a <Output_consCtrlSend_capability+0x16>
		return;
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
    4682:	4b0e      	ldr	r3, [pc, #56]	; (46bc <Output_consCtrlSend_capability+0x48>)
    4684:	781b      	ldrb	r3, [r3, #0]
    4686:	b923      	cbnz	r3, 4692 <Output_consCtrlSend_capability+0x1e>
	{
		warn_print("Consumer Control is not implemented for Boot Mode");
    4688:	480d      	ldr	r0, [pc, #52]	; (46c0 <Output_consCtrlSend_capability+0x4c>)
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
#endif
}
    468a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
	{
		warn_print("Consumer Control is not implemented for Boot Mode");
    468e:	f001 be9f 	b.w	63d0 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    4692:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    4696:	2b01      	cmp	r3, #1
    4698:	4c0a      	ldr	r4, [pc, #40]	; (46c4 <Output_consCtrlSend_capability+0x50>)
    469a:	d109      	bne.n	46b0 <Output_consCtrlSend_capability+0x3c>
		USBKeys_Changed |= USBKeyChangeState_Consumer;
    469c:	4d0a      	ldr	r5, [pc, #40]	; (46c8 <Output_consCtrlSend_capability+0x54>)
    469e:	782b      	ldrb	r3, [r5, #0]
    46a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    46a4:	702b      	strb	r3, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    46a6:	b919      	cbnz	r1, 46b0 <Output_consCtrlSend_capability+0x3c>
    46a8:	2803      	cmp	r0, #3
    46aa:	d101      	bne.n	46b0 <Output_consCtrlSend_capability+0x3c>
	{
		USBKeys_ConsCtrl = 0;
    46ac:	8021      	strh	r1, [r4, #0]
		return;
    46ae:	bd30      	pop	{r4, r5, pc}
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
    46b0:	8813      	ldrh	r3, [r2, #0]
    46b2:	8023      	strh	r3, [r4, #0]
    46b4:	bd30      	pop	{r4, r5, pc}
    46b6:	bf00      	nop
    46b8:	00008a91 	.word	0x00008a91
    46bc:	1fff8cbc 	.word	0x1fff8cbc
    46c0:	00008aaf 	.word	0x00008aaf
    46c4:	1fffa05c 	.word	0x1fffa05c
    46c8:	1fff9209 	.word	0x1fff9209

000046cc <Output_noneSend_capability>:
// Ignores the given key status update
// Used to prevent fall-through, this is the None keyword in KLL
void Output_noneSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    46cc:	29ff      	cmp	r1, #255	; 0xff
    46ce:	d104      	bne.n	46da <Output_noneSend_capability+0xe>
    46d0:	28ff      	cmp	r0, #255	; 0xff
    46d2:	d102      	bne.n	46da <Output_noneSend_capability+0xe>
	{
		print("Output_noneSend()");
    46d4:	4801      	ldr	r0, [pc, #4]	; (46dc <Output_noneSend_capability+0x10>)
    46d6:	f001 be7b 	b.w	63d0 <_print>
    46da:	4770      	bx	lr
    46dc:	00008af8 	.word	0x00008af8

000046e0 <Output_sysCtrlSend_capability>:
// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    46e0:	29ff      	cmp	r1, #255	; 0xff
}


// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    46e2:	b530      	push	{r4, r5, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    46e4:	d103      	bne.n	46ee <Output_sysCtrlSend_capability+0xe>
    46e6:	28ff      	cmp	r0, #255	; 0xff
    46e8:	d101      	bne.n	46ee <Output_sysCtrlSend_capability+0xe>
	{
		print("Output_sysCtrlSend(sysCode)");
    46ea:	480e      	ldr	r0, [pc, #56]	; (4724 <Output_sysCtrlSend_capability+0x44>)
    46ec:	e003      	b.n	46f6 <Output_sysCtrlSend_capability+0x16>
		return;
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
    46ee:	4b0e      	ldr	r3, [pc, #56]	; (4728 <Output_sysCtrlSend_capability+0x48>)
    46f0:	781b      	ldrb	r3, [r3, #0]
    46f2:	b923      	cbnz	r3, 46fe <Output_sysCtrlSend_capability+0x1e>
	{
		warn_print("System Control is not implemented for Boot Mode");
    46f4:	480d      	ldr	r0, [pc, #52]	; (472c <Output_sysCtrlSend_capability+0x4c>)
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
#endif
}
    46f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
	{
		warn_print("System Control is not implemented for Boot Mode");
    46fa:	f001 be69 	b.w	63d0 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    46fe:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    4702:	2b01      	cmp	r3, #1
    4704:	4c0a      	ldr	r4, [pc, #40]	; (4730 <Output_sysCtrlSend_capability+0x50>)
    4706:	d109      	bne.n	471c <Output_sysCtrlSend_capability+0x3c>
		USBKeys_Changed |= USBKeyChangeState_System;
    4708:	4d0a      	ldr	r5, [pc, #40]	; (4734 <Output_sysCtrlSend_capability+0x54>)
    470a:	782b      	ldrb	r3, [r5, #0]
    470c:	f043 0320 	orr.w	r3, r3, #32
    4710:	702b      	strb	r3, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    4712:	b919      	cbnz	r1, 471c <Output_sysCtrlSend_capability+0x3c>
    4714:	2803      	cmp	r0, #3
    4716:	d101      	bne.n	471c <Output_sysCtrlSend_capability+0x3c>
	{
		USBKeys_SysCtrl = 0;
    4718:	7021      	strb	r1, [r4, #0]
		return;
    471a:	bd30      	pop	{r4, r5, pc}
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
    471c:	7813      	ldrb	r3, [r2, #0]
    471e:	7023      	strb	r3, [r4, #0]
    4720:	bd30      	pop	{r4, r5, pc}
    4722:	bf00      	nop
    4724:	00008b0a 	.word	0x00008b0a
    4728:	1fff8cbc 	.word	0x1fff8cbc
    472c:	00008b26 	.word	0x00008b26
    4730:	1fffa01c 	.word	0x1fffa01c
    4734:	1fff9209 	.word	0x1fff9209

00004738 <Output_flashMode_capability>:
}

void Output_flashMode_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4738:	29ff      	cmp	r1, #255	; 0xff
    473a:	d104      	bne.n	4746 <Output_flashMode_capability+0xe>
    473c:	28ff      	cmp	r0, #255	; 0xff
    473e:	d102      	bne.n	4746 <Output_flashMode_capability+0xe>
	{
		print("Output_flashMode()");
    4740:	4802      	ldr	r0, [pc, #8]	; (474c <Output_flashMode_capability+0x14>)
    4742:	f001 be45 	b.w	63d0 <_print>


// Sets the device into firmware reload mode
inline void Output_firmwareReload()
{
	usb_device_reload();
    4746:	f000 bb23 	b.w	4d90 <usb_device_reload>
    474a:	bf00      	nop
    474c:	00008b6d 	.word	0x00008b6d

00004750 <Output_usbMouse_capability>:
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void Output_usbMouse_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4750:	29ff      	cmp	r1, #255	; 0xff
//     If you use it, be prepared that your .kll files will break in the future (post KLL 0.5)
// Argument #1: USB Mouse Button (16 bit)
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void Output_usbMouse_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    4752:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4754:	d106      	bne.n	4764 <Output_usbMouse_capability+0x14>
    4756:	28ff      	cmp	r0, #255	; 0xff
    4758:	d104      	bne.n	4764 <Output_usbMouse_capability+0x14>
	{
		print("Output_usbMouse(mouseButton,relX,relY)");
    475a:	4819      	ldr	r0, [pc, #100]	; (47c0 <Output_usbMouse_capability+0x70>)
	if ( mouse_button )
		USBMouse_Changed |= USBMouseChangeState_Buttons;

	if ( mouse_x || mouse_y )
		USBMouse_Changed |= USBMouseChangeState_Relative;
}
    475c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
void Output_usbMouse_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_usbMouse(mouseButton,relX,relY)");
    4760:	f001 be36 	b.w	63d0 <_print>
	// The USB spec defines up to a max of 0xFFFF buttons
	// The usual are:
	// 1 - Button 1 - (Primary)
	// 2 - Button 2 - (Secondary)
	// 3 - Button 3 - (Tertiary)
	uint16_t mouse_button = *(uint16_t*)(&args[0]);
    4764:	8814      	ldrh	r4, [r2, #0]

	// X/Y Relative Axis
	uint16_t mouse_x = *(uint16_t*)(&args[2]);
    4766:	8857      	ldrh	r7, [r2, #2]
	uint16_t mouse_y = *(uint16_t*)(&args[4]);
    4768:	8896      	ldrh	r6, [r2, #4]

	// Adjust for bit shift
	uint16_t mouse_button_shift = mouse_button - 1;
    476a:	1e65      	subs	r5, r4, #1
    476c:	b2ad      	uxth	r5, r5

	// Only send mouse button if in press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    476e:	b959      	cbnz	r1, 4788 <Output_usbMouse_capability+0x38>
    4770:	2803      	cmp	r0, #3
    4772:	d109      	bne.n	4788 <Output_usbMouse_capability+0x38>
	{
		// Release
		if ( mouse_button )
    4774:	b1e4      	cbz	r4, 47b0 <Output_usbMouse_capability+0x60>
			USBMouse_Buttons &= ~(1 << mouse_button_shift);
    4776:	4913      	ldr	r1, [pc, #76]	; (47c4 <Output_usbMouse_capability+0x74>)
    4778:	880b      	ldrh	r3, [r1, #0]
    477a:	b29a      	uxth	r2, r3
    477c:	2301      	movs	r3, #1
    477e:	40ab      	lsls	r3, r5
    4780:	ea22 0303 	bic.w	r3, r2, r3
    4784:	800b      	strh	r3, [r1, #0]
    4786:	e00e      	b.n	47a6 <Output_usbMouse_capability+0x56>
	}
	else
	{
		// Press or hold
		if ( mouse_button )
    4788:	b134      	cbz	r4, 4798 <Output_usbMouse_capability+0x48>
			USBMouse_Buttons |= (1 << mouse_button_shift);
    478a:	490e      	ldr	r1, [pc, #56]	; (47c4 <Output_usbMouse_capability+0x74>)
    478c:	2301      	movs	r3, #1
    478e:	880a      	ldrh	r2, [r1, #0]
    4790:	40ab      	lsls	r3, r5
    4792:	4313      	orrs	r3, r2
    4794:	b29b      	uxth	r3, r3
    4796:	800b      	strh	r3, [r1, #0]

		if ( mouse_x )
    4798:	b10f      	cbz	r7, 479e <Output_usbMouse_capability+0x4e>
			USBMouse_Relative_x = mouse_x;
    479a:	4b0b      	ldr	r3, [pc, #44]	; (47c8 <Output_usbMouse_capability+0x78>)
    479c:	801f      	strh	r7, [r3, #0]
		if ( mouse_y )
    479e:	b10e      	cbz	r6, 47a4 <Output_usbMouse_capability+0x54>
			USBMouse_Relative_y = mouse_y;
    47a0:	4b0a      	ldr	r3, [pc, #40]	; (47cc <Output_usbMouse_capability+0x7c>)
    47a2:	801e      	strh	r6, [r3, #0]
	}

	// Trigger updates
	if ( mouse_button )
    47a4:	b124      	cbz	r4, 47b0 <Output_usbMouse_capability+0x60>
		USBMouse_Changed |= USBMouseChangeState_Buttons;
    47a6:	4a0a      	ldr	r2, [pc, #40]	; (47d0 <Output_usbMouse_capability+0x80>)
    47a8:	7813      	ldrb	r3, [r2, #0]
    47aa:	f043 0301 	orr.w	r3, r3, #1
    47ae:	7013      	strb	r3, [r2, #0]

	if ( mouse_x || mouse_y )
    47b0:	b907      	cbnz	r7, 47b4 <Output_usbMouse_capability+0x64>
    47b2:	b126      	cbz	r6, 47be <Output_usbMouse_capability+0x6e>
		USBMouse_Changed |= USBMouseChangeState_Relative;
    47b4:	4a06      	ldr	r2, [pc, #24]	; (47d0 <Output_usbMouse_capability+0x80>)
    47b6:	7813      	ldrb	r3, [r2, #0]
    47b8:	f043 0302 	orr.w	r3, r3, #2
    47bc:	7013      	strb	r3, [r2, #0]
    47be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47c0:	00008b80 	.word	0x00008b80
    47c4:	1fff9206 	.word	0x1fff9206
    47c8:	1fff920e 	.word	0x1fff920e
    47cc:	1fff9210 	.word	0x1fff9210
    47d0:	1fff920a 	.word	0x1fff920a

000047d4 <Output_flushBuffers>:

// ----- Functions -----

// Flush Key buffers
void Output_flushBuffers()
{
    47d4:	2200      	movs	r2, #0
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
		USBKeys_Keys[ c ] = 0;
    47d6:	4906      	ldr	r1, [pc, #24]	; (47f0 <Output_flushBuffers+0x1c>)
    47d8:	2300      	movs	r3, #0
    47da:	5453      	strb	r3, [r2, r1]
    47dc:	3201      	adds	r2, #1

// Flush Key buffers
void Output_flushBuffers()
{
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
    47de:	2a1b      	cmp	r2, #27
    47e0:	d1f9      	bne.n	47d6 <Output_flushBuffers+0x2>
		USBKeys_Keys[ c ] = 0;

	// Zero out other key buffers
	USBKeys_ConsCtrl = 0;
    47e2:	4a04      	ldr	r2, [pc, #16]	; (47f4 <Output_flushBuffers+0x20>)
    47e4:	8013      	strh	r3, [r2, #0]
	USBKeys_Modifiers = 0;
    47e6:	4a04      	ldr	r2, [pc, #16]	; (47f8 <Output_flushBuffers+0x24>)
    47e8:	7013      	strb	r3, [r2, #0]
	USBKeys_SysCtrl = 0;
    47ea:	4a04      	ldr	r2, [pc, #16]	; (47fc <Output_flushBuffers+0x28>)
    47ec:	7013      	strb	r3, [r2, #0]
    47ee:	4770      	bx	lr
    47f0:	1fffa020 	.word	0x1fffa020
    47f4:	1fffa05c 	.word	0x1fffa05c
    47f8:	1fff9208 	.word	0x1fff9208
    47fc:	1fffa01c 	.word	0x1fffa01c

00004800 <Output_kbdProtocolBoot_capability>:
// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4800:	29ff      	cmp	r1, #255	; 0xff

// ----- Capabilities -----

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    4802:	b510      	push	{r4, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4804:	d106      	bne.n	4814 <Output_kbdProtocolBoot_capability+0x14>
    4806:	28ff      	cmp	r0, #255	; 0xff
    4808:	d104      	bne.n	4814 <Output_kbdProtocolBoot_capability+0x14>
	{
		print("Output_kbdProtocolBoot()");
    480a:	4807      	ldr	r0, [pc, #28]	; (4828 <Output_kbdProtocolBoot_capability+0x28>)
	Output_flushBuffers();

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
#endif
}
    480c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolBoot()");
    4810:	f001 bdde 	b.w	63d0 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 0 )
    4814:	4c05      	ldr	r4, [pc, #20]	; (482c <Output_kbdProtocolBoot_capability+0x2c>)
    4816:	7823      	ldrb	r3, [r4, #0]
    4818:	b12b      	cbz	r3, 4826 <Output_kbdProtocolBoot_capability+0x26>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    481a:	2901      	cmp	r1, #1
    481c:	d103      	bne.n	4826 <Output_kbdProtocolBoot_capability+0x26>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    481e:	f7ff ffd9 	bl	47d4 <Output_flushBuffers>

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
    4822:	2300      	movs	r3, #0
    4824:	7023      	strb	r3, [r4, #0]
    4826:	bd10      	pop	{r4, pc}
    4828:	00008ba7 	.word	0x00008ba7
    482c:	1fff8cbc 	.word	0x1fff8cbc

00004830 <Output_kbdProtocolNKRO_capability>:
// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4830:	29ff      	cmp	r1, #255	; 0xff
}


// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    4832:	b538      	push	{r3, r4, r5, lr}
    4834:	460c      	mov	r4, r1
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4836:	d106      	bne.n	4846 <Output_kbdProtocolNKRO_capability+0x16>
    4838:	28ff      	cmp	r0, #255	; 0xff
    483a:	d104      	bne.n	4846 <Output_kbdProtocolNKRO_capability+0x16>
	{
		print("Output_kbdProtocolNKRO()");
    483c:	4807      	ldr	r0, [pc, #28]	; (485c <Output_kbdProtocolNKRO_capability+0x2c>)
	Output_flushBuffers();

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
#endif
}
    483e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolNKRO()");
    4842:	f001 bdc5 	b.w	63d0 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 1 )
    4846:	4d06      	ldr	r5, [pc, #24]	; (4860 <Output_kbdProtocolNKRO_capability+0x30>)
    4848:	782b      	ldrb	r3, [r5, #0]
    484a:	2b01      	cmp	r3, #1
    484c:	d004      	beq.n	4858 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    484e:	2c01      	cmp	r4, #1
    4850:	d102      	bne.n	4858 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    4852:	f7ff ffbf 	bl	47d4 <Output_flushBuffers>

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
    4856:	702c      	strb	r4, [r5, #0]
    4858:	bd38      	pop	{r3, r4, r5, pc}
    485a:	bf00      	nop
    485c:	00008bc0 	.word	0x00008bc0
    4860:	1fff8cbc 	.word	0x1fff8cbc

00004864 <Output_toggleKbdProtocol_capability>:
// Toggle Keyboard Protocol
void Output_toggleKbdProtocol_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4864:	29ff      	cmp	r1, #255	; 0xff
}


// Toggle Keyboard Protocol
void Output_toggleKbdProtocol_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    4866:	b508      	push	{r3, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4868:	d106      	bne.n	4878 <Output_toggleKbdProtocol_capability+0x14>
    486a:	28ff      	cmp	r0, #255	; 0xff
    486c:	d10f      	bne.n	488e <Output_toggleKbdProtocol_capability+0x2a>
	{
		print("Output_toggleKbdProtocol()");
    486e:	4808      	ldr	r0, [pc, #32]	; (4890 <Output_toggleKbdProtocol_capability+0x2c>)

		// Toggle the keyboard protocol Mode
		USBKeys_Protocol = !USBKeys_Protocol;
	}
#endif
}
    4870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_toggleKbdProtocol()");
    4874:	f001 bdac 	b.w	63d0 <_print>
		return;
	}

	// Only toggle protocol if release state
	if ( stateType == 0x00 && state == 0x03 )
    4878:	b949      	cbnz	r1, 488e <Output_toggleKbdProtocol_capability+0x2a>
    487a:	2803      	cmp	r0, #3
    487c:	d107      	bne.n	488e <Output_toggleKbdProtocol_capability+0x2a>
	{
		// Flush the key buffers
		Output_flushBuffers();
    487e:	f7ff ffa9 	bl	47d4 <Output_flushBuffers>

		// Toggle the keyboard protocol Mode
		USBKeys_Protocol = !USBKeys_Protocol;
    4882:	4a04      	ldr	r2, [pc, #16]	; (4894 <Output_toggleKbdProtocol_capability+0x30>)
    4884:	7813      	ldrb	r3, [r2, #0]
    4886:	fab3 f383 	clz	r3, r3
    488a:	095b      	lsrs	r3, r3, #5
    488c:	7013      	strb	r3, [r2, #0]
    488e:	bd08      	pop	{r3, pc}
    4890:	00008bd9 	.word	0x00008bd9
    4894:	1fff8cbc 	.word	0x1fff8cbc

00004898 <Output_usbCodeSend_capability>:
// Argument #1: USB Code
void Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    4898:	29ff      	cmp	r1, #255	; 0xff


// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    489a:	b538      	push	{r3, r4, r5, lr}
#if enableKeyboard_define == 1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    489c:	d103      	bne.n	48a6 <Output_usbCodeSend_capability+0xe>
    489e:	28ff      	cmp	r0, #255	; 0xff
    48a0:	d101      	bne.n	48a6 <Output_usbCodeSend_capability+0xe>
	{
		print("Output_usbCodeSend(usbCode)");
    48a2:	485f      	ldr	r0, [pc, #380]	; (4a20 <Output_usbCodeSend_capability+0x188>)
    48a4:	e0a8      	b.n	49f8 <Output_usbCodeSend_capability+0x160>
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release, only used for NKRO
	switch ( USBKeys_Protocol )
    48a6:	4b5f      	ldr	r3, [pc, #380]	; (4a24 <Output_usbCodeSend_capability+0x18c>)
    48a8:	781c      	ldrb	r4, [r3, #0]
    48aa:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    48ae:	b114      	cbz	r4, 48b6 <Output_usbCodeSend_capability+0x1e>
    48b0:	2d01      	cmp	r5, #1
    48b2:	d00b      	beq.n	48cc <Output_usbCodeSend_capability+0x34>
    48b4:	e012      	b.n	48dc <Output_usbCodeSend_capability+0x44>
	{
	case 0: // Boot Mode
		// TODO Analog inputs
		// Only indicate USB has changed if either a press or release has occured
		if ( state == 0x01 || state == 0x03 )
    48b6:	f000 04fd 	and.w	r4, r0, #253	; 0xfd
    48ba:	2c01      	cmp	r4, #1
    48bc:	d10e      	bne.n	48dc <Output_usbCodeSend_capability+0x44>
			USBKeys_Changed = USBKeyChangeState_MainKeys;
    48be:	4c5a      	ldr	r4, [pc, #360]	; (4a28 <Output_usbCodeSend_capability+0x190>)
    48c0:	2502      	movs	r5, #2
    48c2:	7025      	strb	r5, [r4, #0]

		// Only send keypresses if press or hold state
		if ( stateType == 0x00 && state == 0x03 ) // Release state
    48c4:	b951      	cbnz	r1, 48dc <Output_usbCodeSend_capability+0x44>
    48c6:	2803      	cmp	r0, #3
    48c8:	d108      	bne.n	48dc <Output_usbCodeSend_capability+0x44>
    48ca:	bd38      	pop	{r3, r4, r5, pc}
			return;
		break;
	case 1: // NKRO Mode
		// Only send press and release events
		if ( stateType == 0x00 && state == 0x02 ) // Hold state
    48cc:	b931      	cbnz	r1, 48dc <Output_usbCodeSend_capability+0x44>
    48ce:	2802      	cmp	r0, #2
    48d0:	f000 80a4 	beq.w	4a1c <Output_usbCodeSend_capability+0x184>
		print("Output_usbCodeSend(usbCode)");
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release, only used for NKRO
    48d4:	1e41      	subs	r1, r0, #1
    48d6:	4248      	negs	r0, r1
    48d8:	4148      	adcs	r0, r1
    48da:	e000      	b.n	48de <Output_usbCodeSend_capability+0x46>
    48dc:	2000      	movs	r0, #0
	//  Bits  48 - 161 (bytes  6 - 20) correspond to USB Codes  51 - 164 (Secondary)
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;
	switch ( USBKeys_Protocol )
    48de:	781b      	ldrb	r3, [r3, #0]
			keyPress = 1;
		break;
	}

	// Get the keycode from arguments
	uint8_t key = args[0];
    48e0:	7814      	ldrb	r4, [r2, #0]
	//  Bits  48 - 161 (bytes  6 - 20) correspond to USB Codes  51 - 164 (Secondary)
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;
	switch ( USBKeys_Protocol )
    48e2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    48e6:	b113      	cbz	r3, 48ee <Output_usbCodeSend_capability+0x56>
    48e8:	2d01      	cmp	r5, #1
    48ea:	d020      	beq.n	492e <Output_usbCodeSend_capability+0x96>
    48ec:	bd38      	pop	{r3, r4, r5, pc}
	{
	case 0: // Boot Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    48ee:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    48f2:	2be0      	cmp	r3, #224	; 0xe0
    48f4:	d108      	bne.n	4908 <Output_usbCodeSend_capability+0x70>
		{
			USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    48f6:	494d      	ldr	r1, [pc, #308]	; (4a2c <Output_usbCodeSend_capability+0x194>)
    48f8:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
    48fc:	780a      	ldrb	r2, [r1, #0]
    48fe:	2301      	movs	r3, #1
    4900:	40a3      	lsls	r3, r4
    4902:	4313      	orrs	r3, r2
    4904:	700b      	strb	r3, [r1, #0]
    4906:	bd38      	pop	{r3, r4, r5, pc}
		}
		// Normal USB Code
		else
		{
			// USB Key limit reached
			if ( USBKeys_Sent >= USB_BOOT_MAX_KEYS )
    4908:	4a49      	ldr	r2, [pc, #292]	; (4a30 <Output_usbCodeSend_capability+0x198>)
    490a:	7813      	ldrb	r3, [r2, #0]
    490c:	2b05      	cmp	r3, #5
    490e:	d901      	bls.n	4914 <Output_usbCodeSend_capability+0x7c>
			{
				warn_print("USB Key limit reached");
    4910:	4848      	ldr	r0, [pc, #288]	; (4a34 <Output_usbCodeSend_capability+0x19c>)
    4912:	e071      	b.n	49f8 <Output_usbCodeSend_capability+0x160>
				return;
			}

			// Make sure key is within the USB HID range
			if ( key <= 104 )
    4914:	2c68      	cmp	r4, #104	; 0x68
    4916:	d804      	bhi.n	4922 <Output_usbCodeSend_capability+0x8a>
			{
				USBKeys_Keys[USBKeys_Sent++] = key;
    4918:	1c59      	adds	r1, r3, #1
    491a:	7011      	strb	r1, [r2, #0]
    491c:	4a46      	ldr	r2, [pc, #280]	; (4a38 <Output_usbCodeSend_capability+0x1a0>)
    491e:	54d4      	strb	r4, [r2, r3]
    4920:	bd38      	pop	{r3, r4, r5, pc}
			}
			// Invalid key
			else
			{
				warn_msg("USB Code above 104/0x68 in Boot Mode: ");
    4922:	4846      	ldr	r0, [pc, #280]	; (4a3c <Output_usbCodeSend_capability+0x1a4>)
    4924:	f001 fd54 	bl	63d0 <_print>
				printHex( key );
    4928:	4620      	mov	r0, r4
    492a:	2101      	movs	r1, #1
    492c:	e061      	b.n	49f2 <Output_usbCodeSend_capability+0x15a>
		}
		break;

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    492e:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    4932:	2be0      	cmp	r3, #224	; 0xe0
    4934:	d110      	bne.n	4958 <Output_usbCodeSend_capability+0xc0>
    4936:	4b3d      	ldr	r3, [pc, #244]	; (4a2c <Output_usbCodeSend_capability+0x194>)
    4938:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
		{
			if ( keyPress )
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    493c:	40a5      	lsls	r5, r4
    493e:	781a      	ldrb	r2, [r3, #0]

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
		{
			if ( keyPress )
    4940:	b108      	cbz	r0, 4946 <Output_usbCodeSend_capability+0xae>
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    4942:	4315      	orrs	r5, r2
    4944:	e001      	b.n	494a <Output_usbCodeSend_capability+0xb2>
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    4946:	ea22 0505 	bic.w	r5, r2, r5
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    494a:	4a37      	ldr	r2, [pc, #220]	; (4a28 <Output_usbCodeSend_capability+0x190>)
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    494c:	701d      	strb	r5, [r3, #0]
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    494e:	7813      	ldrb	r3, [r2, #0]
    4950:	f043 0301 	orr.w	r3, r3, #1
    4954:	7013      	strb	r3, [r2, #0]
			break;
    4956:	bd38      	pop	{r3, r4, r5, pc}
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    4958:	1f23      	subs	r3, r4, #4
    495a:	2b2d      	cmp	r3, #45	; 0x2d
    495c:	d80f      	bhi.n	497e <Output_usbCodeSend_capability+0xe6>
    495e:	3c05      	subs	r4, #5
    4960:	b2e4      	uxtb	r4, r4
    4962:	2c2e      	cmp	r4, #46	; 0x2e
    4964:	bf9f      	itttt	ls
    4966:	4b36      	ldrls	r3, [pc, #216]	; (4a40 <Output_usbCodeSend_capability+0x1a8>)
    4968:	5d1a      	ldrbls	r2, [r3, r4]
    496a:	4b36      	ldrls	r3, [pc, #216]	; (4a44 <Output_usbCodeSend_capability+0x1ac>)
    496c:	5d19      	ldrbls	r1, [r3, r4]
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    496e:	4c2e      	ldr	r4, [pc, #184]	; (4a28 <Output_usbCodeSend_capability+0x190>)
    4970:	7823      	ldrb	r3, [r4, #0]

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
			break;
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    4972:	bf84      	itt	hi
    4974:	2100      	movhi	r1, #0
    4976:	460a      	movhi	r2, r1
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    4978:	f043 0302 	orr.w	r3, r3, #2
    497c:	e00c      	b.n	4998 <Output_usbCodeSend_capability+0x100>
		}
		// Next 14 bytes
		else if ( key >= 51 && key <= 155 )
    497e:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
    4982:	b2db      	uxtb	r3, r3
    4984:	2b68      	cmp	r3, #104	; 0x68
    4986:	d809      	bhi.n	499c <Output_usbCodeSend_capability+0x104>
    4988:	4a2f      	ldr	r2, [pc, #188]	; (4a48 <Output_usbCodeSend_capability+0x1b0>)
    498a:	4930      	ldr	r1, [pc, #192]	; (4a4c <Output_usbCodeSend_capability+0x1b4>)
				byteLookup( 17 );
				byteLookup( 18 );
				byteLookup( 19 );
			}

			USBKeys_Changed |= USBKeyChangeState_SecondaryKeys;
    498c:	4c26      	ldr	r4, [pc, #152]	; (4a28 <Output_usbCodeSend_capability+0x190>)
    498e:	5cd2      	ldrb	r2, [r2, r3]
    4990:	5cc9      	ldrb	r1, [r1, r3]
    4992:	7823      	ldrb	r3, [r4, #0]
    4994:	f043 0304 	orr.w	r3, r3, #4
    4998:	7023      	strb	r3, [r4, #0]
    499a:	e031      	b.n	4a00 <Output_usbCodeSend_capability+0x168>
		}
		// Next byte
		else if ( key >= 157 && key <= 164 )
    499c:	f104 0363 	add.w	r3, r4, #99	; 0x63
    49a0:	b2db      	uxtb	r3, r3
    49a2:	2b07      	cmp	r3, #7
    49a4:	d808      	bhi.n	49b8 <Output_usbCodeSend_capability+0x120>
    49a6:	4a2a      	ldr	r2, [pc, #168]	; (4a50 <Output_usbCodeSend_capability+0x1b8>)
    49a8:	5cd1      	ldrb	r1, [r2, r3]
			switch ( keyPos )
			{
				byteLookup( 20 );
			}

			USBKeys_Changed |= USBKeyChangeState_TertiaryKeys;
    49aa:	4a1f      	ldr	r2, [pc, #124]	; (4a28 <Output_usbCodeSend_capability+0x190>)
    49ac:	7813      	ldrb	r3, [r2, #0]
    49ae:	f043 0308 	orr.w	r3, r3, #8
    49b2:	7013      	strb	r3, [r2, #0]
    49b4:	2214      	movs	r2, #20
    49b6:	e023      	b.n	4a00 <Output_usbCodeSend_capability+0x168>
		}
		// Last 6 bytes
		else if ( key >= 176 && key <= 221 )
    49b8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    49bc:	b2db      	uxtb	r3, r3
    49be:	2b2d      	cmp	r3, #45	; 0x2d
    49c0:	d808      	bhi.n	49d4 <Output_usbCodeSend_capability+0x13c>
    49c2:	4a24      	ldr	r2, [pc, #144]	; (4a54 <Output_usbCodeSend_capability+0x1bc>)
    49c4:	4924      	ldr	r1, [pc, #144]	; (4a58 <Output_usbCodeSend_capability+0x1c0>)
				byteLookup( 24 );
				byteLookup( 25 );
				byteLookup( 26 );
			}

			USBKeys_Changed |= USBKeyChangeState_QuartiaryKeys;
    49c6:	4c18      	ldr	r4, [pc, #96]	; (4a28 <Output_usbCodeSend_capability+0x190>)
    49c8:	5cd2      	ldrb	r2, [r2, r3]
    49ca:	5cc9      	ldrb	r1, [r1, r3]
    49cc:	7823      	ldrb	r3, [r4, #0]
    49ce:	f043 0310 	orr.w	r3, r3, #16
    49d2:	e7e1      	b.n	4998 <Output_usbCodeSend_capability+0x100>
		}
		// Received 0x00
		// This is a special USB Code that internally indicates a "break"
		// It is used to send "nothing" in order to break up sequences of USB Codes
		else if ( key == 0x00 )
    49d4:	b944      	cbnz	r4, 49e8 <Output_usbCodeSend_capability+0x150>
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    49d6:	4a14      	ldr	r2, [pc, #80]	; (4a28 <Output_usbCodeSend_capability+0x190>)
    49d8:	7813      	ldrb	r3, [r2, #0]
    49da:	f043 0302 	orr.w	r3, r3, #2
    49de:	7013      	strb	r3, [r2, #0]
		}

		break;
	}
#endif
}
    49e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		else if ( key == 0x00 )
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;

			// Also flush out buffers just in case
			Output_flushBuffers();
    49e4:	f7ff bef6 	b.w	47d4 <Output_flushBuffers>
			break;
		}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
    49e8:	481c      	ldr	r0, [pc, #112]	; (4a5c <Output_usbCodeSend_capability+0x1c4>)
    49ea:	f001 fcf1 	bl	63d0 <_print>
			printHex( key );
    49ee:	4620      	mov	r0, r4
    49f0:	4629      	mov	r1, r5
    49f2:	f001 fd8f 	bl	6514 <printHex_op>
			print( NL );
    49f6:	481a      	ldr	r0, [pc, #104]	; (4a60 <Output_usbCodeSend_capability+0x1c8>)
		}

		break;
	}
#endif
}
    49f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
			printHex( key );
			print( NL );
    49fc:	f001 bce8 	b.w	63d0 <_print>
    4a00:	4d0d      	ldr	r5, [pc, #52]	; (4a38 <Output_usbCodeSend_capability+0x1a0>)
    4a02:	4c0b      	ldr	r4, [pc, #44]	; (4a30 <Output_usbCodeSend_capability+0x198>)
    4a04:	2301      	movs	r3, #1
		}

		// Set/Unset
		if ( keyPress )
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    4a06:	408b      	lsls	r3, r1
    4a08:	5ca9      	ldrb	r1, [r5, r2]
			print( NL );
			break;
		}

		// Set/Unset
		if ( keyPress )
    4a0a:	b108      	cbz	r0, 4a10 <Output_usbCodeSend_capability+0x178>
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    4a0c:	430b      	orrs	r3, r1
    4a0e:	e001      	b.n	4a14 <Output_usbCodeSend_capability+0x17c>
			USBKeys_Sent++;
		}
		else // Release
		{
			USBKeys_Keys[bytePosition] &= ~(1 << byteShift);
    4a10:	ea21 0303 	bic.w	r3, r1, r3
    4a14:	54ab      	strb	r3, [r5, r2]
			USBKeys_Sent++;
    4a16:	7823      	ldrb	r3, [r4, #0]
    4a18:	3301      	adds	r3, #1
    4a1a:	7023      	strb	r3, [r4, #0]
    4a1c:	bd38      	pop	{r3, r4, r5, pc}
    4a1e:	bf00      	nop
    4a20:	00008bf4 	.word	0x00008bf4
    4a24:	1fff8cbc 	.word	0x1fff8cbc
    4a28:	1fff9209 	.word	0x1fff9209
    4a2c:	1fff9208 	.word	0x1fff9208
    4a30:	1fff9214 	.word	0x1fff9214
    4a34:	00008c10 	.word	0x00008c10
    4a38:	1fffa020 	.word	0x1fffa020
    4a3c:	00008c3d 	.word	0x00008c3d
    4a40:	00008e39 	.word	0x00008e39
    4a44:	00008884 	.word	0x00008884
    4a48:	00008ea8 	.word	0x00008ea8
    4a4c:	000088b3 	.word	0x000088b3
    4a50:	00008923 	.word	0x00008923
    4a54:	00008f18 	.word	0x00008f18
    4a58:	0000892b 	.word	0x0000892b
    4a5c:	00008c79 	.word	0x00008c79
    4a60:	000093eb 	.word	0x000093eb

00004a64 <Output_setup>:
}


// USB Module Setup
inline void Output_setup()
{
    4a64:	b508      	push	{r3, lr}
	// Initialize the USB
	// If a USB connection does not exist, just ignore it
	// All usb related functions will non-fatally fail if called
	// If the USB initialization is delayed, then functionality will just be delayed
	usb_init();
    4a66:	f000 fdc5 	bl	55f4 <usb_init>

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );
    4a6a:	4804      	ldr	r0, [pc, #16]	; (4a7c <Output_setup+0x18>)
    4a6c:	4904      	ldr	r1, [pc, #16]	; (4a80 <Output_setup+0x1c>)
    4a6e:	f001 fa5b 	bl	5f28 <CLI_registerDictionary>

	// Flush key buffers
	Output_flushBuffers();
}
    4a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );

	// Flush key buffers
	Output_flushBuffers();
    4a76:	f7ff bead 	b.w	47d4 <Output_flushBuffers>
    4a7a:	bf00      	nop
    4a7c:	0000895c 	.word	0x0000895c
    4a80:	00008870 	.word	0x00008870

00004a84 <Output_send>:
}


// USB Data Send
inline void Output_send()
{
    4a84:	b510      	push	{r4, lr}
	// USB status checks
	// Non-standard USB state manipulation, usually does nothing
	usb_device_check();
    4a86:	f000 f88f 	bl	4ba8 <usb_device_check>
	}
	*/

#if enableMouse_define == 1
	// Process mouse actions
	while ( USBMouse_Changed )
    4a8a:	4b15      	ldr	r3, [pc, #84]	; (4ae0 <Output_send+0x5c>)
    4a8c:	781b      	ldrb	r3, [r3, #0]
    4a8e:	b113      	cbz	r3, 4a96 <Output_send+0x12>
		usb_mouse_send();
    4a90:	f000 ffba 	bl	5a08 <usb_mouse_send>
    4a94:	e7f9      	b.n	4a8a <Output_send+0x6>
#endif

#if enableKeyboard_define == 1
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
    4a96:	4b13      	ldr	r3, [pc, #76]	; (4ae4 <Output_send+0x60>)
    4a98:	781a      	ldrb	r2, [r3, #0]
    4a9a:	461c      	mov	r4, r3
    4a9c:	b94a      	cbnz	r2, 4ab2 <Output_send+0x2e>
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    4a9e:	4b12      	ldr	r3, [pc, #72]	; (4ae8 <Output_send+0x64>)
    4aa0:	781b      	ldrb	r3, [r3, #0]
    4aa2:	2b05      	cmp	r3, #5
    4aa4:	d805      	bhi.n	4ab2 <Output_send+0x2e>
			USBKeys_Keys[c] = 0;
    4aa6:	4a11      	ldr	r2, [pc, #68]	; (4aec <Output_send+0x68>)
    4aa8:	2100      	movs	r1, #0
    4aaa:	54d1      	strb	r1, [r2, r3]
#endif

#if enableKeyboard_define == 1
	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    4aac:	3301      	adds	r3, #1
    4aae:	b2db      	uxtb	r3, r3
    4ab0:	e7f7      	b.n	4aa2 <Output_send+0x1e>
			USBKeys_Keys[c] = 0;

	// Send keypresses while there are pending changes
	while ( USBKeys_Changed )
    4ab2:	4b0f      	ldr	r3, [pc, #60]	; (4af0 <Output_send+0x6c>)
    4ab4:	781b      	ldrb	r3, [r3, #0]
    4ab6:	b113      	cbz	r3, 4abe <Output_send+0x3a>
		usb_keyboard_send();
    4ab8:	f000 fe02 	bl	56c0 <usb_keyboard_send>
    4abc:	e7f9      	b.n	4ab2 <Output_send+0x2e>

	// Clear keys sent
	USBKeys_Sent = 0;
    4abe:	4a0a      	ldr	r2, [pc, #40]	; (4ae8 <Output_send+0x64>)
    4ac0:	7013      	strb	r3, [r2, #0]

	// Signal Scan Module we are finished
	switch ( USBKeys_Protocol )
    4ac2:	7822      	ldrb	r2, [r4, #0]
    4ac4:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    4ac8:	b112      	cbz	r2, 4ad0 <Output_send+0x4c>
    4aca:	2801      	cmp	r0, #1
    4acc:	d003      	beq.n	4ad6 <Output_send+0x52>
    4ace:	bd10      	pop	{r4, pc}
	{
	case 0: // Boot Mode
		// Clear modifiers only in boot mode
		USBKeys_Modifiers = 0;
    4ad0:	4b08      	ldr	r3, [pc, #32]	; (4af4 <Output_send+0x70>)
    4ad2:	7018      	strb	r0, [r3, #0]
    4ad4:	e000      	b.n	4ad8 <Output_send+0x54>
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    4ad6:	4618      	mov	r0, r3
		break;
	}
#endif
}
    4ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		// Clear modifiers only in boot mode
		USBKeys_Modifiers = 0;
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    4adc:	f7fe bcde 	b.w	349c <Scan_finishedWithOutput>
    4ae0:	1fff920a 	.word	0x1fff920a
    4ae4:	1fff8cbc 	.word	0x1fff8cbc
    4ae8:	1fff9214 	.word	0x1fff9214
    4aec:	1fffa020 	.word	0x1fffa020
    4af0:	1fff9209 	.word	0x1fff9209
    4af4:	1fff9208 	.word	0x1fff9208

00004af8 <Output_availablechar>:

// USB Input buffer available
inline unsigned int Output_availablechar()
{
#if enableVirtualSerialPort_define == 1
	return usb_serial_available();
    4af8:	f001 b800 	b.w	5afc <usb_serial_available>

00004afc <Output_getchar>:
// USB Get Character from input buffer
inline int Output_getchar()
{
#if enableVirtualSerialPort_define == 1
	// XXX Make sure to check output_availablechar() first! Information is lost with the cast (error codes) (AVR)
	return (int)usb_serial_getchar();
    4afc:	f000 bfd8 	b.w	5ab0 <usb_serial_getchar>

00004b00 <Output_putstr>:
	uint16_t count = 0;
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	uint32_t count = 0;
#endif
	// Count characters until NULL character, then send the amount counted
	while ( str[count] != '\0' )
    4b00:	4603      	mov	r3, r0
    4b02:	1a19      	subs	r1, r3, r0
    4b04:	f813 2b01 	ldrb.w	r2, [r3], #1
    4b08:	2a00      	cmp	r2, #0
    4b0a:	d1fa      	bne.n	4b02 <Output_putstr+0x2>
		count++;

	return usb_serial_write( str, count );
    4b0c:	f001 b804 	b.w	5b18 <usb_serial_write>

00004b10 <Output_softReset>:


// Soft Chip Reset
inline void Output_softReset()
{
	usb_device_software_reset();
    4b10:	4b01      	ldr	r3, [pc, #4]	; (4b18 <Output_softReset+0x8>)
    4b12:	4a02      	ldr	r2, [pc, #8]	; (4b1c <Output_softReset+0xc>)
    4b14:	601a      	str	r2, [r3, #0]
    4b16:	4770      	bx	lr
    4b18:	e000ed0c 	.word	0xe000ed0c
    4b1c:	05fa0004 	.word	0x05fa0004

00004b20 <Output_current_available>:
unsigned int Output_current_available()
{
	unsigned int total_current = 0;

	// Check for USB current source
	total_current += Output_USBCurrent_Available;
    4b20:	4a03      	ldr	r2, [pc, #12]	; (4b30 <Output_current_available+0x10>)

	// Check for external current source
	total_current += Output_ExtCurrent_Available;
    4b22:	4b04      	ldr	r3, [pc, #16]	; (4b34 <Output_current_available+0x14>)
unsigned int Output_current_available()
{
	unsigned int total_current = 0;

	// Check for USB current source
	total_current += Output_USBCurrent_Available;
    4b24:	8810      	ldrh	r0, [r2, #0]

	// Check for external current source
	total_current += Output_ExtCurrent_Available;
    4b26:	881b      	ldrh	r3, [r3, #0]

	// XXX If the total available current is still 0
	// Set to 100 mA, which is generally a safe assumption at startup
	// before we've been able to determine actual available current
	if ( total_current == 0 )
    4b28:	1818      	adds	r0, r3, r0
	{
		total_current = 100;
	}

	return total_current;
}
    4b2a:	bf08      	it	eq
    4b2c:	2064      	moveq	r0, #100	; 0x64
    4b2e:	4770      	bx	lr
    4b30:	1fff9204 	.word	0x1fff9204
    4b34:	1fff920c 	.word	0x1fff920c

00004b38 <Output_update_usb_current>:


// Update USB current (mA)
// Triggers power change event
void Output_update_usb_current( unsigned int current )
{
    4b38:	b508      	push	{r3, lr}
	// Only signal if changed
	if ( current == Output_USBCurrent_Available )
    4b3a:	4b06      	ldr	r3, [pc, #24]	; (4b54 <Output_update_usb_current+0x1c>)
    4b3c:	881a      	ldrh	r2, [r3, #0]
    4b3e:	4290      	cmp	r0, r2
    4b40:	d006      	beq.n	4b50 <Output_update_usb_current+0x18>
		return;

	// Update USB current
	Output_USBCurrent_Available = current;
    4b42:	8018      	strh	r0, [r3, #0]
	printInt32( total_current );
	print(" mA" NL);
	*/

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    4b44:	f7ff ffec 	bl	4b20 <Output_current_available>
}
    4b48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printInt32( total_current );
	print(" mA" NL);
	*/

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    4b4c:	f7fe bcac 	b.w	34a8 <Scan_currentChange>
    4b50:	bd08      	pop	{r3, pc}
    4b52:	bf00      	nop
    4b54:	1fff9204 	.word	0x1fff9204

00004b58 <usb_set_config_descriptor_size>:
};

// Simplifies defines for USB descriptors
void usb_set_config_descriptor_size()
{
	config_descriptor[2] = LSB( sizeof( config_descriptor ) );
    4b58:	4b02      	ldr	r3, [pc, #8]	; (4b64 <usb_set_config_descriptor_size+0xc>)
    4b5a:	22af      	movs	r2, #175	; 0xaf
    4b5c:	709a      	strb	r2, [r3, #2]
	config_descriptor[3] = MSB( sizeof( config_descriptor ) );
    4b5e:	2200      	movs	r2, #0
    4b60:	70da      	strb	r2, [r3, #3]
    4b62:	4770      	bx	lr
    4b64:	1fff8d9c 	.word	0x1fff8d9c

00004b68 <endpoint0_transmit>:
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
    4b68:	b5f0      	push	{r4, r5, r6, r7, lr}
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4b6a:	4c0c      	ldr	r4, [pc, #48]	; (4b9c <endpoint0_transmit+0x34>)
    4b6c:	4e0c      	ldr	r6, [pc, #48]	; (4ba0 <endpoint0_transmit+0x38>)
    4b6e:	7823      	ldrb	r3, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4b70:	4d0c      	ldr	r5, [pc, #48]	; (4ba4 <endpoint0_transmit+0x3c>)
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4b72:	f043 0702 	orr.w	r7, r3, #2
    4b76:	eb06 02c7 	add.w	r2, r6, r7, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4b7a:	f083 0301 	eor.w	r3, r3, #1
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4b7e:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4b80:	782a      	ldrb	r2, [r5, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4b82:	7023      	strb	r3, [r4, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4b84:	2a00      	cmp	r2, #0
    4b86:	bf14      	ite	ne
    4b88:	20c8      	movne	r0, #200	; 0xc8
    4b8a:	2088      	moveq	r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    4b8c:	f082 0201 	eor.w	r2, r2, #1
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4b90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    4b94:	702a      	strb	r2, [r5, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4b96:	f846 1037 	str.w	r1, [r6, r7, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b9c:	1fff92c4 	.word	0x1fff92c4
    4ba0:	1fff8000 	.word	0x1fff8000
    4ba4:	1fff936f 	.word	0x1fff936f

00004ba8 <usb_device_check>:
// Called once per scan loop, should take minimal processing time or it may affect other modules
void usb_device_check()
{
	// Check to see if we're still waiting for the next USB request after Get Configuration Descriptor
	// If still waiting, restart the USB initialization with a lower power requirement
	if ( power_neg_delay )
    4ba8:	4a07      	ldr	r2, [pc, #28]	; (4bc8 <usb_device_check+0x20>)
    4baa:	7813      	ldrb	r3, [r2, #0]
    4bac:	b15b      	cbz	r3, 4bc6 <usb_device_check+0x1e>
	{
		// Check if 100 ms has elapsed
		if ( systick_millis_count - power_neg_time > 100 )
    4bae:	4b07      	ldr	r3, [pc, #28]	; (4bcc <usb_device_check+0x24>)
    4bb0:	4907      	ldr	r1, [pc, #28]	; (4bd0 <usb_device_check+0x28>)
    4bb2:	681b      	ldr	r3, [r3, #0]
    4bb4:	6809      	ldr	r1, [r1, #0]
    4bb6:	1a5b      	subs	r3, r3, r1
    4bb8:	2b64      	cmp	r3, #100	; 0x64
    4bba:	d904      	bls.n	4bc6 <usb_device_check+0x1e>
		{
			power_neg_delay = 0;
    4bbc:	2300      	movs	r3, #0
			*usb_bMaxPower = 50;

			// Re-initialize USB
			usb_reinit();
#else
			warn_msg("USB Low Power Negotation Disabled, condition detected.");
    4bbe:	4805      	ldr	r0, [pc, #20]	; (4bd4 <usb_device_check+0x2c>)
	if ( power_neg_delay )
	{
		// Check if 100 ms has elapsed
		if ( systick_millis_count - power_neg_time > 100 )
		{
			power_neg_delay = 0;
    4bc0:	7013      	strb	r3, [r2, #0]
			*usb_bMaxPower = 50;

			// Re-initialize USB
			usb_reinit();
#else
			warn_msg("USB Low Power Negotation Disabled, condition detected.");
    4bc2:	f001 bc05 	b.w	63d0 <_print>
    4bc6:	4770      	bx	lr
    4bc8:	1fff9256 	.word	0x1fff9256
    4bcc:	1fff9050 	.word	0x1fff9050
    4bd0:	1fff9360 	.word	0x1fff9360
    4bd4:	00009068 	.word	0x00009068

00004bd8 <usb_rx>:

usb_packet_t *usb_rx( uint32_t endpoint )
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
    4bd8:	1e43      	subs	r3, r0, #1

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
    4bda:	2b09      	cmp	r3, #9
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
}

usb_packet_t *usb_rx( uint32_t endpoint )
{
    4bdc:	b510      	push	{r4, lr}
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
    4bde:	d810      	bhi.n	4c02 <usb_rx+0x2a>
	{
		return NULL;
	}

	__disable_irq();
    4be0:	b672      	cpsid	i

	// Receive packet, check pointer
	ret = rx_first[endpoint];
    4be2:	4a09      	ldr	r2, [pc, #36]	; (4c08 <usb_rx+0x30>)
    4be4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if ( ret )
    4be8:	b148      	cbz	r0, 4bfe <usb_rx+0x26>
	{
		rx_first[ endpoint ] = ret->next;
    4bea:	6841      	ldr	r1, [r0, #4]
    4bec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		usb_rx_byte_count_data[ endpoint ] -= ret->len;
    4bf0:	4906      	ldr	r1, [pc, #24]	; (4c0c <usb_rx+0x34>)
    4bf2:	8804      	ldrh	r4, [r0, #0]
    4bf4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    4bf8:	1b12      	subs	r2, r2, r4
    4bfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	__enable_irq();
    4bfe:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    4c00:	bd10      	pop	{r4, pc}
	endpoint--;

	// Make sure this is a valid endpoint
	if ( endpoint >= NUM_ENDPOINTS )
	{
		return NULL;
    4c02:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4c04:	bd10      	pop	{r4, pc}
    4c06:	bf00      	nop
    4c08:	1fff929c 	.word	0x1fff929c
    4c0c:	1fffa05e 	.word	0x1fffa05e

00004c10 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    4c10:	3801      	subs	r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    4c12:	2809      	cmp	r0, #9
    4c14:	d80a      	bhi.n	4c2c <usb_tx_packet_count+0x1c>
		return 0;
	__disable_irq();
    4c16:	b672      	cpsid	i
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    4c18:	4b05      	ldr	r3, [pc, #20]	; (4c30 <usb_tx_packet_count+0x20>)
    4c1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;
    4c1e:	2000      	movs	r0, #0

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    4c20:	b113      	cbz	r3, 4c28 <usb_tx_packet_count+0x18>
		count++;
    4c22:	3001      	adds	r0, #1

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    4c24:	685b      	ldr	r3, [r3, #4]
    4c26:	e7fb      	b.n	4c20 <usb_tx_packet_count+0x10>
		count++;
	__enable_irq();
    4c28:	b662      	cpsie	i
	return count;
    4c2a:	4770      	bx	lr
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
    4c2c:	2000      	movs	r0, #0
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
		count++;
	__enable_irq();
	return count;
}
    4c2e:	4770      	bx	lr
    4c30:	1fff9308 	.word	0x1fff9308

00004c34 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory( usb_packet_t *packet )
{
    4c34:	b510      	push	{r4, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    4c36:	b672      	cpsid	i
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    4c38:	2301      	movs	r3, #1
    4c3a:	4a17      	ldr	r2, [pc, #92]	; (4c98 <usb_rx_memory+0x64>)
    4c3c:	441a      	add	r2, r3
	{
		if ( *cfg++ & USB_ENDPT_EPRXEN )
    4c3e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    4c42:	0712      	lsls	r2, r2, #28
    4c44:	d51c      	bpl.n	4c80 <usb_rx_memory+0x4c>
		{
			if ( table[ index( i, RX, EVEN ) ].desc == 0 )
    4c46:	009a      	lsls	r2, r3, #2
    4c48:	4914      	ldr	r1, [pc, #80]	; (4c9c <usb_rx_memory+0x68>)
    4c4a:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
    4c4e:	b92c      	cbnz	r4, 4c5c <usb_rx_memory+0x28>
			{
				table[ index( i, RX, EVEN ) ].addr = packet->buf;
    4c50:	eb01 1343 	add.w	r3, r1, r3, lsl #5
    4c54:	3008      	adds	r0, #8
    4c56:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    4c58:	4b11      	ldr	r3, [pc, #68]	; (4ca0 <usb_rx_memory+0x6c>)
    4c5a:	e009      	b.n	4c70 <usb_rx_memory+0x3c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if ( table[ index( i, RX, ODD ) ].desc == 0 )
    4c5c:	f042 0201 	orr.w	r2, r2, #1
    4c60:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
    4c64:	b964      	cbnz	r4, 4c80 <usb_rx_memory+0x4c>
			{
				table[ index( i, RX, ODD ) ].addr = packet->buf;
    4c66:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    4c6a:	3008      	adds	r0, #8
    4c6c:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    4c6e:	4b0d      	ldr	r3, [pc, #52]	; (4ca4 <usb_rx_memory+0x70>)
    4c70:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
				usb_rx_memory_needed--;
    4c74:	4a0c      	ldr	r2, [pc, #48]	; (4ca8 <usb_rx_memory+0x74>)
    4c76:	7813      	ldrb	r3, [r2, #0]
    4c78:	3b01      	subs	r3, #1
    4c7a:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    4c7c:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    4c7e:	bd10      	pop	{r4, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    4c80:	3301      	adds	r3, #1
    4c82:	2b0b      	cmp	r3, #11
    4c84:	d1d9      	bne.n	4c3a <usb_rx_memory+0x6>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    4c86:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    4c88:	4b07      	ldr	r3, [pc, #28]	; (4ca8 <usb_rx_memory+0x74>)
    4c8a:	2200      	movs	r2, #0
    4c8c:	701a      	strb	r2, [r3, #0]
	usb_free( packet );
	return;
}
    4c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free( packet );
    4c92:	f000 be97 	b.w	59c4 <usb_free>
    4c96:	bf00      	nop
    4c98:	00008f48 	.word	0x00008f48
    4c9c:	1fff8000 	.word	0x1fff8000
    4ca0:	00400088 	.word	0x00400088
    4ca4:	004000c8 	.word	0x004000c8
    4ca8:	1fff9365 	.word	0x1fff9365

00004cac <usb_resume>:
	return;
}

// Call whenever there's an action that may wake the host device
void usb_resume()
{
    4cac:	b538      	push	{r3, r4, r5, lr}
	// If we have been sleeping, try to wake up host
	if ( usb_dev_sleep && usb_configured() )
    4cae:	4d0c      	ldr	r5, [pc, #48]	; (4ce0 <usb_resume+0x34>)
    4cb0:	782b      	ldrb	r3, [r5, #0]
    4cb2:	b19b      	cbz	r3, 4cdc <usb_resume+0x30>

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured()
{
	return usb_configuration;
    4cb4:	4b0b      	ldr	r3, [pc, #44]	; (4ce4 <usb_resume+0x38>)
    4cb6:	781b      	ldrb	r3, [r3, #0]

// Call whenever there's an action that may wake the host device
void usb_resume()
{
	// If we have been sleeping, try to wake up host
	if ( usb_dev_sleep && usb_configured() )
    4cb8:	b183      	cbz	r3, 4cdc <usb_resume+0x30>
		#if enableVirtualSerialPort_define != 1
		info_print("Attempting to resume the host");
		#endif
		// Force wake-up for 10 ms
		// According to the USB Spec a device must hold resume for at least 1 ms but no more than 15 ms
		USB0_CTL |= USB_CTL_RESUME;
    4cba:	4c0b      	ldr	r4, [pc, #44]	; (4ce8 <usb_resume+0x3c>)
    4cbc:	7823      	ldrb	r3, [r4, #0]
    4cbe:	f043 0304 	orr.w	r3, r3, #4
    4cc2:	7023      	strb	r3, [r4, #0]
		delay(10);
    4cc4:	200a      	movs	r0, #10
    4cc6:	f7fd fc87 	bl	25d8 <delay>
		USB0_CTL &= ~(USB_CTL_RESUME);
    4cca:	7823      	ldrb	r3, [r4, #0]
    4ccc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    4cd0:	7023      	strb	r3, [r4, #0]
		delay(50); // Wait for at least 50 ms to make sure the bus is clear
    4cd2:	2032      	movs	r0, #50	; 0x32
    4cd4:	f7fd fc80 	bl	25d8 <delay>
		usb_dev_sleep = 0; // Make sure we don't call this again, may crash system
    4cd8:	2300      	movs	r3, #0
    4cda:	702b      	strb	r3, [r5, #0]
    4cdc:	bd38      	pop	{r3, r4, r5, pc}
    4cde:	bf00      	nop
    4ce0:	1fff9364 	.word	0x1fff9364
    4ce4:	1fff936e 	.word	0x1fff936e
    4ce8:	40072094 	.word	0x40072094

00004cec <usb_tx>:
	}

}

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    4cec:	b538      	push	{r3, r4, r5, lr}
	// Update expiry counter
	USBKeys_Idle_Expiry = systick_millis_count;
    4cee:	4b21      	ldr	r3, [pc, #132]	; (4d74 <usb_tx+0x88>)
    4cf0:	681a      	ldr	r2, [r3, #0]
    4cf2:	4b21      	ldr	r3, [pc, #132]	; (4d78 <usb_tx+0x8c>)
    4cf4:	601a      	str	r2, [r3, #0]

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    4cf6:	4b21      	ldr	r3, [pc, #132]	; (4d7c <usb_tx+0x90>)
    4cf8:	681b      	ldr	r3, [r3, #0]
	}

}

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    4cfa:	4604      	mov	r4, r0
	USBKeys_Idle_Expiry = systick_millis_count;

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    4cfc:	7818      	ldrb	r0, [r3, #0]
    4cfe:	0040      	lsls	r0, r0, #1
	}

}

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    4d00:	460d      	mov	r5, r1
	USBKeys_Idle_Expiry = systick_millis_count;

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    4d02:	f7ff ff19 	bl	4b38 <Output_update_usb_current>

	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
	uint8_t next;

	endpoint--;
    4d06:	1e63      	subs	r3, r4, #1
	if ( endpoint >= NUM_ENDPOINTS )
    4d08:	2b09      	cmp	r3, #9
    4d0a:	d832      	bhi.n	4d72 <usb_tx+0x86>
	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );

	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
    4d0c:	0164      	lsls	r4, r4, #5
    4d0e:	481c      	ldr	r0, [pc, #112]	; (4d80 <usb_tx+0x94>)
    4d10:	f044 0410 	orr.w	r4, r4, #16
    4d14:	4420      	add	r0, r4
	uint8_t next;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return;
	__disable_irq();
    4d16:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
    4d18:	4a1a      	ldr	r2, [pc, #104]	; (4d84 <usb_tx+0x98>)
    4d1a:	5cd1      	ldrb	r1, [r2, r3]
    4d1c:	2903      	cmp	r1, #3
    4d1e:	d80b      	bhi.n	4d38 <usb_tx+0x4c>
    4d20:	e8df f001 	tbb	[pc, r1]
    4d24:	07020418 	.word	0x07020418
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    4d28:	2105      	movs	r1, #5
    4d2a:	e014      	b.n	4d56 <usb_tx+0x6a>
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    4d2c:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    4d2e:	2102      	movs	r1, #2
		break;
    4d30:	e011      	b.n	4d56 <usb_tx+0x6a>
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	case TX_STATE_ODD_FREE:
		b++;
    4d32:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    4d34:	2104      	movs	r1, #4
		break;
    4d36:	e00e      	b.n	4d56 <usb_tx+0x6a>
	default:
		if (tx_first[ endpoint ] == NULL)
    4d38:	4913      	ldr	r1, [pc, #76]	; (4d88 <usb_tx+0x9c>)
    4d3a:	4a14      	ldr	r2, [pc, #80]	; (4d8c <usb_tx+0xa0>)
    4d3c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    4d40:	b910      	cbnz	r0, 4d48 <usb_tx+0x5c>
		{
			tx_first[ endpoint ] = packet;
    4d42:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    4d46:	e002      	b.n	4d4e <usb_tx+0x62>
		}
		else
		{
			tx_last[ endpoint ]->next = packet;
    4d48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    4d4c:	604d      	str	r5, [r1, #4]
		}
		tx_last[ endpoint ] = packet;
    4d4e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    4d52:	e00d      	b.n	4d70 <usb_tx+0x84>
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    4d54:	2103      	movs	r1, #3
		tx_last[ endpoint ] = packet;
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
    4d56:	54d1      	strb	r1, [r2, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    4d58:	f010 0f08 	tst.w	r0, #8
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    4d5c:	f105 0308 	add.w	r3, r5, #8
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    4d60:	882a      	ldrh	r2, [r5, #0]
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    4d62:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    4d64:	bf14      	ite	ne
    4d66:	23c8      	movne	r3, #200	; 0xc8
    4d68:	2388      	moveq	r3, #136	; 0x88
    4d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4d6e:	6003      	str	r3, [r0, #0]
	__enable_irq();
    4d70:	b662      	cpsie	i
    4d72:	bd38      	pop	{r3, r4, r5, pc}
    4d74:	1fff9050 	.word	0x1fff9050
    4d78:	1fff9218 	.word	0x1fff9218
    4d7c:	1fff8d98 	.word	0x1fff8d98
    4d80:	1fff8000 	.word	0x1fff8000
    4d84:	1fff924c 	.word	0x1fff924c
    4d88:	1fff9308 	.word	0x1fff9308
    4d8c:	1fff9330 	.word	0x1fff9330

00004d90 <usb_device_reload>:
}


void usb_device_reload()
{
    4d90:	4b07      	ldr	r3, [pc, #28]	; (4db0 <usb_device_reload+0x20>)
    4d92:	4908      	ldr	r1, [pc, #32]	; (4db4 <usb_device_reload+0x24>)
    4d94:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    4d98:	f5a2 3278 	sub.w	r2, r2, #253952	; 0x3e000
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
    4d9c:	5c52      	ldrb	r2, [r2, r1]
    4d9e:	f803 2b01 	strb.w	r2, [r3], #1
{
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
    4da2:	4a05      	ldr	r2, [pc, #20]	; (4db8 <usb_device_reload+0x28>)
    4da4:	4293      	cmp	r3, r2
    4da6:	d1f4      	bne.n	4d92 <usb_device_reload+0x2>
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
	SOFTWARE_RESET();
    4da8:	4b04      	ldr	r3, [pc, #16]	; (4dbc <usb_device_reload+0x2c>)
    4daa:	4a05      	ldr	r2, [pc, #20]	; (4dc0 <usb_device_reload+0x30>)
    4dac:	601a      	str	r2, [r3, #0]
    4dae:	4770      	bx	lr
    4db0:	4003e000 	.word	0x4003e000
    4db4:	000066de 	.word	0x000066de
    4db8:	4003e016 	.word	0x4003e016
    4dbc:	e000ed0c 	.word	0xe000ed0c
    4dc0:	05fa0004 	.word	0x05fa0004

00004dc4 <usb_isr>:
#endif
}


void usb_isr()
{
    4dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t status, stat, t;

restart:
	status = USB0_ISTAT;
    4dc8:	4dae      	ldr	r5, [pc, #696]	; (5084 <usb_isr+0x2c0>)
    4dca:	782c      	ldrb	r4, [r5, #0]
    4dcc:	b2e4      	uxtb	r4, r4
	print(" ISR(");
	printHex( status );
	print(") ");
	*/

	if ( (status & USB_INTEN_SOFTOKEN /* 04 */ ) )
    4dce:	f014 0f04 	tst.w	r4, #4
    4dd2:	462e      	mov	r6, r5
    4dd4:	d01a      	beq.n	4e0c <usb_isr+0x48>
	{
		if ( usb_configuration )
    4dd6:	4bac      	ldr	r3, [pc, #688]	; (5088 <usb_isr+0x2c4>)
    4dd8:	781b      	ldrb	r3, [r3, #0]
    4dda:	b1ab      	cbz	r3, 4e08 <usb_isr+0x44>
		{
			t = usb_reboot_timer;
    4ddc:	4aab      	ldr	r2, [pc, #684]	; (508c <usb_isr+0x2c8>)
    4dde:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    4de0:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    4de4:	b129      	cbz	r1, 4df2 <usb_isr+0x2e>
			{
				usb_reboot_timer = --t;
    4de6:	3b01      	subs	r3, #1
    4de8:	b2db      	uxtb	r3, r3
    4dea:	7013      	strb	r3, [r2, #0]
				if ( !t )
    4dec:	b90b      	cbnz	r3, 4df2 <usb_isr+0x2e>
					usb_device_reload();
    4dee:	f7ff ffcf 	bl	4d90 <usb_device_reload>
			}

			// CDC Interface
			#if enableVirtualSerialPort_define == 1
			t = usb_cdc_transmit_flush_timer;
    4df2:	4aa7      	ldr	r2, [pc, #668]	; (5090 <usb_isr+0x2cc>)
    4df4:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    4df6:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    4dfa:	b129      	cbz	r1, 4e08 <usb_isr+0x44>
			{
				usb_cdc_transmit_flush_timer = --t;
    4dfc:	3b01      	subs	r3, #1
    4dfe:	b2db      	uxtb	r3, r3
    4e00:	7013      	strb	r3, [r2, #0]
				if ( t == 0 )
    4e02:	b90b      	cbnz	r3, 4e08 <usb_isr+0x44>
					usb_serial_flush_callback();
    4e04:	f000 fef0 	bl	5be8 <usb_serial_flush_callback>
			}
			#endif

		}
		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    4e08:	2304      	movs	r3, #4
    4e0a:	702b      	strb	r3, [r5, #0]
	}

	if ( (status & USB_ISTAT_TOKDNE /* 08 */ ) )
    4e0c:	f004 0308 	and.w	r3, r4, #8
    4e10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4e14:	2b00      	cmp	r3, #0
    4e16:	f000 8376 	beq.w	5506 <usb_isr+0x742>
	{
		uint8_t endpoint;
		stat = USB0_STAT;
    4e1a:	4b9e      	ldr	r3, [pc, #632]	; (5094 <usb_isr+0x2d0>)
    4e1c:	4f9e      	ldr	r7, [pc, #632]	; (5098 <usb_isr+0x2d4>)
    4e1e:	781b      	ldrb	r3, [r3, #0]
    4e20:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if ( endpoint == 0 )
    4e22:	0919      	lsrs	r1, r3, #4
    4e24:	ea4f 0493 	mov.w	r4, r3, lsr #2
    4e28:	f040 82ee 	bne.w	5408 <usb_isr+0x644>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
    4e2c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
	pid = BDT_PID( b->desc );
	buf = b->addr;
    4e30:	f8d3 9004 	ldr.w	r9, [r3, #4]
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
	pid = BDT_PID( b->desc );
    4e34:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
    4e38:	f3c3 0383 	ubfx	r3, r3, #2, #4
	print(", count:");
	printHex32(b->desc);
	print(" - ");
	#endif

	switch ( pid )
    4e3c:	3b01      	subs	r3, #1
    4e3e:	2b0c      	cmp	r3, #12
    4e40:	f200 82ae 	bhi.w	53a0 <usb_isr+0x5dc>
    4e44:	e8df f013 	tbh	[pc, r3, lsl #1]
    4e48:	02560256 	.word	0x02560256
    4e4c:	02ac02ac 	.word	0x02ac02ac
    4e50:	02ac02ac 	.word	0x02ac02ac
    4e54:	02ac02ac 	.word	0x02ac02ac
    4e58:	02ac0287 	.word	0x02ac0287
    4e5c:	02ac02ac 	.word	0x02ac02ac
    4e60:	000d      	.short	0x000d
	{
	case 0x0D: // Setup received from host
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4e62:	f8df 8254 	ldr.w	r8, [pc, #596]	; 50b8 <usb_isr+0x2f4>
    4e66:	f8d9 3000 	ldr.w	r3, [r9]
    4e6a:	f8c8 3000 	str.w	r3, [r8]
		setup.word2 = *(uint32_t *)(buf + 4);
    4e6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4e72:	f8c8 3004 	str.w	r3, [r8, #4]

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    4e76:	4b89      	ldr	r3, [pc, #548]	; (509c <usb_isr+0x2d8>)
    4e78:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4e7c:	4b88      	ldr	r3, [pc, #544]	; (50a0 <usb_isr+0x2dc>)
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4e7e:	4e89      	ldr	r6, [pc, #548]	; (50a4 <usb_isr+0x2e0>)
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4e80:	2101      	movs	r1, #1
    4e82:	7019      	strb	r1, [r3, #0]
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	// Reset USB Init timer
	USBInit_TimeEnd = systick_millis_count;
    4e84:	4988      	ldr	r1, [pc, #544]	; (50a8 <usb_isr+0x2e4>)
    4e86:	4b89      	ldr	r3, [pc, #548]	; (50ac <usb_isr+0x2e8>)
    4e88:	6808      	ldr	r0, [r1, #0]
    4e8a:	6018      	str	r0, [r3, #0]
	USBInit_Ticks++;
    4e8c:	4888      	ldr	r0, [pc, #544]	; (50b0 <usb_isr+0x2ec>)
    4e8e:	8803      	ldrh	r3, [r0, #0]
    4e90:	3301      	adds	r3, #1
    4e92:	b29b      	uxth	r3, r3
    4e94:	8003      	strh	r3, [r0, #0]

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    4e96:	4887      	ldr	r0, [pc, #540]	; (50b4 <usb_isr+0x2f0>)
    4e98:	7803      	ldrb	r3, [r0, #0]
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4e9a:	2200      	movs	r2, #0
    4e9c:	6032      	str	r2, [r6, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4e9e:	613a      	str	r2, [r7, #16]
		table[index(0, TX, ODD)].desc = 0;
    4ea0:	61ba      	str	r2, [r7, #24]
	USBInit_TimeEnd = systick_millis_count;
	USBInit_Ticks++;

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    4ea2:	b103      	cbz	r3, 4ea6 <usb_isr+0xe2>
	{
		power_neg_delay = 0;
    4ea4:	7002      	strb	r2, [r0, #0]
	}

	switch ( setup.wRequestAndType )
    4ea6:	f8b8 3000 	ldrh.w	r3, [r8]
    4eaa:	4c83      	ldr	r4, [pc, #524]	; (50b8 <usb_isr+0x2f4>)
    4eac:	f240 32a1 	movw	r2, #929	; 0x3a1
    4eb0:	4293      	cmp	r3, r2
    4eb2:	f000 81ea 	beq.w	528a <usb_isr+0x4c6>
    4eb6:	d835      	bhi.n	4f24 <usb_isr+0x160>
    4eb8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4ebc:	f000 8168 	beq.w	5190 <usb_isr+0x3cc>
    4ec0:	d815      	bhi.n	4eee <usb_isr+0x12a>
    4ec2:	2b82      	cmp	r3, #130	; 0x82
    4ec4:	f000 8140 	beq.w	5148 <usb_isr+0x384>
    4ec8:	d807      	bhi.n	4eda <usb_isr+0x116>
    4eca:	2b80      	cmp	r3, #128	; 0x80
    4ecc:	f040 815a 	bne.w	5184 <usb_isr+0x3c0>
		datalen = 1;
		data = reply_buffer;
		goto send;

	case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    4ed0:	4c7a      	ldr	r4, [pc, #488]	; (50bc <usb_isr+0x2f8>)
    4ed2:	2300      	movs	r3, #0
    4ed4:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    4ed6:	7063      	strb	r3, [r4, #1]
    4ed8:	e144      	b.n	5164 <usb_isr+0x3a0>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    4eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4ede:	f000 8143 	beq.w	5168 <usb_isr+0x3a4>
    4ee2:	f240 1201 	movw	r2, #257	; 0x101
    4ee6:	4293      	cmp	r3, r2
    4ee8:	f000 8150 	beq.w	518c <usb_isr+0x3c8>
    4eec:	e14a      	b.n	5184 <usb_isr+0x3c0>
    4eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    4ef2:	f000 8139 	beq.w	5168 <usb_isr+0x3a4>
    4ef6:	d80a      	bhi.n	4f0e <usb_isr+0x14a>
    4ef8:	f240 12a1 	movw	r2, #417	; 0x1a1
    4efc:	4293      	cmp	r3, r2
    4efe:	f000 81a4 	beq.w	524a <usb_isr+0x486>
    4f02:	f240 22a1 	movw	r2, #673	; 0x2a1
    4f06:	4293      	cmp	r3, r2
    4f08:	f000 81b7 	beq.w	527a <usb_isr+0x4b6>
    4f0c:	e13a      	b.n	5184 <usb_isr+0x3c0>
    4f0e:	f240 3201 	movw	r2, #769	; 0x301
    4f12:	4293      	cmp	r3, r2
    4f14:	f000 814c 	beq.w	51b0 <usb_isr+0x3ec>
    4f18:	f240 3202 	movw	r2, #770	; 0x302
    4f1c:	4293      	cmp	r3, r2
    4f1e:	f000 8153 	beq.w	51c8 <usb_isr+0x404>
    4f22:	e12f      	b.n	5184 <usb_isr+0x3c0>
    4f24:	f640 1221 	movw	r2, #2337	; 0x921
    4f28:	4293      	cmp	r3, r2
    4f2a:	f000 8182 	beq.w	5232 <usb_isr+0x46e>
    4f2e:	d823      	bhi.n	4f78 <usb_isr+0x1b4>
    4f30:	f240 6281 	movw	r2, #1665	; 0x681
    4f34:	4293      	cmp	r3, r2
    4f36:	d808      	bhi.n	4f4a <usb_isr+0x186>
    4f38:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    4f3c:	f080 8153 	bcs.w	51e6 <usb_isr+0x422>
    4f40:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    4f44:	f000 81a7 	beq.w	5296 <usb_isr+0x4d2>
    4f48:	e11c      	b.n	5184 <usb_isr+0x3c0>
    4f4a:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    4f4e:	f000 80f9 	beq.w	5144 <usb_isr+0x380>
    4f52:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4f56:	f040 8115 	bne.w	5184 <usb_isr+0x3c0>

	case 0x0900: // SET_CONFIGURATION
		#ifdef UART_DEBUG
		print("CONFIGURE - ");
		#endif
		usb_configuration = setup.wValue;
    4f5a:	4b4b      	ldr	r3, [pc, #300]	; (5088 <usb_isr+0x2c4>)
    4f5c:	78a2      	ldrb	r2, [r4, #2]
    4f5e:	701a      	strb	r2, [r3, #0]
		Output_Available = usb_configuration;
    4f60:	781b      	ldrb	r3, [r3, #0]
    4f62:	4a57      	ldr	r2, [pc, #348]	; (50c0 <usb_isr+0x2fc>)
    4f64:	b2db      	uxtb	r3, r3
    4f66:	7013      	strb	r3, [r2, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );
    4f68:	4b56      	ldr	r3, [pc, #344]	; (50c4 <usb_isr+0x300>)
    4f6a:	681b      	ldr	r3, [r3, #0]
    4f6c:	7818      	ldrb	r0, [r3, #0]
    4f6e:	0040      	lsls	r0, r0, #1
    4f70:	f7ff fde2 	bl	4b38 <Output_update_usb_current>
    4f74:	2400      	movs	r4, #0
    4f76:	e01d      	b.n	4fb4 <usb_isr+0x1f0>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    4f78:	f242 0221 	movw	r2, #8225	; 0x2021
    4f7c:	4293      	cmp	r3, r2
    4f7e:	f000 818a 	beq.w	5296 <usb_isr+0x4d2>
    4f82:	d80a      	bhi.n	4f9a <usb_isr+0x1d6>
    4f84:	f640 2221 	movw	r2, #2593	; 0xa21
    4f88:	4293      	cmp	r3, r2
    4f8a:	f000 816e 	beq.w	526a <usb_isr+0x4a6>
    4f8e:	f640 3221 	movw	r2, #2849	; 0xb21
    4f92:	4293      	cmp	r3, r2
    4f94:	f000 8175 	beq.w	5282 <usb_isr+0x4be>
    4f98:	e0f4      	b.n	5184 <usb_isr+0x3c0>
    4f9a:	f242 12a1 	movw	r2, #8609	; 0x21a1
    4f9e:	4293      	cmp	r3, r2
    4fa0:	d005      	beq.n	4fae <usb_isr+0x1ea>
    4fa2:	f242 2221 	movw	r2, #8737	; 0x2221
    4fa6:	4293      	cmp	r3, r2
    4fa8:	f000 8140 	beq.w	522c <usb_isr+0x468>
    4fac:	e0ea      	b.n	5184 <usb_isr+0x3c0>
		//info_print("set control line state");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)&usb_cdc_line_coding;
		datalen = sizeof( usb_cdc_line_coding );
    4fae:	2308      	movs	r3, #8
		usb_cdc_line_rtsdtr = setup.wValue;
		//info_print("set control line state");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)&usb_cdc_line_coding;
    4fb0:	4c45      	ldr	r4, [pc, #276]	; (50c8 <usb_isr+0x304>)
    4fb2:	e172      	b.n	529a <usb_isr+0x4d6>
    4fb4:	193b      	adds	r3, r7, r4
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
		{
			if ( table[i].desc & BDT_OWN )
    4fb6:	6a1a      	ldr	r2, [r3, #32]
    4fb8:	0611      	lsls	r1, r2, #24
    4fba:	d503      	bpl.n	4fc4 <usb_isr+0x200>
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
    4fbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
    4fbe:	3808      	subs	r0, #8
    4fc0:	f000 fd00 	bl	59c4 <usb_free>
    4fc4:	3408      	adds	r4, #8

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
    4fc6:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    4fca:	d1f3      	bne.n	4fb4 <usb_isr+0x1f0>
    4fcc:	f8df 9118 	ldr.w	r9, [pc, #280]	; 50e8 <usb_isr+0x324>
    4fd0:	2400      	movs	r4, #0
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
		{
			usb_packet_t *p, *n;
			p = rx_first[i];
    4fd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 50ec <usb_isr+0x328>
    4fd6:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    4fda:	ea4f 0a84 	mov.w	sl, r4, lsl #2
			while ( p )
    4fde:	b130      	cbz	r0, 4fee <usb_isr+0x22a>
			{
				n = p->next;
    4fe0:	6843      	ldr	r3, [r0, #4]
    4fe2:	9301      	str	r3, [sp, #4]
				usb_free(p);
    4fe4:	f000 fcee 	bl	59c4 <usb_free>
				p = n;
    4fe8:	9b01      	ldr	r3, [sp, #4]
    4fea:	4618      	mov	r0, r3
    4fec:	e7f7      	b.n	4fde <usb_isr+0x21a>
			}
			rx_first[ i ] = NULL;
    4fee:	f84b 000a 	str.w	r0, [fp, sl]
			rx_last[ i ] = NULL;
    4ff2:	4b36      	ldr	r3, [pc, #216]	; (50cc <usb_isr+0x308>)
			p = tx_first[i];
    4ff4:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 50f0 <usb_isr+0x32c>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[ i ] = NULL;
			rx_last[ i ] = NULL;
    4ff8:	f84a 0003 	str.w	r0, [sl, r3]
			p = tx_first[i];
    4ffc:	f85a 000b 	ldr.w	r0, [sl, fp]
			while (p)
    5000:	b130      	cbz	r0, 5010 <usb_isr+0x24c>
			{
				n = p->next;
    5002:	6843      	ldr	r3, [r0, #4]
    5004:	9301      	str	r3, [sp, #4]
				usb_free(p);
    5006:	f000 fcdd 	bl	59c4 <usb_free>
				p = n;
    500a:	9b01      	ldr	r3, [sp, #4]
    500c:	4618      	mov	r0, r3
    500e:	e7f7      	b.n	5000 <usb_isr+0x23c>
			}
			tx_first[ i ] = NULL;
			tx_last[ i ] = NULL;
    5010:	4b2f      	ldr	r3, [pc, #188]	; (50d0 <usb_isr+0x30c>)
			{
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[ i ] = NULL;
    5012:	f84b 000a 	str.w	r0, [fp, sl]
			tx_last[ i ] = NULL;
    5016:	f84a 0003 	str.w	r0, [sl, r3]
			usb_rx_byte_count_data[i] = 0;
    501a:	4b2e      	ldr	r3, [pc, #184]	; (50d4 <usb_isr+0x310>)
    501c:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]

			switch ( tx_state[ i ] )
    5020:	f899 3000 	ldrb.w	r3, [r9]
    5024:	3b02      	subs	r3, #2
    5026:	2b03      	cmp	r3, #3
    5028:	d808      	bhi.n	503c <usb_isr+0x278>
    502a:	e8df f003 	tbb	[pc, r3]
    502e:	0402      	.short	0x0402
    5030:	0402      	.short	0x0402
			{
			case TX_STATE_EVEN_FREE:
			case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    5032:	2300      	movs	r3, #0
    5034:	e000      	b.n	5038 <usb_isr+0x274>
				break;
			case TX_STATE_ODD_FREE:
			case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5036:	2301      	movs	r3, #1
    5038:	f889 3000 	strb.w	r3, [r9]
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
			}
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
    503c:	3401      	adds	r4, #1
    503e:	2c0a      	cmp	r4, #10
    5040:	f109 0901 	add.w	r9, r9, #1
    5044:	d1c5      	bne.n	4fd2 <usb_isr+0x20e>
				break;
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    5046:	4b24      	ldr	r3, [pc, #144]	; (50d8 <usb_isr+0x314>)
    5048:	2200      	movs	r2, #0
    504a:	701a      	strb	r2, [r3, #0]
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    504c:	2401      	movs	r4, #1
    504e:	4699      	mov	r9, r3
    5050:	4a22      	ldr	r2, [pc, #136]	; (50dc <usb_isr+0x318>)
    5052:	4b23      	ldr	r3, [pc, #140]	; (50e0 <usb_isr+0x31c>)
    5054:	4422      	add	r2, r4
    5056:	4423      	add	r3, r4
		{
			epconf = *cfg++;
    5058:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    505c:	009b      	lsls	r3, r3, #2
			*reg = epconf;
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    505e:	f012 0f08 	tst.w	r2, #8
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
		{
			epconf = *cfg++;
			*reg = epconf;
    5062:	701a      	strb	r2, [r3, #0]
    5064:	ea4f 0a84 	mov.w	sl, r4, lsl #2
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    5068:	d05f      	beq.n	512a <usb_isr+0x366>
			{
				usb_packet_t *p;
				p = usb_malloc();
    506a:	f000 fc8d 	bl	5988 <usb_malloc>
				if ( p )
    506e:	2800      	cmp	r0, #0
    5070:	d040      	beq.n	50f4 <usb_isr+0x330>
				{
					table[ index( i, RX, EVEN ) ].addr = p->buf;
    5072:	eb07 1344 	add.w	r3, r7, r4, lsl #5
    5076:	3008      	adds	r0, #8
    5078:	6058      	str	r0, [r3, #4]
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    507a:	4b1a      	ldr	r3, [pc, #104]	; (50e4 <usb_isr+0x320>)
    507c:	f847 303a 	str.w	r3, [r7, sl, lsl #3]
    5080:	e03f      	b.n	5102 <usb_isr+0x33e>
    5082:	bf00      	nop
    5084:	40072080 	.word	0x40072080
    5088:	1fff936e 	.word	0x1fff936e
    508c:	1fff92c5 	.word	0x1fff92c5
    5090:	1fff9372 	.word	0x1fff9372
    5094:	40072090 	.word	0x40072090
    5098:	1fff8000 	.word	0x1fff8000
    509c:	004000c8 	.word	0x004000c8
    50a0:	1fff936f 	.word	0x1fff936f
    50a4:	1fff9220 	.word	0x1fff9220
    50a8:	1fff9050 	.word	0x1fff9050
    50ac:	1fffa018 	.word	0x1fffa018
    50b0:	1fffa01e 	.word	0x1fffa01e
    50b4:	1fff9256 	.word	0x1fff9256
    50b8:	1fff9358 	.word	0x1fff9358
    50bc:	1fff9366 	.word	0x1fff9366
    50c0:	1fff9213 	.word	0x1fff9213
    50c4:	1fff8d98 	.word	0x1fff8d98
    50c8:	1fff9048 	.word	0x1fff9048
    50cc:	1fff9224 	.word	0x1fff9224
    50d0:	1fff9330 	.word	0x1fff9330
    50d4:	1fffa05e 	.word	0x1fffa05e
    50d8:	1fff9365 	.word	0x1fff9365
    50dc:	00008f48 	.word	0x00008f48
    50e0:	1001c830 	.word	0x1001c830
    50e4:	00400088 	.word	0x00400088
    50e8:	1fff924c 	.word	0x1fff924c
    50ec:	1fff929c 	.word	0x1fff929c
    50f0:	1fff9308 	.word	0x1fff9308
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
    50f4:	f899 3000 	ldrb.w	r3, [r9]
					table[ index( i, RX, EVEN ) ].addr = p->buf;
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
    50f8:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
					usb_rx_memory_needed++;
    50fc:	3301      	adds	r3, #1
    50fe:	f889 3000 	strb.w	r3, [r9]
				}
				p = usb_malloc();
    5102:	f000 fc41 	bl	5988 <usb_malloc>
				if ( p )
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    5106:	f04a 0301 	orr.w	r3, sl, #1
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if ( p )
    510a:	b138      	cbz	r0, 511c <usb_isr+0x358>
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    510c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    5110:	3008      	adds	r0, #8
    5112:	6050      	str	r0, [r2, #4]
					table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    5114:	4aa4      	ldr	r2, [pc, #656]	; (53a8 <usb_isr+0x5e4>)
    5116:	f847 2033 	str.w	r2, [r7, r3, lsl #3]
    511a:	e006      	b.n	512a <usb_isr+0x366>
				}
				else
				{
					table[ index( i, RX, ODD ) ].desc = 0;
    511c:	f847 0033 	str.w	r0, [r7, r3, lsl #3]
					usb_rx_memory_needed++;
    5120:	f899 3000 	ldrb.w	r3, [r9]
    5124:	3301      	adds	r3, #1
    5126:	f889 3000 	strb.w	r3, [r9]
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    512a:	f04a 0202 	orr.w	r2, sl, #2
    512e:	2300      	movs	r3, #0
    5130:	f847 3032 	str.w	r3, [r7, r2, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    5134:	3401      	adds	r4, #1
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    5136:	f04a 0203 	orr.w	r2, sl, #3
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    513a:	2c0b      	cmp	r4, #11
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    513c:	f847 3032 	str.w	r3, [r7, r2, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    5140:	d186      	bne.n	5050 <usb_isr+0x28c>
    5142:	e0a9      	b.n	5298 <usb_isr+0x4d4>
			table[ index( i, TX, ODD ) ].desc = 0;
		}
		goto send;

	case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    5144:	4b99      	ldr	r3, [pc, #612]	; (53ac <usb_isr+0x5e8>)
    5146:	e0a1      	b.n	528c <usb_isr+0x4c8>
		datalen = 2;
		data = reply_buffer;
		goto send;

	case 0x0082: // GET_STATUS (endpoint)
		if ( setup.wIndex > NUM_ENDPOINTS )
    5148:	88a3      	ldrh	r3, [r4, #4]
    514a:	2b0a      	cmp	r3, #10
    514c:	d81a      	bhi.n	5184 <usb_isr+0x3c0>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    514e:	4c98      	ldr	r4, [pc, #608]	; (53b0 <usb_isr+0x5ec>)
    5150:	2200      	movs	r2, #0
    5152:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    5154:	7062      	strb	r2, [r4, #1]
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    5156:	009b      	lsls	r3, r3, #2
    5158:	4a96      	ldr	r2, [pc, #600]	; (53b4 <usb_isr+0x5f0>)
    515a:	5cd3      	ldrb	r3, [r2, r3]
    515c:	079a      	lsls	r2, r3, #30
			reply_buffer[0] = 1;
    515e:	bf44      	itt	mi
    5160:	2301      	movmi	r3, #1
    5162:	7023      	strbmi	r3, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    5164:	2302      	movs	r3, #2
    5166:	e098      	b.n	529a <usb_isr+0x4d6>
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		goto send;

	case 0x0300: // SET_FEATURE (device)
		switch ( setup.wValue )
    5168:	8863      	ldrh	r3, [r4, #2]
    516a:	2b01      	cmp	r3, #1
    516c:	f000 8093 	beq.w	5296 <usb_isr+0x4d2>
		// See SET_FEATURE(DEVICE_REMOTE_WAKEUP) for details
		case 0x1:
			goto send;
		}

		warn_msg("SET_FEATURE - Device wValue(");
    5170:	4891      	ldr	r0, [pc, #580]	; (53b8 <usb_isr+0x5f4>)
    5172:	f001 f92d 	bl	63d0 <_print>
		printHex( setup.wValue );
    5176:	8860      	ldrh	r0, [r4, #2]
    5178:	2101      	movs	r1, #1
    517a:	f001 f9cb 	bl	6514 <printHex_op>
		print( ")" NL );
    517e:	488f      	ldr	r0, [pc, #572]	; (53bc <usb_isr+0x5f8>)
    5180:	f001 f926 	bl	63d0 <_print>
	print("STALL : ");
	printInt32( systick_millis_count - USBInit_TimeStart );
	print(" ms");
	print(NL);
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5184:	4b8b      	ldr	r3, [pc, #556]	; (53b4 <usb_isr+0x5f0>)
    5186:	220f      	movs	r2, #15
    5188:	701a      	strb	r2, [r3, #0]
    518a:	e0b0      	b.n	52ee <usb_isr+0x52a>
		endpoint0_stall();
		return;

	case 0x0101: // CLEAR_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_msg("CLEAR_FEATURE - Interface wValue(");
    518c:	488c      	ldr	r0, [pc, #560]	; (53c0 <usb_isr+0x5fc>)
    518e:	e010      	b.n	51b2 <usb_isr+0x3ee>
		print( ")" NL );
		endpoint0_stall();
		return;

	case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    5190:	88a2      	ldrh	r2, [r4, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    5192:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    5196:	2b0a      	cmp	r3, #10
    5198:	d8f4      	bhi.n	5184 <usb_isr+0x3c0>
    519a:	8863      	ldrh	r3, [r4, #2]
    519c:	2b00      	cmp	r3, #0
    519e:	d1f1      	bne.n	5184 <usb_isr+0x3c0>
		{
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    51a0:	0091      	lsls	r1, r2, #2
    51a2:	4a84      	ldr	r2, [pc, #528]	; (53b4 <usb_isr+0x5f0>)
    51a4:	440a      	add	r2, r1
    51a6:	7811      	ldrb	r1, [r2, #0]
    51a8:	f021 0102 	bic.w	r1, r1, #2
    51ac:	7011      	strb	r1, [r2, #0]
    51ae:	e073      	b.n	5298 <usb_isr+0x4d4>
		endpoint0_stall();
		return;

	case 0x0301: // SET_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_msg("SET_FEATURE - Interface wValue(");
    51b0:	4884      	ldr	r0, [pc, #528]	; (53c4 <usb_isr+0x600>)
    51b2:	f001 f90d 	bl	63d0 <_print>
		printHex( setup.wValue );
    51b6:	8860      	ldrh	r0, [r4, #2]
    51b8:	2101      	movs	r1, #1
    51ba:	f001 f9ab 	bl	6514 <printHex_op>
		print(") wIndex(");
    51be:	4882      	ldr	r0, [pc, #520]	; (53c8 <usb_isr+0x604>)
    51c0:	f001 f906 	bl	63d0 <_print>
		printHex( setup.wIndex );
    51c4:	88a0      	ldrh	r0, [r4, #4]
    51c6:	e7d7      	b.n	5178 <usb_isr+0x3b4>
		print( ")" NL );
		endpoint0_stall();
		return;

	case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    51c8:	88a3      	ldrh	r3, [r4, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    51ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    51ce:	2a0a      	cmp	r2, #10
    51d0:	d8d8      	bhi.n	5184 <usb_isr+0x3c0>
    51d2:	8862      	ldrh	r2, [r4, #2]
    51d4:	2a00      	cmp	r2, #0
    51d6:	d1d5      	bne.n	5184 <usb_isr+0x3c0>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    51d8:	009a      	lsls	r2, r3, #2
    51da:	4b76      	ldr	r3, [pc, #472]	; (53b4 <usb_isr+0x5f0>)
    51dc:	4413      	add	r3, r2
    51de:	781a      	ldrb	r2, [r3, #0]
    51e0:	f042 0202 	orr.w	r2, r2, #2
    51e4:	e04f      	b.n	5286 <usb_isr+0x4c2>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    51e6:	8862      	ldrh	r2, [r4, #2]
    51e8:	88a7      	ldrh	r7, [r4, #4]
    51ea:	4b78      	ldr	r3, [pc, #480]	; (53cc <usb_isr+0x608>)
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    51ec:	685c      	ldr	r4, [r3, #4]
    51ee:	2c00      	cmp	r4, #0
    51f0:	d0c8      	beq.n	5184 <usb_isr+0x3c0>
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    51f2:	f8b3 e000 	ldrh.w	lr, [r3]
    51f6:	4596      	cmp	lr, r2
    51f8:	d116      	bne.n	5228 <usb_isr+0x464>
    51fa:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    51fe:	4577      	cmp	r7, lr
    5200:	d112      	bne.n	5228 <usb_isr+0x464>
			{
				data = list->addr;
				if ( (setup.wValue >> 8) == 3 )
    5202:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    5206:	f1be 0f03 	cmp.w	lr, #3
    520a:	d101      	bne.n	5210 <usb_isr+0x44c>
				{
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    520c:	7823      	ldrb	r3, [r4, #0]
    520e:	e044      	b.n	529a <usb_isr+0x4d6>
				// According to notes online, it says that some Apple devices can only do 20 mA
				// However, in my testing this hasn't been the case
				// (you can also draw as much current as you want if you just lie in the descriptor :P)
				// If this becomes an issue we can use this hack a second time to negotiate down to 20 mA
				// (which should be fine for just the mcu)
				if ( setup.wValue == 0x0200 && setup.wIndex == 0x0 )
    5210:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
					// length.
					datalen = *(list->addr);
				}
				else
				{
					datalen = list->length;
    5214:	891b      	ldrh	r3, [r3, #8]
				// According to notes online, it says that some Apple devices can only do 20 mA
				// However, in my testing this hasn't been the case
				// (you can also draw as much current as you want if you just lie in the descriptor :P)
				// If this becomes an issue we can use this hack a second time to negotiate down to 20 mA
				// (which should be fine for just the mcu)
				if ( setup.wValue == 0x0200 && setup.wIndex == 0x0 )
    5216:	d140      	bne.n	529a <usb_isr+0x4d6>
    5218:	2f00      	cmp	r7, #0
    521a:	d13e      	bne.n	529a <usb_isr+0x4d6>
				{
					power_neg_delay = 1;
    521c:	2201      	movs	r2, #1
    521e:	7002      	strb	r2, [r0, #0]
					power_neg_time = systick_millis_count;
    5220:	4a6b      	ldr	r2, [pc, #428]	; (53d0 <usb_isr+0x60c>)
    5222:	6809      	ldr	r1, [r1, #0]
    5224:	6011      	str	r1, [r2, #0]
    5226:	e038      	b.n	529a <usb_isr+0x4d6>
		#ifdef UART_DEBUG
		print("desc:");
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
    5228:	330c      	adds	r3, #12
    522a:	e7df      	b.n	51ec <usb_isr+0x428>
		endpoint0_stall();
		return;

#if enableVirtualSerialPort_define == 1
	case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    522c:	78a2      	ldrb	r2, [r4, #2]
    522e:	4b69      	ldr	r3, [pc, #420]	; (53d4 <usb_isr+0x610>)
    5230:	e029      	b.n	5286 <usb_isr+0x4c2>
		print(")");
		print( NL );
		#endif

		// Interface
		switch ( setup.wIndex & 0xFF )
    5232:	7923      	ldrb	r3, [r4, #4]
    5234:	2b01      	cmp	r3, #1
    5236:	d92e      	bls.n	5296 <usb_isr+0x4d2>
			break;
		// NKRO Keyboard Interface
		case NKRO_KEYBOARD_INTERFACE:
			break;
		default:
			warn_msg("Unknown interface - ");
    5238:	4867      	ldr	r0, [pc, #412]	; (53d8 <usb_isr+0x614>)
    523a:	f001 f8c9 	bl	63d0 <_print>
			printHex( setup.wIndex );
    523e:	88a0      	ldrh	r0, [r4, #4]
    5240:	2101      	movs	r1, #1
    5242:	f001 f967 	bl	6514 <printHex_op>
			print( NL );
    5246:	4865      	ldr	r0, [pc, #404]	; (53dc <usb_isr+0x618>)
    5248:	e79a      	b.n	5180 <usb_isr+0x3bc>
		{
			if ( list->addr == NULL )
				break;
			if ( list->wValue != 0x2200 )
				continue;
			if ( setup.wIndex == list->wIndex )
    524a:	88a2      	ldrh	r2, [r4, #4]
    524c:	4b5f      	ldr	r3, [pc, #380]	; (53cc <usb_isr+0x608>)
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    524e:	685c      	ldr	r4, [r3, #4]
    5250:	2c00      	cmp	r4, #0
    5252:	d097      	beq.n	5184 <usb_isr+0x3c0>
				break;
			if ( list->wValue != 0x2200 )
    5254:	8819      	ldrh	r1, [r3, #0]
    5256:	f5b1 5f08 	cmp.w	r1, #8704	; 0x2200
    525a:	d104      	bne.n	5266 <usb_isr+0x4a2>
				continue;
			if ( setup.wIndex == list->wIndex )
    525c:	8859      	ldrh	r1, [r3, #2]
    525e:	4291      	cmp	r1, r2
    5260:	d101      	bne.n	5266 <usb_isr+0x4a2>
			{
				data = list->addr;
				datalen = list->length;
    5262:	891b      	ldrh	r3, [r3, #8]
    5264:	e019      	b.n	529a <usb_isr+0x4d6>
		print("GET_REPORT - ");
		printHex( setup.wIndex );
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
    5266:	330c      	adds	r3, #12
    5268:	e7f1      	b.n	524e <usb_isr+0x48a>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue >> 8 );
		print(NL);
		#endif
		USBKeys_Idle_Config = (setup.wValue >> 8);
    526a:	8863      	ldrh	r3, [r4, #2]
    526c:	4a5c      	ldr	r2, [pc, #368]	; (53e0 <usb_isr+0x61c>)
    526e:	0a1b      	lsrs	r3, r3, #8
    5270:	7013      	strb	r3, [r2, #0]
		USBKeys_Idle_Expiry = 0;
    5272:	4a5c      	ldr	r2, [pc, #368]	; (53e4 <usb_isr+0x620>)
    5274:	2300      	movs	r3, #0
    5276:	6013      	str	r3, [r2, #0]
    5278:	e00e      	b.n	5298 <usb_isr+0x4d4>
		printHex( setup.wValue );
		print(" - ");
		printHex( USBKeys_Idle_Config );
		print(NL);
		#endif
		reply_buffer[0] = USBKeys_Idle_Config;
    527a:	4b59      	ldr	r3, [pc, #356]	; (53e0 <usb_isr+0x61c>)
    527c:	4c4c      	ldr	r4, [pc, #304]	; (53b0 <usb_isr+0x5ec>)
    527e:	781b      	ldrb	r3, [r3, #0]
    5280:	e006      	b.n	5290 <usb_isr+0x4cc>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue & 0xFF );
		print(NL);
		#endif
		USBKeys_Protocol = setup.wValue & 0xFF; // 0 - Boot Mode, 1 - NKRO Mode
    5282:	78a2      	ldrb	r2, [r4, #2]
    5284:	4b58      	ldr	r3, [pc, #352]	; (53e8 <usb_isr+0x624>)
    5286:	701a      	strb	r2, [r3, #0]
    5288:	e005      	b.n	5296 <usb_isr+0x4d2>
		printHex( setup.wValue );
		print(" - ");
		printHex( USBKeys_Protocol );
		print(NL);
		#endif
		reply_buffer[0] = USBKeys_Protocol;
    528a:	4b57      	ldr	r3, [pc, #348]	; (53e8 <usb_isr+0x624>)
    528c:	781b      	ldrb	r3, [r3, #0]
    528e:	4c48      	ldr	r4, [pc, #288]	; (53b0 <usb_isr+0x5ec>)
    5290:	7023      	strb	r3, [r4, #0]
		data = reply_buffer;
		datalen = 1;
    5292:	2301      	movs	r3, #1
    5294:	e001      	b.n	529a <usb_isr+0x4d6>
}

static void usb_setup()
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    5296:	2300      	movs	r3, #0
	}
}

static void usb_setup()
{
	const uint8_t *data = NULL;
    5298:	461c      	mov	r4, r3
	print(",");
	printHex( datalen );
	print( NL );
	#endif

	if ( datalen > setup.wLength )
    529a:	f8b8 7006 	ldrh.w	r7, [r8, #6]
    529e:	429f      	cmp	r7, r3
    52a0:	bf28      	it	cs
    52a2:	461f      	movcs	r7, r3
    52a4:	2f40      	cmp	r7, #64	; 0x40
    52a6:	46b8      	mov	r8, r7
    52a8:	bf28      	it	cs
    52aa:	f04f 0840 	movcs.w	r8, #64	; 0x40

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit( data, size );
    52ae:	4620      	mov	r0, r4
    52b0:	4641      	mov	r1, r8
    52b2:	f7ff fc59 	bl	4b68 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    52b6:	ebb7 0708 	subs.w	r7, r7, r8
	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit( data, size );
	data += size;
    52ba:	4444      	add	r4, r8
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    52bc:	d104      	bne.n	52c8 <usb_isr+0x504>
    52be:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    52c2:	d114      	bne.n	52ee <usb_isr+0x52a>
    52c4:	46b8      	mov	r8, r7
    52c6:	e004      	b.n	52d2 <usb_isr+0x50e>
    52c8:	2f40      	cmp	r7, #64	; 0x40
    52ca:	46b8      	mov	r8, r7
    52cc:	bf28      	it	cs
    52ce:	f04f 0840 	movcs.w	r8, #64	; 0x40
		return;

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit( data, size );
    52d2:	4620      	mov	r0, r4
    52d4:	4641      	mov	r1, r8
    52d6:	f7ff fc47 	bl	4b68 <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    52da:	ebb7 0708 	subs.w	r7, r7, r8

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit( data, size );
	data += size;
    52de:	4444      	add	r4, r8
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    52e0:	d102      	bne.n	52e8 <usb_isr+0x524>
    52e2:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    52e6:	d102      	bne.n	52ee <usb_isr+0x52a>
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    52e8:	4b40      	ldr	r3, [pc, #256]	; (53ec <usb_isr+0x628>)
	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
    52ea:	6034      	str	r4, [r6, #0]
	ep0_tx_len = datalen;
    52ec:	801f      	strh	r7, [r3, #0]
		#endif

		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    52ee:	2201      	movs	r2, #1
    52f0:	4b3f      	ldr	r3, [pc, #252]	; (53f0 <usb_isr+0x62c>)
    52f2:	e054      	b.n	539e <usb_isr+0x5da>

		// CDC Interface
		#if enableVirtualSerialPort_define == 1
		// CDC_SET_LINE_CODING - PID=OUT
		// XXX - Getting lots of NAKs in Linux
		if ( setup.wRequestAndType == 0x2021 )
    52f4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 53f8 <usb_isr+0x634>
    52f8:	f8b8 2000 	ldrh.w	r2, [r8]
    52fc:	f242 0321 	movw	r3, #8225	; 0x2021
    5300:	429a      	cmp	r2, r3
    5302:	d104      	bne.n	530e <usb_isr+0x54a>
		{
			// Copy over new line coding
			memcpy( (void*)&usb_cdc_line_coding, buf, 7 );
    5304:	483b      	ldr	r0, [pc, #236]	; (53f4 <usb_isr+0x630>)
    5306:	4649      	mov	r1, r9
    5308:	2207      	movs	r2, #7
    530a:	f7fd f935 	bl	2578 <memcpy>
		#endif

		// Keyboard HID SET_REPORT - PID=OUT
		#if enableKeyboard_define == 1
		// XXX - Getting lots of NAKs in Linux
		if ( setup.wRequestAndType == 0x0921 && setup.wValue & 0x200 )
    530e:	f8b8 2000 	ldrh.w	r2, [r8]
    5312:	4e39      	ldr	r6, [pc, #228]	; (53f8 <usb_isr+0x634>)
    5314:	f640 1321 	movw	r3, #2337	; 0x921
    5318:	429a      	cmp	r2, r3
    531a:	d118      	bne.n	534e <usb_isr+0x58a>
    531c:	8873      	ldrh	r3, [r6, #2]
    531e:	059b      	lsls	r3, r3, #22
    5320:	d515      	bpl.n	534e <usb_isr+0x58a>
			print("]");
			print( NL );
			#endif

			// Interface
			switch ( setup.wIndex & 0xFF )
    5322:	7933      	ldrb	r3, [r6, #4]
    5324:	b123      	cbz	r3, 5330 <usb_isr+0x56c>
    5326:	2b01      	cmp	r3, #1
    5328:	d107      	bne.n	533a <usb_isr+0x576>
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Already set with the control sequence
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    532a:	f899 2001 	ldrb.w	r2, [r9, #1]
    532e:	e001      	b.n	5334 <usb_isr+0x570>
			// Interface
			switch ( setup.wIndex & 0xFF )
			{
			// Keyboard Interface
			case KEYBOARD_INTERFACE:
				USBKeys_LEDs = buf[0];
    5330:	f899 2000 	ldrb.w	r2, [r9]
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Already set with the control sequence
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    5334:	4b31      	ldr	r3, [pc, #196]	; (53fc <usb_isr+0x638>)
    5336:	701a      	strb	r2, [r3, #0]
    5338:	e009      	b.n	534e <usb_isr+0x58a>
				break;
			default:
				warn_msg("Unknown interface - ");
    533a:	4827      	ldr	r0, [pc, #156]	; (53d8 <usb_isr+0x614>)
    533c:	f001 f848 	bl	63d0 <_print>
				printHex( setup.wIndex );
    5340:	88b0      	ldrh	r0, [r6, #4]
    5342:	2101      	movs	r1, #1
    5344:	f001 f8e6 	bl	6514 <printHex_op>
				print( NL );
    5348:	4824      	ldr	r0, [pc, #144]	; (53dc <usb_isr+0x618>)
    534a:	f001 f841 	bl	63d0 <_print>
			//endpoint0_transmit( NULL, 0 );
		}
		#endif

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    534e:	4b16      	ldr	r3, [pc, #88]	; (53a8 <usb_isr+0x5e4>)
    5350:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
    5354:	e024      	b.n	53a0 <usb_isr+0x5dc>
		break;

	case 0x09: // IN transaction completed to host
		data = ep0_tx_ptr;
    5356:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 5404 <usb_isr+0x640>
    535a:	f8d8 7000 	ldr.w	r7, [r8]
		if ( data ) print(" DATA ");
		print(NL);
		#endif

		// send remaining data, if any...
		if ( data )
    535e:	b1af      	cbz	r7, 538c <usb_isr+0x5c8>
		{
			size = ep0_tx_len;
    5360:	f8df 9088 	ldr.w	r9, [pc, #136]	; 53ec <usb_isr+0x628>
    5364:	f8b9 4000 	ldrh.w	r4, [r9]
    5368:	2c40      	cmp	r4, #64	; 0x40
    536a:	4626      	mov	r6, r4
    536c:	bf28      	it	cs
    536e:	2640      	movcs	r6, #64	; 0x40
			if (size > EP0_SIZE)
			{
				size = EP0_SIZE;
			}
			endpoint0_transmit( data, size );
    5370:	4638      	mov	r0, r7
    5372:	4631      	mov	r1, r6
    5374:	f7ff fbf8 	bl	4b68 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    5378:	1ba0      	subs	r0, r4, r6
    537a:	b280      	uxth	r0, r0
    537c:	f8a9 0000 	strh.w	r0, [r9]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    5380:	b908      	cbnz	r0, 5386 <usb_isr+0x5c2>
    5382:	2e40      	cmp	r6, #64	; 0x40
    5384:	d100      	bne.n	5388 <usb_isr+0x5c4>
			if (size > EP0_SIZE)
			{
				size = EP0_SIZE;
			}
			endpoint0_transmit( data, size );
			data += size;
    5386:	19b8      	adds	r0, r7, r6
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    5388:	f8c8 0000 	str.w	r0, [r8]
		}

		if ( setup.bRequest == 5 && setup.bmRequestType == 0 )
    538c:	4b1a      	ldr	r3, [pc, #104]	; (53f8 <usb_isr+0x634>)
    538e:	881a      	ldrh	r2, [r3, #0]
    5390:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    5394:	d104      	bne.n	53a0 <usb_isr+0x5dc>
		{
			setup.bRequest = 0;
    5396:	2200      	movs	r2, #0
    5398:	705a      	strb	r2, [r3, #1]
			#ifdef UART_DEBUG
			print("set address: ");
			printHex(setup.wValue);
			print(NL);
			#endif
			USB0_ADDR = setup.wValue;
    539a:	789a      	ldrb	r2, [r3, #2]
    539c:	4b18      	ldr	r3, [pc, #96]	; (5400 <usb_isr+0x63c>)
    539e:	701a      	strb	r2, [r3, #0]
		print(" ms");
		print(NL);
		#endif
		break;
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    53a0:	4b13      	ldr	r3, [pc, #76]	; (53f0 <usb_isr+0x62c>)
    53a2:	2201      	movs	r2, #1
    53a4:	701a      	strb	r2, [r3, #0]
    53a6:	e0ab      	b.n	5500 <usb_isr+0x73c>
    53a8:	004000c8 	.word	0x004000c8
    53ac:	1fff936e 	.word	0x1fff936e
    53b0:	1fff9366 	.word	0x1fff9366
    53b4:	400720c0 	.word	0x400720c0
    53b8:	000090b4 	.word	0x000090b4
    53bc:	000095dc 	.word	0x000095dc
    53c0:	000090e6 	.word	0x000090e6
    53c4:	00009127 	.word	0x00009127
    53c8:	0000911d 	.word	0x0000911d
    53cc:	00008f54 	.word	0x00008f54
    53d0:	1fff9360 	.word	0x1fff9360
    53d4:	1fff9380 	.word	0x1fff9380
    53d8:	0000915c 	.word	0x0000915c
    53dc:	000093eb 	.word	0x000093eb
    53e0:	1fff9212 	.word	0x1fff9212
    53e4:	1fff9218 	.word	0x1fff9218
    53e8:	1fff8cbc 	.word	0x1fff8cbc
    53ec:	1fff9258 	.word	0x1fff9258
    53f0:	40072094 	.word	0x40072094
    53f4:	1fff9048 	.word	0x1fff9048
    53f8:	1fff9358 	.word	0x1fff9358
    53fc:	1fff9215 	.word	0x1fff9215
    5400:	40072098 	.word	0x40072098
    5404:	1fff9220 	.word	0x1fff9220
		{
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
    5408:	eb07 06c4 	add.w	r6, r7, r4, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    540c:	3901      	subs	r1, #1
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    540e:	6872      	ldr	r2, [r6, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays

			if ( stat & 0x08 )
    5410:	f003 0308 	and.w	r3, r3, #8
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    5414:	f1a2 0008 	sub.w	r0, r2, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    5418:	fa5f f881 	uxtb.w	r8, r1

			if ( stat & 0x08 )
    541c:	f003 0eff 	and.w	lr, r3, #255	; 0xff
    5420:	2b00      	cmp	r3, #0
    5422:	d03a      	beq.n	549a <usb_isr+0x6d6>
			{ // transmit
				usb_free( packet );
    5424:	f000 face 	bl	59c4 <usb_free>
				packet = tx_first[ endpoint ];
    5428:	485f      	ldr	r0, [pc, #380]	; (55a8 <usb_isr+0x7e4>)
    542a:	4b60      	ldr	r3, [pc, #384]	; (55ac <usb_isr+0x7e8>)
    542c:	f850 2028 	ldr.w	r2, [r0, r8, lsl #2]
				if ( packet )
    5430:	b1fa      	cbz	r2, 5472 <usb_isr+0x6ae>
				{
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    5432:	6851      	ldr	r1, [r2, #4]
    5434:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
					b->addr = packet->buf;
    5438:	f102 0108 	add.w	r1, r2, #8
    543c:	6071      	str	r1, [r6, #4]
					switch ( tx_state[ endpoint ] )
    543e:	f813 1008 	ldrb.w	r1, [r3, r8]
    5442:	2903      	cmp	r1, #3
    5444:	d80c      	bhi.n	5460 <usb_isr+0x69c>
    5446:	e8df f001 	tbb	[pc, r1]
    544a:	0402      	.short	0x0402
    544c:	0806      	.short	0x0806
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[ endpoint ] = TX_STATE_ODD_FREE;
    544e:	2103      	movs	r1, #3
    5450:	e004      	b.n	545c <usb_isr+0x698>
						break;
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[ endpoint ] = TX_STATE_EVEN_FREE;
    5452:	2102      	movs	r1, #2
    5454:	e002      	b.n	545c <usb_isr+0x698>
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_ODD_FIRST;
    5456:	2105      	movs	r1, #5
    5458:	e000      	b.n	545c <usb_isr+0x698>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_EVEN_FIRST;
    545a:	2104      	movs	r1, #4
    545c:	f803 1008 	strb.w	r1, [r3, r8]
						break;
					default:
						break;
					}
					b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    5460:	f016 0f08 	tst.w	r6, #8
    5464:	8812      	ldrh	r2, [r2, #0]
    5466:	bf14      	ite	ne
    5468:	23c8      	movne	r3, #200	; 0xc8
    546a:	2388      	moveq	r3, #136	; 0x88
    546c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    5470:	e044      	b.n	54fc <usb_isr+0x738>
				} else {
					//serial_print("tx no packet\n");
					switch ( tx_state[ endpoint ] )
    5472:	f813 2008 	ldrb.w	r2, [r3, r8]
    5476:	2a03      	cmp	r2, #3
    5478:	d807      	bhi.n	548a <usb_isr+0x6c6>
    547a:	e8df f002 	tbb	[pc, r2]
    547e:	4141      	.short	0x4141
    5480:	0402      	.short	0x0402
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    5482:	2200      	movs	r2, #0
    5484:	e006      	b.n	5494 <usb_isr+0x6d0>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5486:	2201      	movs	r2, #1
    5488:	e004      	b.n	5494 <usb_isr+0x6d0>
						break;
					default:
						tx_state[ endpoint ] = ((uint32_t)b & 8)
    548a:	f016 0f08 	tst.w	r6, #8
    548e:	bf14      	ite	ne
    5490:	2203      	movne	r2, #3
    5492:	2202      	moveq	r2, #2
    5494:	f803 2008 	strb.w	r2, [r3, r8]
							? TX_STATE_ODD_FREE
							: TX_STATE_EVEN_FREE;
						break;
    5498:	e032      	b.n	5500 <usb_isr+0x73c>
					}
				}
			}
			else
			{ // receive
				packet->len = b->desc >> 16;
    549a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
    549e:	0c19      	lsrs	r1, r3, #16
    54a0:	f822 1c08 	strh.w	r1, [r2, #-8]
				if ( packet->len > 0 )
    54a4:	b321      	cbz	r1, 54f0 <usb_isr+0x72c>
				{
					packet->index = 0;
					packet->next = NULL;
					if ( rx_first[ endpoint ] == NULL )
    54a6:	4b42      	ldr	r3, [pc, #264]	; (55b0 <usb_isr+0x7ec>)
			else
			{ // receive
				packet->len = b->desc >> 16;
				if ( packet->len > 0 )
				{
					packet->index = 0;
    54a8:	f822 ec06 	strh.w	lr, [r2, #-6]
					packet->next = NULL;
    54ac:	f842 ec04 	str.w	lr, [r2, #-4]
					if ( rx_first[ endpoint ] == NULL )
    54b0:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    54b4:	f8df e138 	ldr.w	lr, [pc, #312]	; 55f0 <usb_isr+0x82c>
    54b8:	b912      	cbnz	r2, 54c0 <usb_isr+0x6fc>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[ endpoint ] = packet;
    54ba:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    54be:	e002      	b.n	54c6 <usb_isr+0x702>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
    54c0:	f85e 3028 	ldr.w	r3, [lr, r8, lsl #2]
    54c4:	6058      	str	r0, [r3, #4]
					}
					rx_last[ endpoint ] = packet;
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    54c6:	4a3b      	ldr	r2, [pc, #236]	; (55b4 <usb_isr+0x7f0>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
					}
					rx_last[ endpoint ] = packet;
    54c8:	f84e 0028 	str.w	r0, [lr, r8, lsl #2]
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    54cc:	f832 3018 	ldrh.w	r3, [r2, r8, lsl #1]
    54d0:	440b      	add	r3, r1
    54d2:	f822 3018 	strh.w	r3, [r2, r8, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    54d6:	f000 fa57 	bl	5988 <usb_malloc>
					if ( packet )
    54da:	b110      	cbz	r0, 54e2 <usb_isr+0x71e>
					{
						b->addr = packet->buf;
    54dc:	3008      	adds	r0, #8
    54de:	6070      	str	r0, [r6, #4]
    54e0:	e006      	b.n	54f0 <usb_isr+0x72c>
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    54e2:	4a35      	ldr	r2, [pc, #212]	; (55b8 <usb_isr+0x7f4>)
					else
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    54e4:	f847 0034 	str.w	r0, [r7, r4, lsl #3]
						usb_rx_memory_needed++;
    54e8:	7813      	ldrb	r3, [r2, #0]
    54ea:	3301      	adds	r3, #1
    54ec:	7013      	strb	r3, [r2, #0]
    54ee:	e007      	b.n	5500 <usb_isr+0x73c>
					}
				}
				else
				{
					b->desc = BDT_DESC( 64, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    54f0:	4a32      	ldr	r2, [pc, #200]	; (55bc <usb_isr+0x7f8>)
    54f2:	4b33      	ldr	r3, [pc, #204]	; (55c0 <usb_isr+0x7fc>)
    54f4:	f016 0f08 	tst.w	r6, #8
    54f8:	bf08      	it	eq
    54fa:	4613      	moveq	r3, r2
    54fc:	f847 3034 	str.w	r3, [r7, r4, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    5500:	2308      	movs	r3, #8
    5502:	702b      	strb	r3, [r5, #0]
		goto restart;
    5504:	e460      	b.n	4dc8 <usb_isr+0x4>
	}


	if ( status & USB_ISTAT_USBRST /* 01 */ )
    5506:	07e5      	lsls	r5, r4, #31
    5508:	d51e      	bpl.n	5548 <usb_isr+0x784>
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    550a:	492e      	ldr	r1, [pc, #184]	; (55c4 <usb_isr+0x800>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    550c:	482b      	ldr	r0, [pc, #172]	; (55bc <usb_isr+0x7f8>)
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    550e:	4c2e      	ldr	r4, [pc, #184]	; (55c8 <usb_isr+0x804>)
	if ( status & USB_ISTAT_USBRST /* 01 */ )
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    5510:	2302      	movs	r3, #2
    5512:	700b      	strb	r3, [r1, #0]
		ep0_tx_bdt_bank = 0;
    5514:	4b2d      	ldr	r3, [pc, #180]	; (55cc <usb_isr+0x808>)
    5516:	701a      	strb	r2, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    5518:	4b2d      	ldr	r3, [pc, #180]	; (55d0 <usb_isr+0x80c>)
    551a:	6018      	str	r0, [r3, #0]
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
		table[index( 0, RX, ODD ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    551c:	6098      	str	r0, [r3, #8]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
    551e:	482d      	ldr	r0, [pc, #180]	; (55d4 <usb_isr+0x810>)
    5520:	60d8      	str	r0, [r3, #12]
		table[index( 0, TX, EVEN ) ].desc = 0;
    5522:	611a      	str	r2, [r3, #16]
		table[index( 0, TX, ODD ) ].desc = 0;
    5524:	619a      	str	r2, [r3, #24]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    5526:	605c      	str	r4, [r3, #4]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
		table[index( 0, TX, EVEN ) ].desc = 0;
		table[index( 0, TX, ODD ) ].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5528:	4b2b      	ldr	r3, [pc, #172]	; (55d8 <usb_isr+0x814>)
    552a:	200d      	movs	r0, #13
    552c:	7018      	strb	r0, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    552e:	482b      	ldr	r0, [pc, #172]	; (55dc <usb_isr+0x818>)
    5530:	23ff      	movs	r3, #255	; 0xff
    5532:	7003      	strb	r3, [r0, #0]
		USB0_ISTAT = 0xFF;
    5534:	7033      	strb	r3, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    5536:	7402      	strb	r2, [r0, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5538:	4a29      	ldr	r2, [pc, #164]	; (55e0 <usb_isr+0x81c>)
    553a:	7013      	strb	r3, [r2, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    553c:	4b29      	ldr	r3, [pc, #164]	; (55e4 <usb_isr+0x820>)
    553e:	22bf      	movs	r2, #191	; 0xbf
    5540:	701a      	strb	r2, [r3, #0]
			USB_INTEN_USBRSTEN |
			USB_INTEN_RESUMEEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5542:	2301      	movs	r3, #1
    5544:	700b      	strb	r3, [r1, #0]
		return;
    5546:	e02b      	b.n	55a0 <usb_isr+0x7dc>
	}


	if ( (status & USB_ISTAT_STALL /* 80 */ ) )
    5548:	0620      	lsls	r0, r4, #24
	{
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    554a:	bf41      	itttt	mi
    554c:	4b22      	ldrmi	r3, [pc, #136]	; (55d8 <usb_isr+0x814>)
    554e:	220d      	movmi	r2, #13
    5550:	701a      	strbmi	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    5552:	2380      	movmi	r3, #128	; 0x80
    5554:	bf48      	it	mi
    5556:	7033      	strbmi	r3, [r6, #0]
	}
	if ( (status & USB_ISTAT_ERROR /* 02 */ ) )
    5558:	07a1      	lsls	r1, r4, #30
	{
		uint8_t err = USB0_ERRSTAT;
    555a:	bf41      	itttt	mi
    555c:	4a1f      	ldrmi	r2, [pc, #124]	; (55dc <usb_isr+0x818>)
    555e:	7813      	ldrbmi	r3, [r2, #0]
    5560:	b2db      	uxtbmi	r3, r3
		USB0_ERRSTAT = err;
    5562:	7013      	strbmi	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5564:	bf44      	itt	mi
    5566:	2302      	movmi	r3, #2
    5568:	7033      	strbmi	r3, [r6, #0]
	}

	// USB Host signalling device to enter 'sleep' state
	// The USB Module triggers this interrupt when it detects the bus has been idle for 3 ms
	if ( (status & USB_ISTAT_SLEEP /* 10 */ ) )
    556a:	06e2      	lsls	r2, r4, #27
    556c:	d509      	bpl.n	5582 <usb_isr+0x7be>
#if enableUSBSuspend_define == 1
		// Can cause issues with the virtual serial port
		#if enableVirtualSerialPort_define != 1
		info_print("Host has requested USB sleep/suspend state");
		#endif
		Output_update_usb_current( 100 ); // Set to 100 mA
    556e:	2064      	movs	r0, #100	; 0x64
    5570:	f7ff fae2 	bl	4b38 <Output_update_usb_current>
		usb_dev_sleep = 1;
    5574:	4b1c      	ldr	r3, [pc, #112]	; (55e8 <usb_isr+0x824>)
    5576:	2201      	movs	r2, #1
    5578:	701a      	strb	r2, [r3, #0]
#else
		info_print("USB Suspend Detected - Firmware USB Suspend Disabled");
#endif
		USB0_ISTAT |= USB_ISTAT_SLEEP;
    557a:	7833      	ldrb	r3, [r6, #0]
    557c:	f043 0310 	orr.w	r3, r3, #16
    5580:	7033      	strb	r3, [r6, #0]
	}

	// On USB Resume, unset the usb_dev_sleep so we don't keep sending resume signals
	if ( (status & USB_ISTAT_RESUME /* 20 */ ) )
    5582:	06a3      	lsls	r3, r4, #26
    5584:	d50c      	bpl.n	55a0 <usb_isr+0x7dc>
	{
		// Can cause issues with the virtual serial port
		#if enableVirtualSerialPort_define != 1
		info_print("Host has woken-up/resumed from sleep/suspend state");
		#endif
		Output_update_usb_current( *usb_bMaxPower * 2 );
    5586:	4b19      	ldr	r3, [pc, #100]	; (55ec <usb_isr+0x828>)
    5588:	681b      	ldr	r3, [r3, #0]
    558a:	7818      	ldrb	r0, [r3, #0]
    558c:	0040      	lsls	r0, r0, #1
    558e:	f7ff fad3 	bl	4b38 <Output_update_usb_current>
		usb_dev_sleep = 0;
    5592:	4b15      	ldr	r3, [pc, #84]	; (55e8 <usb_isr+0x824>)
    5594:	2200      	movs	r2, #0
    5596:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT |= USB_ISTAT_RESUME;
    5598:	7833      	ldrb	r3, [r6, #0]
    559a:	f043 0320 	orr.w	r3, r3, #32
    559e:	7033      	strb	r3, [r6, #0]
	}
}
    55a0:	b003      	add	sp, #12
    55a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55a6:	bf00      	nop
    55a8:	1fff9308 	.word	0x1fff9308
    55ac:	1fff924c 	.word	0x1fff924c
    55b0:	1fff929c 	.word	0x1fff929c
    55b4:	1fffa05e 	.word	0x1fffa05e
    55b8:	1fff9365 	.word	0x1fff9365
    55bc:	00400088 	.word	0x00400088
    55c0:	004000c8 	.word	0x004000c8
    55c4:	40072094 	.word	0x40072094
    55c8:	1fff925c 	.word	0x1fff925c
    55cc:	1fff92c4 	.word	0x1fff92c4
    55d0:	1fff8000 	.word	0x1fff8000
    55d4:	1fff92c8 	.word	0x1fff92c8
    55d8:	400720c0 	.word	0x400720c0
    55dc:	40072088 	.word	0x40072088
    55e0:	4007208c 	.word	0x4007208c
    55e4:	40072084 	.word	0x40072084
    55e8:	1fff9364 	.word	0x1fff9364
    55ec:	1fff8d98 	.word	0x1fff8d98
    55f0:	1fff9224 	.word	0x1fff9224

000055f4 <usb_init>:
{
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	USBInit_TimeStart = systick_millis_count;
    55f4:	4b27      	ldr	r3, [pc, #156]	; (5694 <usb_init+0xa0>)
    55f6:	681a      	ldr	r2, [r3, #0]
    55f8:	4b27      	ldr	r3, [pc, #156]	; (5698 <usb_init+0xa4>)
}



uint8_t usb_init()
{
    55fa:	b510      	push	{r4, lr}
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	USBInit_TimeStart = systick_millis_count;
    55fc:	601a      	str	r2, [r3, #0]
	USBInit_Ticks = 0;
    55fe:	4b27      	ldr	r3, [pc, #156]	; (569c <usb_init+0xa8>)
    5600:	2400      	movs	r4, #0
    5602:	801c      	strh	r4, [r3, #0]

	// XXX Set wTotalLength here instead of using defines
	//     Simplifies defines considerably
	usb_set_config_descriptor_size();
    5604:	f7ff faa8 	bl	4b58 <usb_set_config_descriptor_size>
    5608:	4622      	mov	r2, r4

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
	{
		table[i].desc = 0;
    560a:	4b25      	ldr	r3, [pc, #148]	; (56a0 <usb_init+0xac>)
    560c:	2100      	movs	r1, #0
    560e:	50d1      	str	r1, [r2, r3]
    5610:	1898      	adds	r0, r3, r2
    5612:	3208      	adds	r2, #8
	// XXX Set wTotalLength here instead of using defines
	//     Simplifies defines considerably
	usb_set_config_descriptor_size();

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    5614:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
	{
		table[i].desc = 0;
		table[i].addr = 0;
    5618:	6041      	str	r1, [r0, #4]
	// XXX Set wTotalLength here instead of using defines
	//     Simplifies defines considerably
	usb_set_config_descriptor_size();

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    561a:	d1f6      	bne.n	560a <usb_init+0x16>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    561c:	4921      	ldr	r1, [pc, #132]	; (56a4 <usb_init+0xb0>)
    561e:	680a      	ldr	r2, [r1, #0]
    5620:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    5624:	600a      	str	r2, [r1, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    5626:	4a20      	ldr	r2, [pc, #128]	; (56a8 <usb_init+0xb4>)
    5628:	2180      	movs	r1, #128	; 0x80
    562a:	7011      	strb	r1, [r2, #0]
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end
    562c:	7810      	ldrb	r0, [r2, #0]
    562e:	491e      	ldr	r1, [pc, #120]	; (56a8 <usb_init+0xb4>)
    5630:	0600      	lsls	r0, r0, #24
    5632:	d4fb      	bmi.n	562c <usb_init+0x38>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5634:	4a1d      	ldr	r2, [pc, #116]	; (56ac <usb_init+0xb8>)
    5636:	f3c3 2007 	ubfx	r0, r3, #8, #8
    563a:	7010      	strb	r0, [r2, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    563c:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5640:	0e1b      	lsrs	r3, r3, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5642:	7510      	strb	r0, [r2, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5644:	7613      	strb	r3, [r2, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5646:	23ff      	movs	r3, #255	; 0xff
    5648:	f802 3c1c 	strb.w	r3, [r2, #-28]
	USB0_ERRSTAT = 0xFF;
    564c:	f802 3c14 	strb.w	r3, [r2, #-20]
	USB0_OTGISTAT = 0xFF;
    5650:	f802 3c8c 	strb.w	r3, [r2, #-140]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    5654:	780b      	ldrb	r3, [r1, #0]
    5656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    565a:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    565c:	4b14      	ldr	r3, [pc, #80]	; (56b0 <usb_init+0xbc>)
    565e:	2001      	movs	r0, #1
    5660:	7018      	strb	r0, [r3, #0]
	USB0_USBCTRL = 0;
    5662:	2300      	movs	r3, #0
    5664:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5668:	f802 0c18 	strb.w	r0, [r2, #-24]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    566c:	4a11      	ldr	r2, [pc, #68]	; (56b4 <usb_init+0xc0>)
    566e:	2170      	movs	r1, #112	; 0x70
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    5670:	f46f 7450 	mvn.w	r4, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    5674:	7011      	strb	r1, [r2, #0]
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    5676:	4422      	add	r2, r4
    5678:	f44f 7100 	mov.w	r1, #512	; 0x200
    567c:	6011      	str	r1, [r2, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    567e:	f102 42c0 	add.w	r2, r2, #1610612736	; 0x60000000
    5682:	f502 22c8 	add.w	r2, r2, #409600	; 0x64000
    5686:	2110      	movs	r1, #16
    5688:	7011      	strb	r1, [r2, #0]

	// Do not check for power negotiation delay until Get Configuration Descriptor
	power_neg_delay = 0;
    568a:	4a0b      	ldr	r2, [pc, #44]	; (56b8 <usb_init+0xc4>)
    568c:	7013      	strb	r3, [r2, #0]

	// During initialization host isn't sleeping
	usb_dev_sleep = 0;
    568e:	4a0b      	ldr	r2, [pc, #44]	; (56bc <usb_init+0xc8>)
    5690:	7013      	strb	r3, [r2, #0]

	return 1;
}
    5692:	bd10      	pop	{r4, pc}
    5694:	1fff9050 	.word	0x1fff9050
    5698:	1fffa058 	.word	0x1fffa058
    569c:	1fffa01e 	.word	0x1fffa01e
    56a0:	1fff8000 	.word	0x1fff8000
    56a4:	40048034 	.word	0x40048034
    56a8:	4007210c 	.word	0x4007210c
    56ac:	4007209c 	.word	0x4007209c
    56b0:	40072094 	.word	0x40072094
    56b4:	e000e449 	.word	0xe000e449
    56b8:	1fff9256 	.word	0x1fff9256
    56bc:	1fff9364 	.word	0x1fff9364

000056c0 <usb_keyboard_send>:

// ----- Functions -----

// send the contents of keyboard_keys and keyboard_modifier_keys
void usb_keyboard_send()
{
    56c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    56c4:	f246 4601 	movw	r6, #25601	; 0x6401
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    56c8:	4b9a      	ldr	r3, [pc, #616]	; (5934 <usb_keyboard_send+0x274>)
    56ca:	781b      	ldrb	r3, [r3, #0]
    56cc:	b90b      	cbnz	r3, 56d2 <usb_keyboard_send+0x12>
		{
			erro_print("USB not configured...");
    56ce:	489a      	ldr	r0, [pc, #616]	; (5938 <usb_keyboard_send+0x278>)
    56d0:	e026      	b.n	5720 <usb_keyboard_send+0x60>
			return;
		}

		if ( USBKeys_Protocol == 0 ) // Boot Mode
    56d2:	4b9a      	ldr	r3, [pc, #616]	; (593c <usb_keyboard_send+0x27c>)
    56d4:	4d9a      	ldr	r5, [pc, #616]	; (5940 <usb_keyboard_send+0x280>)
    56d6:	781a      	ldrb	r2, [r3, #0]
    56d8:	461f      	mov	r7, r3
    56da:	b93a      	cbnz	r2, 56ec <usb_keyboard_send+0x2c>
		{
			if ( usb_tx_packet_count( KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    56dc:	2001      	movs	r0, #1
    56de:	f7ff fa97 	bl	4c10 <usb_tx_packet_count>
    56e2:	2803      	cmp	r0, #3
    56e4:	d90e      	bls.n	5704 <usb_keyboard_send+0x44>
					break;
			}
		}

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    56e6:	3e01      	subs	r6, #1
    56e8:	d112      	bne.n	5710 <usb_keyboard_send+0x50>
    56ea:	e013      	b.n	5714 <usb_keyboard_send+0x54>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Protocol == 1 ) // NKRO Mode
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	2b01      	cmp	r3, #1
    56f0:	d101      	bne.n	56f6 <usb_keyboard_send+0x36>
		{
			if ( usb_tx_packet_count( NKRO_KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    56f2:	2002      	movs	r0, #2
    56f4:	e7f3      	b.n	56de <usb_keyboard_send+0x1e>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Changed &
    56f6:	4b93      	ldr	r3, [pc, #588]	; (5944 <usb_keyboard_send+0x284>)
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	f013 0f60 	tst.w	r3, #96	; 0x60
    56fe:	d0f2      	beq.n	56e6 <usb_keyboard_send+0x26>
			( USBKeyChangeState_System | USBKeyChangeState_Consumer )
		)
		{
			if ( usb_tx_packet_count( SYS_CTRL_ENDPOINT ) < TX_PACKET_LIMIT )
    5700:	2003      	movs	r0, #3
    5702:	e7ec      	b.n	56de <usb_keyboard_send+0x1e>
			{
				tx_packet = usb_malloc();
    5704:	f000 f940 	bl	5988 <usb_malloc>
				if ( tx_packet )
    5708:	4604      	mov	r4, r0
    570a:	2800      	cmp	r0, #0
    570c:	d0eb      	beq.n	56e6 <usb_keyboard_send+0x26>
    570e:	e010      	b.n	5732 <usb_keyboard_send+0x72>
					break;
			}
		}

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    5710:	782b      	ldrb	r3, [r5, #0]
    5712:	b14b      	cbz	r3, 5728 <usb_keyboard_send+0x68>
		{
			transmit_previous_timeout = 1;
    5714:	2301      	movs	r3, #1
    5716:	702b      	strb	r3, [r5, #0]
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
    5718:	4b8a      	ldr	r3, [pc, #552]	; (5944 <usb_keyboard_send+0x284>)
			#if enableDeviceRestartOnUSBTimeout == 1
			warn_print("USB Transmit Timeout...restarting device");
			usb_device_software_reset();
			#else
			warn_print("USB Transmit Timeout...auto-restart disabled");
    571a:	488b      	ldr	r0, [pc, #556]	; (5948 <usb_keyboard_send+0x288>)

		// USB Timeout, drop the packet, and potentially try something more drastic to re-enable the bus
		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
    571c:	2200      	movs	r2, #0
    571e:	701a      	strb	r2, [r3, #0]

		break;
	}

	return;
}
    5720:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
			#if enableDeviceRestartOnUSBTimeout == 1
			warn_print("USB Transmit Timeout...restarting device");
			usb_device_software_reset();
			#else
			warn_print("USB Transmit Timeout...auto-restart disabled");
    5724:	f000 be54 	b.w	63d0 <_print>
			return;
		}

		// Try to wake up the device if we can't allocate a packet for some reason
		// XXX This is a bit aggressive, but seems to work well. Unfortunately, not as quick as I'd like it -HaaTa
		usb_resume();
    5728:	f7ff fac0 	bl	4cac <usb_resume>

		yield();
    572c:	f7fc ff30 	bl	2590 <yield>
	}
    5730:	e7ca      	b.n	56c8 <usb_keyboard_send+0x8>

	transmit_previous_timeout = 0;
    5732:	2300      	movs	r3, #0
    5734:	702b      	strb	r3, [r5, #0]

	// Pointer to USB tx packet buffer
	uint8_t *tx_buf = tx_packet->buf;

	// Check system control keys
	if ( USBKeys_Changed & USBKeyChangeState_System )
    5736:	4d83      	ldr	r5, [pc, #524]	; (5944 <usb_keyboard_send+0x284>)
    5738:	782b      	ldrb	r3, [r5, #0]
    573a:	069a      	lsls	r2, r3, #26
    573c:	d51a      	bpl.n	5774 <usb_keyboard_send+0xb4>
	{
		if ( Output_DebugMode )
    573e:	4b83      	ldr	r3, [pc, #524]	; (594c <usb_keyboard_send+0x28c>)
    5740:	4e83      	ldr	r6, [pc, #524]	; (5950 <usb_keyboard_send+0x290>)
    5742:	781b      	ldrb	r3, [r3, #0]
    5744:	b14b      	cbz	r3, 575a <usb_keyboard_send+0x9a>
		{
			print("SysCtrl[");
    5746:	4883      	ldr	r0, [pc, #524]	; (5954 <usb_keyboard_send+0x294>)
    5748:	f000 fe42 	bl	63d0 <_print>
			printHex_op( USBKeys_SysCtrl, 2 );
    574c:	7830      	ldrb	r0, [r6, #0]
    574e:	2102      	movs	r1, #2
    5750:	f000 fee0 	bl	6514 <printHex_op>
			print( "] " NL );
    5754:	4880      	ldr	r0, [pc, #512]	; (5958 <usb_keyboard_send+0x298>)
    5756:	f000 fe3b 	bl	63d0 <_print>
		}

		*tx_buf++ = 0x02; // ID
    575a:	2302      	movs	r3, #2
		*tx_buf   = USBKeys_SysCtrl;
    575c:	7832      	ldrb	r2, [r6, #0]
			print("SysCtrl[");
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
    575e:	7223      	strb	r3, [r4, #8]
		*tx_buf   = USBKeys_SysCtrl;
		tx_packet->len = 2;
    5760:	8023      	strh	r3, [r4, #0]
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
		*tx_buf   = USBKeys_SysCtrl;
    5762:	7262      	strb	r2, [r4, #9]
		tx_packet->len = 2;

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    5764:	2003      	movs	r0, #3
    5766:	4621      	mov	r1, r4
    5768:	f7ff fac0 	bl	4cec <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_System; // Mark sent
    576c:	782b      	ldrb	r3, [r5, #0]
    576e:	f023 0320 	bic.w	r3, r3, #32
    5772:	e0db      	b.n	592c <usb_keyboard_send+0x26c>
		return;
	}

	// Check consumer control keys
	if ( USBKeys_Changed & USBKeyChangeState_Consumer )
    5774:	065b      	lsls	r3, r3, #25
    5776:	d51b      	bpl.n	57b0 <usb_keyboard_send+0xf0>
	{
		if ( Output_DebugMode )
    5778:	4b74      	ldr	r3, [pc, #464]	; (594c <usb_keyboard_send+0x28c>)
    577a:	4e78      	ldr	r6, [pc, #480]	; (595c <usb_keyboard_send+0x29c>)
    577c:	781b      	ldrb	r3, [r3, #0]
    577e:	b14b      	cbz	r3, 5794 <usb_keyboard_send+0xd4>
		{
			print("ConsCtrl[");
    5780:	4877      	ldr	r0, [pc, #476]	; (5960 <usb_keyboard_send+0x2a0>)
    5782:	f000 fe25 	bl	63d0 <_print>
			printHex_op( USBKeys_ConsCtrl, 2 );
    5786:	8830      	ldrh	r0, [r6, #0]
    5788:	2102      	movs	r1, #2
    578a:	f000 fec3 	bl	6514 <printHex_op>
			print( "] " NL );
    578e:	4872      	ldr	r0, [pc, #456]	; (5958 <usb_keyboard_send+0x298>)
    5790:	f000 fe1e 	bl	63d0 <_print>
		}

		*tx_buf++ = 0x03; // ID
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
    5794:	8833      	ldrh	r3, [r6, #0]
    5796:	7263      	strb	r3, [r4, #9]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    5798:	2003      	movs	r0, #3
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
    579a:	0a1b      	lsrs	r3, r3, #8
    579c:	72a3      	strb	r3, [r4, #10]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    579e:	7220      	strb	r0, [r4, #8]
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
		tx_packet->len = 3;
    57a0:	8020      	strh	r0, [r4, #0]

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    57a2:	4621      	mov	r1, r4
    57a4:	f7ff faa2 	bl	4cec <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_Consumer; // Mark sent
    57a8:	782b      	ldrb	r3, [r5, #0]
    57aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    57ae:	e0bd      	b.n	592c <usb_keyboard_send+0x26c>
		return;
	}

	switch ( USBKeys_Protocol )
    57b0:	783b      	ldrb	r3, [r7, #0]
    57b2:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    57b6:	b11b      	cbz	r3, 57c0 <usb_keyboard_send+0x100>
    57b8:	2e01      	cmp	r6, #1
    57ba:	d045      	beq.n	5848 <usb_keyboard_send+0x188>
    57bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	// Send boot keyboard interrupt packet(s)
	case 0:
		// USB Boot Mode debug output
		if ( Output_DebugMode )
    57c0:	4b62      	ldr	r3, [pc, #392]	; (594c <usb_keyboard_send+0x28c>)
    57c2:	4f68      	ldr	r7, [pc, #416]	; (5964 <usb_keyboard_send+0x2a4>)
    57c4:	781b      	ldrb	r3, [r3, #0]
    57c6:	b363      	cbz	r3, 5822 <usb_keyboard_send+0x162>
		{
			dbug_msg("Boot USB: ");
    57c8:	4867      	ldr	r0, [pc, #412]	; (5968 <usb_keyboard_send+0x2a8>)
    57ca:	f000 fe01 	bl	63d0 <_print>
			printHex_op( USBKeys_Modifiers, 2 );
    57ce:	2102      	movs	r1, #2
    57d0:	7838      	ldrb	r0, [r7, #0]
    57d2:	f000 fe9f 	bl	6514 <printHex_op>
			print(" ");
    57d6:	4865      	ldr	r0, [pc, #404]	; (596c <usb_keyboard_send+0x2ac>)
    57d8:	f000 fdfa 	bl	63d0 <_print>
			printHex( 0 );
    57dc:	4630      	mov	r0, r6
    57de:	2101      	movs	r1, #1
			print(" ");
			printHex_op( USBKeys_Keys[0], 2 );
    57e0:	4e63      	ldr	r6, [pc, #396]	; (5970 <usb_keyboard_send+0x2b0>)
		if ( Output_DebugMode )
		{
			dbug_msg("Boot USB: ");
			printHex_op( USBKeys_Modifiers, 2 );
			print(" ");
			printHex( 0 );
    57e2:	f000 fe97 	bl	6514 <printHex_op>
			print(" ");
    57e6:	4861      	ldr	r0, [pc, #388]	; (596c <usb_keyboard_send+0x2ac>)
    57e8:	f000 fdf2 	bl	63d0 <_print>
			printHex_op( USBKeys_Keys[0], 2 );
    57ec:	7830      	ldrb	r0, [r6, #0]
    57ee:	2102      	movs	r1, #2
    57f0:	f000 fe90 	bl	6514 <printHex_op>
			printHex_op( USBKeys_Keys[1], 2 );
    57f4:	7870      	ldrb	r0, [r6, #1]
    57f6:	2102      	movs	r1, #2
    57f8:	f000 fe8c 	bl	6514 <printHex_op>
			printHex_op( USBKeys_Keys[2], 2 );
    57fc:	78b0      	ldrb	r0, [r6, #2]
    57fe:	2102      	movs	r1, #2
    5800:	f000 fe88 	bl	6514 <printHex_op>
			printHex_op( USBKeys_Keys[3], 2 );
    5804:	78f0      	ldrb	r0, [r6, #3]
    5806:	2102      	movs	r1, #2
    5808:	f000 fe84 	bl	6514 <printHex_op>
			printHex_op( USBKeys_Keys[4], 2 );
    580c:	7930      	ldrb	r0, [r6, #4]
    580e:	2102      	movs	r1, #2
    5810:	f000 fe80 	bl	6514 <printHex_op>
			printHex_op( USBKeys_Keys[5], 2 );
    5814:	7970      	ldrb	r0, [r6, #5]
    5816:	2102      	movs	r1, #2
    5818:	f000 fe7c 	bl	6514 <printHex_op>
			print( NL );
    581c:	4855      	ldr	r0, [pc, #340]	; (5974 <usb_keyboard_send+0x2b4>)
    581e:	f000 fdd7 	bl	63d0 <_print>
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
    5822:	783b      	ldrb	r3, [r7, #0]
    5824:	7223      	strb	r3, [r4, #8]
		*tx_buf++ = 0;
    5826:	2600      	movs	r6, #0
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    5828:	4951      	ldr	r1, [pc, #324]	; (5970 <usb_keyboard_send+0x2b0>)
			print( NL );
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
		*tx_buf++ = 0;
    582a:	7266      	strb	r6, [r4, #9]
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    582c:	2206      	movs	r2, #6
    582e:	f104 000a 	add.w	r0, r4, #10
    5832:	f7fc fea1 	bl	2578 <memcpy>
		tx_packet->len = 8;
    5836:	2308      	movs	r3, #8
    5838:	8023      	strh	r3, [r4, #0]

		// Send USB Packet
		usb_tx( KEYBOARD_ENDPOINT, tx_packet );
    583a:	2001      	movs	r0, #1
    583c:	4621      	mov	r1, r4
    583e:	f7ff fa55 	bl	4cec <usb_tx>
		USBKeys_Changed = USBKeyChangeState_None;
    5842:	702e      	strb	r6, [r5, #0]
		break;
    5844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Send NKRO keyboard interrupts packet(s)
	case 1:
		if ( Output_DebugMode )
    5848:	4b40      	ldr	r3, [pc, #256]	; (594c <usb_keyboard_send+0x28c>)
    584a:	781a      	ldrb	r2, [r3, #0]
    584c:	461e      	mov	r6, r3
    584e:	b112      	cbz	r2, 5856 <usb_keyboard_send+0x196>
		{
			dbug_msg("NKRO USB: ");
    5850:	4849      	ldr	r0, [pc, #292]	; (5978 <usb_keyboard_send+0x2b8>)
    5852:	f000 fdbd 	bl	63d0 <_print>
		}

		// Standard HID Keyboard
		if ( USBKeys_Changed )
    5856:	782b      	ldrb	r3, [r5, #0]
    5858:	2b00      	cmp	r3, #0
    585a:	d068      	beq.n	592e <usb_keyboard_send+0x26e>
		{
			// USB NKRO Debug output
			if ( Output_DebugMode )
    585c:	7833      	ldrb	r3, [r6, #0]
    585e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 5964 <usb_keyboard_send+0x2a4>
    5862:	b39b      	cbz	r3, 58cc <usb_keyboard_send+0x20c>
			{
				printHex_op( USBKeys_Modifiers, 2 );
    5864:	f898 0000 	ldrb.w	r0, [r8]
    5868:	2102      	movs	r1, #2
    586a:	f000 fe53 	bl	6514 <printHex_op>
				print(" ");
    586e:	483f      	ldr	r0, [pc, #252]	; (596c <usb_keyboard_send+0x2ac>)
    5870:	f000 fdae 	bl	63d0 <_print>
    5874:	2700      	movs	r7, #0
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    5876:	4e3e      	ldr	r6, [pc, #248]	; (5970 <usb_keyboard_send+0x2b0>)
    5878:	2102      	movs	r1, #2
    587a:	5df0      	ldrb	r0, [r6, r7]
    587c:	3701      	adds	r7, #1
    587e:	f000 fe49 	bl	6514 <printHex_op>
			// USB NKRO Debug output
			if ( Output_DebugMode )
			{
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
    5882:	2f06      	cmp	r7, #6
    5884:	d1f7      	bne.n	5876 <usb_keyboard_send+0x1b6>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    5886:	4839      	ldr	r0, [pc, #228]	; (596c <usb_keyboard_send+0x2ac>)
    5888:	f000 fda2 	bl	63d0 <_print>
    588c:	1d77      	adds	r7, r6, #5
    588e:	f106 0913 	add.w	r9, r6, #19
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    5892:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    5896:	2102      	movs	r1, #2
    5898:	f000 fe3c 	bl	6514 <printHex_op>
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				for ( uint8_t c = 6; c < 20; c++ )
    589c:	454f      	cmp	r7, r9
    589e:	d1f8      	bne.n	5892 <usb_keyboard_send+0x1d2>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    58a0:	4832      	ldr	r0, [pc, #200]	; (596c <usb_keyboard_send+0x2ac>)
    58a2:	f000 fd95 	bl	63d0 <_print>
				printHex_op( USBKeys_Keys[20], 2 );
    58a6:	7d30      	ldrb	r0, [r6, #20]
    58a8:	4e34      	ldr	r6, [pc, #208]	; (597c <usb_keyboard_send+0x2bc>)
    58aa:	2102      	movs	r1, #2
    58ac:	f000 fe32 	bl	6514 <printHex_op>
				print(" ");
    58b0:	482e      	ldr	r0, [pc, #184]	; (596c <usb_keyboard_send+0x2ac>)
    58b2:	f000 fd8d 	bl	63d0 <_print>
    58b6:	1db7      	adds	r7, r6, #6
				for ( uint8_t c = 21; c < 27; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    58b8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    58bc:	2102      	movs	r1, #2
    58be:	f000 fe29 	bl	6514 <printHex_op>
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				printHex_op( USBKeys_Keys[20], 2 );
				print(" ");
				for ( uint8_t c = 21; c < 27; c++ )
    58c2:	42be      	cmp	r6, r7
    58c4:	d1f8      	bne.n	58b8 <usb_keyboard_send+0x1f8>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print( NL );
    58c6:	482b      	ldr	r0, [pc, #172]	; (5974 <usb_keyboard_send+0x2b4>)
    58c8:	f000 fd82 	bl	63d0 <_print>
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    58cc:	4620      	mov	r0, r4

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
    58ce:	f898 3000 	ldrb.w	r3, [r8]
    58d2:	7263      	strb	r3, [r4, #9]
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    58d4:	2701      	movs	r7, #1
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    58d6:	2602      	movs	r6, #2
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    58d8:	7227      	strb	r7, [r4, #8]
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    58da:	4925      	ldr	r1, [pc, #148]	; (5970 <usb_keyboard_send+0x2b0>)
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    58dc:	f820 6b0a 	strh.w	r6, [r0], #10

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    58e0:	2206      	movs	r2, #6
    58e2:	f7fc fe49 	bl	2578 <memcpy>
			tx_buf += 6;
			tx_packet->len += 6;
    58e6:	8823      	ldrh	r3, [r4, #0]

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    58e8:	4925      	ldr	r1, [pc, #148]	; (5980 <usb_keyboard_send+0x2c0>)
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
			tx_buf += 6;
			tx_packet->len += 6;
    58ea:	4620      	mov	r0, r4
    58ec:	3306      	adds	r3, #6
    58ee:	f820 3b10 	strh.w	r3, [r0], #16

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    58f2:	220e      	movs	r2, #14
    58f4:	f7fc fe40 	bl	2578 <memcpy>
			tx_buf += 14;
			tx_packet->len += 14;
    58f8:	8823      	ldrh	r3, [r4, #0]

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    58fa:	4920      	ldr	r1, [pc, #128]	; (597c <usb_keyboard_send+0x2bc>)
			tx_packet->len += 6;

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
			tx_buf += 14;
			tx_packet->len += 14;
    58fc:	4620      	mov	r0, r4
    58fe:	330e      	adds	r3, #14
    5900:	f820 3b1e 	strh.w	r3, [r0], #30

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    5904:	463a      	mov	r2, r7
    5906:	f7fc fe37 	bl	2578 <memcpy>
			tx_buf += 1;
			tx_packet->len += 1;
    590a:	8823      	ldrh	r3, [r4, #0]

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    590c:	491d      	ldr	r1, [pc, #116]	; (5984 <usb_keyboard_send+0x2c4>)
			tx_packet->len += 14;

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
			tx_buf += 1;
			tx_packet->len += 1;
    590e:	4620      	mov	r0, r4
    5910:	443b      	add	r3, r7
    5912:	f820 3b1f 	strh.w	r3, [r0], #31

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    5916:	2206      	movs	r2, #6
    5918:	f7fc fe2e 	bl	2578 <memcpy>
			tx_packet->len += 6;
    591c:	8823      	ldrh	r3, [r4, #0]
    591e:	3306      	adds	r3, #6
    5920:	8023      	strh	r3, [r4, #0]

			// Send USB Packet
			usb_tx( NKRO_KEYBOARD_ENDPOINT, tx_packet );
    5922:	4630      	mov	r0, r6
    5924:	4621      	mov	r1, r4
    5926:	f7ff f9e1 	bl	4cec <usb_tx>
			USBKeys_Changed = USBKeyChangeState_None; // Mark sent
    592a:	2300      	movs	r3, #0
    592c:	702b      	strb	r3, [r5, #0]
    592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5932:	bf00      	nop
    5934:	1fff936e 	.word	0x1fff936e
    5938:	00009186 	.word	0x00009186
    593c:	1fff8cbc 	.word	0x1fff8cbc
    5940:	1fff9370 	.word	0x1fff9370
    5944:	1fff9209 	.word	0x1fff9209
    5948:	000091b3 	.word	0x000091b3
    594c:	1fff921d 	.word	0x1fff921d
    5950:	1fffa01c 	.word	0x1fffa01c
    5954:	000091f7 	.word	0x000091f7
    5958:	00009200 	.word	0x00009200
    595c:	1fffa05c 	.word	0x1fffa05c
    5960:	00009205 	.word	0x00009205
    5964:	1fff9208 	.word	0x1fff9208
    5968:	0000920f 	.word	0x0000920f
    596c:	00006d66 	.word	0x00006d66
    5970:	1fffa020 	.word	0x1fffa020
    5974:	000093eb 	.word	0x000093eb
    5978:	0000922d 	.word	0x0000922d
    597c:	1fffa034 	.word	0x1fffa034
    5980:	1fffa026 	.word	0x1fffa026
    5984:	1fffa035 	.word	0x1fffa035

00005988 <usb_malloc>:
// http://www.archivum.info/gnu.gcc.help/2006-08/00148/Re-GCC-Inline-Assembly.html
// http://gcc.gnu.org/ml/gcc/2012-06/msg00015.html
// __builtin_clz()

usb_packet_t *usb_malloc()
{
    5988:	b510      	push	{r4, lr}
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    598a:	b672      	cpsid	i
	avail = usb_buffer_available;
    598c:	480b      	ldr	r0, [pc, #44]	; (59bc <usb_malloc+0x34>)
    598e:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz( avail ); // clz = count leading zeros
    5990:	fab2 f182 	clz	r1, r2
	if ( n >= NUM_USB_BUFFERS )
    5994:	291d      	cmp	r1, #29
    5996:	dd02      	ble.n	599e <usb_malloc+0x16>
	{
		__enable_irq();
    5998:	b662      	cpsie	i
		return NULL;
    599a:	2000      	movs	r0, #0
    599c:	bd10      	pop	{r4, pc}
	}

	usb_buffer_available = avail & ~(0x80000000 >> n);
    599e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    59a2:	40cb      	lsrs	r3, r1
    59a4:	ea22 0203 	bic.w	r2, r2, r3
    59a8:	6002      	str	r2, [r0, #0]
	__enable_irq();
    59aa:	b662      	cpsie	i
	p = usb_buffer_memory + ( n * sizeof(usb_packet_t) );
    59ac:	4c04      	ldr	r4, [pc, #16]	; (59c0 <usb_malloc+0x38>)
    59ae:	2348      	movs	r3, #72	; 0x48
    59b0:	434b      	muls	r3, r1
    59b2:	18e0      	adds	r0, r4, r3
	*(uint32_t *)p = 0;
    59b4:	2200      	movs	r2, #0
    59b6:	50e2      	str	r2, [r4, r3]
	*(uint32_t *)(p + 4) = 0;
    59b8:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    59ba:	bd10      	pop	{r4, pc}
    59bc:	1fff9044 	.word	0x1fff9044
    59c0:	1fff8160 	.word	0x1fff8160

000059c4 <usb_free>:

void usb_free( usb_packet_t *p )
{
	unsigned int n, mask;

	n = ( (uint8_t *)p - usb_buffer_memory ) / sizeof(usb_packet_t);
    59c4:	4b0c      	ldr	r3, [pc, #48]	; (59f8 <usb_free+0x34>)
    59c6:	2248      	movs	r2, #72	; 0x48
    59c8:	1ac3      	subs	r3, r0, r3
    59ca:	fbb3 f3f2 	udiv	r3, r3, r2
	if ( n >= NUM_USB_BUFFERS )
    59ce:	2b1d      	cmp	r3, #29
    59d0:	d810      	bhi.n	59f4 <usb_free+0x30>
		return;

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if ( usb_rx_memory_needed && usb_configuration )
    59d2:	4a0a      	ldr	r2, [pc, #40]	; (59fc <usb_free+0x38>)
    59d4:	7812      	ldrb	r2, [r2, #0]
    59d6:	b122      	cbz	r2, 59e2 <usb_free+0x1e>
    59d8:	4a09      	ldr	r2, [pc, #36]	; (5a00 <usb_free+0x3c>)
    59da:	7812      	ldrb	r2, [r2, #0]
    59dc:	b10a      	cbz	r2, 59e2 <usb_free+0x1e>
	{
		usb_rx_memory( p );
    59de:	f7ff b929 	b.w	4c34 <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    59e2:	b672      	cpsid	i
	usb_buffer_available |= mask;
    59e4:	4907      	ldr	r1, [pc, #28]	; (5a04 <usb_free+0x40>)
	{
		usb_rx_memory( p );
		return;
	}

	mask = (0x80000000 >> n);
    59e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    59ea:	40da      	lsrs	r2, r3
	__disable_irq();
	usb_buffer_available |= mask;
    59ec:	680b      	ldr	r3, [r1, #0]
    59ee:	4313      	orrs	r3, r2
    59f0:	600b      	str	r3, [r1, #0]
	__enable_irq();
    59f2:	b662      	cpsie	i
    59f4:	4770      	bx	lr
    59f6:	bf00      	nop
    59f8:	1fff8160 	.word	0x1fff8160
    59fc:	1fff9365 	.word	0x1fff9365
    5a00:	1fff936e 	.word	0x1fff936e
    5a04:	1fff9044 	.word	0x1fff9044

00005a08 <usb_mouse_send>:
// Process pending mouse commands
// XXX Missing mouse movement and wheels
//     Proper support will require KLL generation of the USB descriptors
//     Similar support will be required for joystick control
void usb_mouse_send()
{
    5a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a0a:	f643 4401 	movw	r4, #15361	; 0x3c01
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    5a0e:	4b20      	ldr	r3, [pc, #128]	; (5a90 <usb_mouse_send+0x88>)
    5a10:	781b      	ldrb	r3, [r3, #0]
    5a12:	b923      	cbnz	r3, 5a1e <usb_mouse_send+0x16>
		{
			erro_print("USB not configured...");
    5a14:	481f      	ldr	r0, [pc, #124]	; (5a94 <usb_mouse_send+0x8c>)
        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
}
    5a16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
		{
			erro_print("USB not configured...");
    5a1a:	f000 bcd9 	b.w	63d0 <_print>
			return;
		}

                // Attempt to acquire a USB packet for the mouse endpoint
                if ( usb_tx_packet_count( MOUSE_ENDPOINT ) < TX_PACKET_LIMIT )
    5a1e:	2009      	movs	r0, #9
    5a20:	f7ff f8f6 	bl	4c10 <usb_tx_packet_count>
    5a24:	2802      	cmp	r0, #2
    5a26:	4d1c      	ldr	r5, [pc, #112]	; (5a98 <usb_mouse_send+0x90>)
    5a28:	d902      	bls.n	5a30 <usb_mouse_send+0x28>
                        tx_packet = usb_malloc();
                        if ( tx_packet )
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    5a2a:	3c01      	subs	r4, #1
    5a2c:	d11b      	bne.n	5a66 <usb_mouse_send+0x5e>
    5a2e:	e01c      	b.n	5a6a <usb_mouse_send+0x62>
		}

                // Attempt to acquire a USB packet for the mouse endpoint
                if ( usb_tx_packet_count( MOUSE_ENDPOINT ) < TX_PACKET_LIMIT )
                {
                        tx_packet = usb_malloc();
    5a30:	f7ff ffaa 	bl	5988 <usb_malloc>
                        if ( tx_packet )
    5a34:	4601      	mov	r1, r0
    5a36:	2800      	cmp	r0, #0
    5a38:	d0f7      	beq.n	5a2a <usb_mouse_send+0x22>
        transmit_previous_timeout = 0;

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
    5a3a:	4f18      	ldr	r7, [pc, #96]	; (5a9c <usb_mouse_send+0x94>)
        packet_data[1] = USBMouse_Relative_x;
    5a3c:	4e18      	ldr	r6, [pc, #96]	; (5aa0 <usb_mouse_send+0x98>)
        transmit_previous_timeout = 0;

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
    5a3e:	883b      	ldrh	r3, [r7, #0]
    5a40:	8103      	strh	r3, [r0, #8]
			return;
		}
		yield();
        }

        transmit_previous_timeout = 0;
    5a42:	2400      	movs	r4, #0
    5a44:	702c      	strb	r4, [r5, #0]
        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
        packet_data[1] = USBMouse_Relative_x;
        packet_data[2] = USBMouse_Relative_y;
    5a46:	4d17      	ldr	r5, [pc, #92]	; (5aa4 <usb_mouse_send+0x9c>)

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
        packet_data[1] = USBMouse_Relative_x;
    5a48:	8833      	ldrh	r3, [r6, #0]
    5a4a:	8143      	strh	r3, [r0, #10]
        packet_data[2] = USBMouse_Relative_y;
    5a4c:	882b      	ldrh	r3, [r5, #0]
    5a4e:	8183      	strh	r3, [r0, #12]
        tx_packet->len = 6;
    5a50:	2306      	movs	r3, #6
    5a52:	8003      	strh	r3, [r0, #0]
        usb_tx( MOUSE_ENDPOINT, tx_packet );
    5a54:	2009      	movs	r0, #9
    5a56:	f7ff f949 	bl	4cec <usb_tx>

        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
    5a5a:	4b13      	ldr	r3, [pc, #76]	; (5aa8 <usb_mouse_send+0xa0>)
        packet_data[2] = USBMouse_Relative_y;
        tx_packet->len = 6;
        usb_tx( MOUSE_ENDPOINT, tx_packet );

        // Clear status and state
        USBMouse_Buttons = 0;
    5a5c:	803c      	strh	r4, [r7, #0]
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
    5a5e:	701c      	strb	r4, [r3, #0]
        tx_packet->len = 6;
        usb_tx( MOUSE_ENDPOINT, tx_packet );

        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
    5a60:	8034      	strh	r4, [r6, #0]
        USBMouse_Relative_y = 0;
    5a62:	802c      	strh	r4, [r5, #0]
    5a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        tx_packet = usb_malloc();
                        if ( tx_packet )
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    5a66:	782b      	ldrb	r3, [r5, #0]
    5a68:	b173      	cbz	r3, 5a88 <usb_mouse_send+0x80>
		{
			transmit_previous_timeout = 1;
    5a6a:	2301      	movs	r3, #1
			warn_print("USB Transmit Timeout...");
    5a6c:	480f      	ldr	r0, [pc, #60]	; (5aac <usb_mouse_send+0xa4>)
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
    5a6e:	702b      	strb	r3, [r5, #0]
			warn_print("USB Transmit Timeout...");
    5a70:	f000 fcae 	bl	63d0 <_print>

                        // Clear status and state
                        USBMouse_Buttons = 0;
    5a74:	4a09      	ldr	r2, [pc, #36]	; (5a9c <usb_mouse_send+0x94>)
    5a76:	2300      	movs	r3, #0
    5a78:	8013      	strh	r3, [r2, #0]
                        USBMouse_Relative_x = 0;
    5a7a:	4a09      	ldr	r2, [pc, #36]	; (5aa0 <usb_mouse_send+0x98>)
    5a7c:	8013      	strh	r3, [r2, #0]
                        USBMouse_Relative_y = 0;
    5a7e:	4a09      	ldr	r2, [pc, #36]	; (5aa4 <usb_mouse_send+0x9c>)
    5a80:	8013      	strh	r3, [r2, #0]
                        USBMouse_Changed = 0;
    5a82:	4a09      	ldr	r2, [pc, #36]	; (5aa8 <usb_mouse_send+0xa0>)
    5a84:	7013      	strb	r3, [r2, #0]
			return;
    5a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		yield();
    5a88:	f7fc fd82 	bl	2590 <yield>
        }
    5a8c:	e7bf      	b.n	5a0e <usb_mouse_send+0x6>
    5a8e:	bf00      	nop
    5a90:	1fff936e 	.word	0x1fff936e
    5a94:	00009186 	.word	0x00009186
    5a98:	1fff9371 	.word	0x1fff9371
    5a9c:	1fff9206 	.word	0x1fff9206
    5aa0:	1fff920e 	.word	0x1fff920e
    5aa4:	1fff9210 	.word	0x1fff9210
    5aa8:	1fff920a 	.word	0x1fff920a
    5aac:	0000924b 	.word	0x0000924b

00005ab0 <usb_serial_getchar>:

// ----- Functions -----

// get the next character, or -1 if nothing received
int usb_serial_getchar()
{
    5ab0:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if ( !rx_packet )
    5ab2:	4c10      	ldr	r4, [pc, #64]	; (5af4 <usb_serial_getchar+0x44>)
    5ab4:	6823      	ldr	r3, [r4, #0]
    5ab6:	b16b      	cbz	r3, 5ad4 <usb_serial_getchar+0x24>
			return -1;
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
		if ( !rx_packet )
			return -1;
	}
	i = rx_packet->index;
    5ab8:	6820      	ldr	r0, [r4, #0]
    5aba:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
    5abc:	1c5a      	adds	r2, r3, #1
    5abe:	4403      	add	r3, r0
    5ac0:	7a1c      	ldrb	r4, [r3, #8]
	if ( i >= rx_packet->len )
    5ac2:	8803      	ldrh	r3, [r0, #0]
    5ac4:	429a      	cmp	r2, r3
    5ac6:	d312      	bcc.n	5aee <usb_serial_getchar+0x3e>
	{
		usb_free( rx_packet );
    5ac8:	f7ff ff7c 	bl	59c4 <usb_free>
		rx_packet = NULL;
    5acc:	4b09      	ldr	r3, [pc, #36]	; (5af4 <usb_serial_getchar+0x44>)
    5ace:	2200      	movs	r2, #0
    5ad0:	601a      	str	r2, [r3, #0]
    5ad2:	e00d      	b.n	5af0 <usb_serial_getchar+0x40>
	unsigned int i;
	int c;

	if ( !rx_packet )
	{
		if ( !usb_configuration )
    5ad4:	4b08      	ldr	r3, [pc, #32]	; (5af8 <usb_serial_getchar+0x48>)
    5ad6:	781b      	ldrb	r3, [r3, #0]
    5ad8:	b913      	cbnz	r3, 5ae0 <usb_serial_getchar+0x30>
			return -1;
    5ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5ade:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
    5ae0:	2005      	movs	r0, #5
    5ae2:	f7ff f879 	bl	4bd8 <usb_rx>
    5ae6:	6020      	str	r0, [r4, #0]
		if ( !rx_packet )
    5ae8:	2800      	cmp	r0, #0
    5aea:	d1e5      	bne.n	5ab8 <usb_serial_getchar+0x8>
    5aec:	e7f5      	b.n	5ada <usb_serial_getchar+0x2a>
		usb_free( rx_packet );
		rx_packet = NULL;
	}
	else
	{
		rx_packet->index = i;
    5aee:	8042      	strh	r2, [r0, #2]
	}
	return c;
    5af0:	4620      	mov	r0, r4
}
    5af2:	bd10      	pop	{r4, pc}
    5af4:	1fff937c 	.word	0x1fff937c
    5af8:	1fff936e 	.word	0x1fff936e

00005afc <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	return usb_rx_byte_count_data[ endpoint ];
    5afc:	4b04      	ldr	r3, [pc, #16]	; (5b10 <usb_serial_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_serial_available()
{
	int count = usb_rx_byte_count( CDC_RX_ENDPOINT );
    5afe:	8918      	ldrh	r0, [r3, #8]
	if ( rx_packet )
    5b00:	4b04      	ldr	r3, [pc, #16]	; (5b14 <usb_serial_available+0x18>)
    5b02:	681a      	ldr	r2, [r3, #0]
    5b04:	b11a      	cbz	r2, 5b0e <usb_serial_available+0x12>
		count += rx_packet->len - rx_packet->index;
    5b06:	8813      	ldrh	r3, [r2, #0]
    5b08:	8852      	ldrh	r2, [r2, #2]
    5b0a:	1a9b      	subs	r3, r3, r2
    5b0c:	4418      	add	r0, r3
	return count;
}
    5b0e:	4770      	bx	lr
    5b10:	1fffa05e 	.word	0x1fffa05e
    5b14:	1fff937c 	.word	0x1fff937c

00005b18 <usb_serial_write>:
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    5b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5b1c:	4d2d      	ldr	r5, [pc, #180]	; (5bd4 <usb_serial_write+0xbc>)
    5b1e:	2301      	movs	r3, #1
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    5b20:	4680      	mov	r8, r0
    5b22:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5b24:	702b      	strb	r3, [r5, #0]
	while ( size > 0 )
    5b26:	2c00      	cmp	r4, #0
    5b28:	d04f      	beq.n	5bca <usb_serial_write+0xb2>
	{
		if ( !tx_packet )
    5b2a:	4e2b      	ldr	r6, [pc, #172]	; (5bd8 <usb_serial_write+0xc0>)
    5b2c:	6833      	ldr	r3, [r6, #0]
    5b2e:	46b1      	mov	r9, r6
    5b30:	bb23      	cbnz	r3, 5b7c <usb_serial_write+0x64>
    5b32:	f648 4701 	movw	r7, #35841	; 0x8c01
		{
			wait_count = 0;
			while ( 1 )
			{
				if ( !usb_configuration )
    5b36:	4b29      	ldr	r3, [pc, #164]	; (5bdc <usb_serial_write+0xc4>)
    5b38:	781b      	ldrb	r3, [r3, #0]
    5b3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5b3e:	b90b      	cbnz	r3, 5b44 <usb_serial_write+0x2c>
				{
					tx_noautoflush = 0;
    5b40:	702a      	strb	r2, [r5, #0]
    5b42:	e014      	b.n	5b6e <usb_serial_write+0x56>
					return -1;
				}
				if ( usb_tx_packet_count( CDC_TX_ENDPOINT ) < TX_PACKET_LIMIT )
    5b44:	2006      	movs	r0, #6
    5b46:	f7ff f863 	bl	4c10 <usb_tx_packet_count>
    5b4a:	2807      	cmp	r0, #7
    5b4c:	d808      	bhi.n	5b60 <usb_serial_write+0x48>
				{
					tx_noautoflush = 1;
    5b4e:	2301      	movs	r3, #1
    5b50:	702b      	strb	r3, [r5, #0]
					tx_packet = usb_malloc();
    5b52:	f7ff ff19 	bl	5988 <usb_malloc>
    5b56:	f8c9 0000 	str.w	r0, [r9]
					if ( tx_packet )
    5b5a:	b978      	cbnz	r0, 5b7c <usb_serial_write+0x64>
						break;
					tx_noautoflush = 0;
    5b5c:	4b1d      	ldr	r3, [pc, #116]	; (5bd4 <usb_serial_write+0xbc>)
    5b5e:	7018      	strb	r0, [r3, #0]
				}
				if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    5b60:	3f01      	subs	r7, #1
    5b62:	4b1f      	ldr	r3, [pc, #124]	; (5be0 <usb_serial_write+0xc8>)
    5b64:	d001      	beq.n	5b6a <usb_serial_write+0x52>
    5b66:	781a      	ldrb	r2, [r3, #0]
    5b68:	b12a      	cbz	r2, 5b76 <usb_serial_write+0x5e>
				{
					transmit_previous_timeout = 1;
    5b6a:	2201      	movs	r2, #1
    5b6c:	701a      	strb	r2, [r3, #0]
					return -1;
    5b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				yield();
    5b76:	f7fc fd0b 	bl	2590 <yield>
			}
    5b7a:	e7dc      	b.n	5b36 <usb_serial_write+0x1e>
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    5b7c:	6831      	ldr	r1, [r6, #0]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5b7e:	4b18      	ldr	r3, [pc, #96]	; (5be0 <usb_serial_write+0xc8>)
    5b80:	2200      	movs	r2, #0
    5b82:	701a      	strb	r2, [r3, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    5b84:	884b      	ldrh	r3, [r1, #2]
    5b86:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
    5b8a:	42a2      	cmp	r2, r4
    5b8c:	bf28      	it	cs
    5b8e:	4622      	movcs	r2, r4
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5b90:	1898      	adds	r0, r3, r2
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
    5b92:	440b      	add	r3, r1
		tx_packet->index += len;
    5b94:	8048      	strh	r0, [r1, #2]
		size -= len;
    5b96:	1aa4      	subs	r4, r4, r2
    5b98:	3307      	adds	r3, #7
    5b9a:	eb08 0702 	add.w	r7, r8, r2
		while ( len-- > 0 )
    5b9e:	45b8      	cmp	r8, r7
    5ba0:	d004      	beq.n	5bac <usb_serial_write+0x94>
			*dest++ = *src++;
    5ba2:	f818 2b01 	ldrb.w	r2, [r8], #1
    5ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
    5baa:	e7f8      	b.n	5b9e <usb_serial_write+0x86>
		if ( tx_packet->index >= CDC_TX_SIZE )
    5bac:	884b      	ldrh	r3, [r1, #2]
    5bae:	2b3f      	cmp	r3, #63	; 0x3f
    5bb0:	d906      	bls.n	5bc0 <usb_serial_write+0xa8>
		{
			tx_packet->len = CDC_TX_SIZE;
    5bb2:	2340      	movs	r3, #64	; 0x40
    5bb4:	800b      	strh	r3, [r1, #0]
			usb_tx( CDC_TX_ENDPOINT, tx_packet );
    5bb6:	2006      	movs	r0, #6
    5bb8:	f7ff f898 	bl	4cec <usb_tx>
			tx_packet = NULL;
    5bbc:	2300      	movs	r3, #0
    5bbe:	6033      	str	r3, [r6, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    5bc0:	4b08      	ldr	r3, [pc, #32]	; (5be4 <usb_serial_write+0xcc>)
    5bc2:	2205      	movs	r2, #5
    5bc4:	701a      	strb	r2, [r3, #0]
    5bc6:	46b8      	mov	r8, r7
    5bc8:	e7ad      	b.n	5b26 <usb_serial_write+0xe>
	}
	tx_noautoflush = 0;
    5bca:	702c      	strb	r4, [r5, #0]
	return 0;
    5bcc:	4620      	mov	r0, r4
}
    5bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bd2:	bf00      	nop
    5bd4:	1fff9373 	.word	0x1fff9373
    5bd8:	1fff9374 	.word	0x1fff9374
    5bdc:	1fff936e 	.word	0x1fff936e
    5be0:	1fff9378 	.word	0x1fff9378
    5be4:	1fff9372 	.word	0x1fff9372

00005be8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback()
{
    5be8:	b538      	push	{r3, r4, r5, lr}
	if ( tx_noautoflush )
    5bea:	4b0e      	ldr	r3, [pc, #56]	; (5c24 <usb_serial_flush_callback+0x3c>)
    5bec:	781b      	ldrb	r3, [r3, #0]
    5bee:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    5bf2:	b9ab      	cbnz	r3, 5c20 <usb_serial_flush_callback+0x38>
		return;
	if ( tx_packet )
    5bf4:	4c0c      	ldr	r4, [pc, #48]	; (5c28 <usb_serial_flush_callback+0x40>)
    5bf6:	6821      	ldr	r1, [r4, #0]
    5bf8:	b131      	cbz	r1, 5c08 <usb_serial_flush_callback+0x20>
	{
		tx_packet->len = tx_packet->index;
    5bfa:	884b      	ldrh	r3, [r1, #2]
    5bfc:	800b      	strh	r3, [r1, #0]
		usb_tx( CDC_TX_ENDPOINT, tx_packet );
    5bfe:	2006      	movs	r0, #6
    5c00:	f7ff f874 	bl	4cec <usb_tx>
		tx_packet = NULL;
    5c04:	6025      	str	r5, [r4, #0]
    5c06:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    5c08:	f7ff febe 	bl	5988 <usb_malloc>
		if ( tx )
    5c0c:	4601      	mov	r1, r0
    5c0e:	b120      	cbz	r0, 5c1a <usb_serial_flush_callback+0x32>
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    5c10:	2006      	movs	r0, #6
		else
		{
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    5c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if ( tx )
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    5c16:	f7ff b869 	b.w	4cec <usb_tx>
		}
		else
		{
			usb_cdc_transmit_flush_timer = 1;
    5c1a:	4b04      	ldr	r3, [pc, #16]	; (5c2c <usb_serial_flush_callback+0x44>)
    5c1c:	2201      	movs	r2, #1
    5c1e:	701a      	strb	r2, [r3, #0]
    5c20:	bd38      	pop	{r3, r4, r5, pc}
    5c22:	bf00      	nop
    5c24:	1fff9373 	.word	0x1fff9373
    5c28:	1fff9374 	.word	0x1fff9374
    5c2c:	1fff9372 	.word	0x1fff9372

00005c30 <cliFunc_clear>:

// ----- CLI Command Functions -----

void cliFunc_clear( char* args)
{
	print("\033[2J\033[H\r"); // Erases the whole screen
    5c30:	4801      	ldr	r0, [pc, #4]	; (5c38 <cliFunc_clear+0x8>)
    5c32:	f000 bbcd 	b.w	63d0 <_print>
    5c36:	bf00      	nop
    5c38:	00009343 	.word	0x00009343

00005c3c <cliFunc_reload>:
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
	errorLED( CLILEDState ); // Enable/Disable error LED
}

void cliFunc_reload( char* args )
{
    5c3c:	b508      	push	{r3, lr}
	if ( flashModeEnabled_define == 0 )
	{
		print( NL );
    5c3e:	4805      	ldr	r0, [pc, #20]	; (5c54 <cliFunc_reload+0x18>)
    5c40:	f000 fbc6 	bl	63d0 <_print>
		warn_print("flashModeEnabled not set, cancelling firmware reload...");
    5c44:	4804      	ldr	r0, [pc, #16]	; (5c58 <cliFunc_reload+0x1c>)
    5c46:	f000 fbc3 	bl	63d0 <_print>
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    5c4a:	4804      	ldr	r0, [pc, #16]	; (5c5c <cliFunc_reload+0x20>)
		return;
	}

	// Request to output module to be set into firmware reload mode
	Output_firmwareReload();
}
    5c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if ( flashModeEnabled_define == 0 )
	{
		print( NL );
		warn_print("flashModeEnabled not set, cancelling firmware reload...");
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    5c50:	f000 bbbe 	b.w	63d0 <_print>
    5c54:	000093eb 	.word	0x000093eb
    5c58:	0000809a 	.word	0x0000809a
    5c5c:	000080e9 	.word	0x000080e9

00005c60 <cliFunc_reset>:
	Output_firmwareReload();
}

void cliFunc_reset( char* args )
{
	print("\033c"); // Resets the terminal
    5c60:	4801      	ldr	r0, [pc, #4]	; (5c68 <cliFunc_reset+0x8>)
    5c62:	f000 bbb5 	b.w	63d0 <_print>
    5c66:	bf00      	nop
    5c68:	0000934c 	.word	0x0000934c

00005c6c <cliFunc_help>:
		CLIHexDebugMode = 1;
	}
}

void cliFunc_help( char* args )
{
    5c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Scan array of dictionaries and print every description
	//  (no alphabetical here, too much processing/memory to sort...)
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    5c70:	2700      	movs	r7, #0
    5c72:	4b20      	ldr	r3, [pc, #128]	; (5cf4 <cliFunc_help+0x88>)
    5c74:	781b      	ldrb	r3, [r3, #0]
    5c76:	b2fd      	uxtb	r5, r7
    5c78:	42ab      	cmp	r3, r5
    5c7a:	d938      	bls.n	5cee <cliFunc_help+0x82>
	{
		// Print the name of each dictionary as a title
		print( NL "\033[1;32m" );
    5c7c:	481e      	ldr	r0, [pc, #120]	; (5cf8 <cliFunc_help+0x8c>)
    5c7e:	f000 fba7 	bl	63d0 <_print>
		_print( CLIDictNames[dict] ); // This print is requride by AVR (flash)
    5c82:	4b1e      	ldr	r3, [pc, #120]	; (5cfc <cliFunc_help+0x90>)
    5c84:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    5c88:	f000 fba2 	bl	63d0 <_print>
		print( "\033[0m" NL );
    5c8c:	481c      	ldr	r0, [pc, #112]	; (5d00 <cliFunc_help+0x94>)
    5c8e:	f000 fb9f 	bl	63d0 <_print>

		// Parse each cmd/description until a null command entry is found
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    5c92:	f04f 0900 	mov.w	r9, #0
    5c96:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5d18 <cliFunc_help+0xac>
    5c9a:	fa5f f389 	uxtb.w	r3, r9
    5c9e:	260c      	movs	r6, #12
    5ca0:	435e      	muls	r6, r3
    5ca2:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    5ca6:	5999      	ldr	r1, [r3, r6]
    5ca8:	b1f9      	cbz	r1, 5cea <cliFunc_help+0x7e>
		{
			dPrintStrs(" \033[35m", CLIDict[dict][cmd].name, "\033[0m");
    5caa:	4816      	ldr	r0, [pc, #88]	; (5d04 <cliFunc_help+0x98>)
    5cac:	4a16      	ldr	r2, [pc, #88]	; (5d08 <cliFunc_help+0x9c>)
    5cae:	4b17      	ldr	r3, [pc, #92]	; (5d0c <cliFunc_help+0xa0>)
    5cb0:	f000 fb74 	bl	639c <printstrs>

			// Determine number of spaces to tab by the length of the command and TabAlign
			uint8_t padLength = CLIEntryTabAlign - lenStr( (char*)CLIDict[dict][cmd].name );
    5cb4:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    5cb8:	5998      	ldr	r0, [r3, r6]
    5cba:	f000 fb8b 	bl	63d4 <lenStr>
    5cbe:	f1c0 000d 	rsb	r0, r0, #13
    5cc2:	b2c4      	uxtb	r4, r0
			while ( padLength-- > 0 )
    5cc4:	b12c      	cbz	r4, 5cd2 <cliFunc_help+0x66>
				print(" ");
    5cc6:	4812      	ldr	r0, [pc, #72]	; (5d10 <cliFunc_help+0xa4>)
    5cc8:	3c01      	subs	r4, #1
    5cca:	f000 fb81 	bl	63d0 <_print>
    5cce:	b2e4      	uxtb	r4, r4
    5cd0:	e7f8      	b.n	5cc4 <cliFunc_help+0x58>

			_print( CLIDict[dict][cmd].description ); // This print is required by AVR (flash)
    5cd2:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    5cd6:	441e      	add	r6, r3
    5cd8:	f109 0901 	add.w	r9, r9, #1
    5cdc:	6870      	ldr	r0, [r6, #4]
    5cde:	f000 fb77 	bl	63d0 <_print>
			print( NL );
    5ce2:	480c      	ldr	r0, [pc, #48]	; (5d14 <cliFunc_help+0xa8>)
    5ce4:	f000 fb74 	bl	63d0 <_print>
    5ce8:	e7d5      	b.n	5c96 <cliFunc_help+0x2a>
    5cea:	3701      	adds	r7, #1
    5cec:	e7c1      	b.n	5c72 <cliFunc_help+0x6>
		}
	}
}
    5cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5cf2:	bf00      	nop
    5cf4:	1fff9387 	.word	0x1fff9387
    5cf8:	0000934f 	.word	0x0000934f
    5cfc:	1fff9804 	.word	0x1fff9804
    5d00:	00009359 	.word	0x00009359
    5d04:	00009360 	.word	0x00009360
    5d08:	000081f8 	.word	0x000081f8
    5d0c:	0000927a 	.word	0x0000927a
    5d10:	00006d66 	.word	0x00006d66
    5d14:	000093eb 	.word	0x000093eb
    5d18:	1fff97d8 	.word	0x1fff97d8

00005d1c <cliFunc_led>:

void cliFunc_led( char* args )
{
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
    5d1c:	4b03      	ldr	r3, [pc, #12]	; (5d2c <cliFunc_led+0x10>)
    5d1e:	7818      	ldrb	r0, [r3, #0]
    5d20:	f080 0002 	eor.w	r0, r0, #2
    5d24:	7018      	strb	r0, [r3, #0]
	errorLED( CLILEDState ); // Enable/Disable error LED
    5d26:	f000 bb2b 	b.w	6380 <errorLED>
    5d2a:	bf00      	nop
    5d2c:	1fff9386 	.word	0x1fff9386

00005d30 <cliFunc_restart>:
}

void cliFunc_restart( char* args )
{
	// Trigger an overall software reset
	Output_softReset();
    5d30:	f7fe beee 	b.w	4b10 <Output_softReset>

00005d34 <cliFunc_version>:
}

void cliFunc_version( char* args )
{
    5d34:	b508      	push	{r3, lr}
	print( NL );
    5d36:	4821      	ldr	r0, [pc, #132]	; (5dbc <cliFunc_version+0x88>)
    5d38:	f000 fb4a 	bl	63d0 <_print>
	print( " \033[1mRevision:\033[0m      " CLI_Revision       NL );
    5d3c:	4820      	ldr	r0, [pc, #128]	; (5dc0 <cliFunc_version+0x8c>)
    5d3e:	f000 fb47 	bl	63d0 <_print>
	print( " \033[1mBranch:\033[0m        " CLI_Branch         NL );
    5d42:	4820      	ldr	r0, [pc, #128]	; (5dc4 <cliFunc_version+0x90>)
    5d44:	f000 fb44 	bl	63d0 <_print>
	print( " \033[1mTree Status:\033[0m   " CLI_ModifiedStatus CLI_ModifiedFiles NL );
    5d48:	481f      	ldr	r0, [pc, #124]	; (5dc8 <cliFunc_version+0x94>)
    5d4a:	f000 fb41 	bl	63d0 <_print>
	print( " \033[1mRepo Origin:\033[0m   " CLI_RepoOrigin     NL );
    5d4e:	481f      	ldr	r0, [pc, #124]	; (5dcc <cliFunc_version+0x98>)
    5d50:	f000 fb3e 	bl	63d0 <_print>
	print( " \033[1mCommit Date:\033[0m   " CLI_CommitDate     NL );
    5d54:	481e      	ldr	r0, [pc, #120]	; (5dd0 <cliFunc_version+0x9c>)
    5d56:	f000 fb3b 	bl	63d0 <_print>
	print( " \033[1mCommit Author:\033[0m " CLI_CommitAuthor   NL );
    5d5a:	481e      	ldr	r0, [pc, #120]	; (5dd4 <cliFunc_version+0xa0>)
    5d5c:	f000 fb38 	bl	63d0 <_print>
	print( " \033[1mBuild Date:\033[0m    " CLI_BuildDate      NL );
    5d60:	481d      	ldr	r0, [pc, #116]	; (5dd8 <cliFunc_version+0xa4>)
    5d62:	f000 fb35 	bl	63d0 <_print>
	print( " \033[1mBuild OS:\033[0m      " CLI_BuildOS        NL );
    5d66:	481d      	ldr	r0, [pc, #116]	; (5ddc <cliFunc_version+0xa8>)
    5d68:	f000 fb32 	bl	63d0 <_print>
	print( " \033[1mArchitecture:\033[0m  " CLI_Arch           NL );
    5d6c:	481c      	ldr	r0, [pc, #112]	; (5de0 <cliFunc_version+0xac>)
    5d6e:	f000 fb2f 	bl	63d0 <_print>
	print( " \033[1mChip:\033[0m          " CLI_Chip           NL );
    5d72:	481c      	ldr	r0, [pc, #112]	; (5de4 <cliFunc_version+0xb0>)
    5d74:	f000 fb2c 	bl	63d0 <_print>
	print( " \033[1mCPU:\033[0m           " CLI_CPU            NL );
    5d78:	481b      	ldr	r0, [pc, #108]	; (5de8 <cliFunc_version+0xb4>)
    5d7a:	f000 fb29 	bl	63d0 <_print>
	print( " \033[1mDevice:\033[0m        " CLI_Device         NL );
    5d7e:	481b      	ldr	r0, [pc, #108]	; (5dec <cliFunc_version+0xb8>)
    5d80:	f000 fb26 	bl	63d0 <_print>
	print( " \033[1mModules:\033[0m       " CLI_Modules        NL );
    5d84:	481a      	ldr	r0, [pc, #104]	; (5df0 <cliFunc_version+0xbc>)
    5d86:	f000 fb23 	bl	63d0 <_print>
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
    5d8a:	481a      	ldr	r0, [pc, #104]	; (5df4 <cliFunc_version+0xc0>)
    5d8c:	f000 fb20 	bl	63d0 <_print>
	printHex32_op( SIM_UIDH, 4 );
    5d90:	4b19      	ldr	r3, [pc, #100]	; (5df8 <cliFunc_version+0xc4>)
    5d92:	2104      	movs	r1, #4
    5d94:	6818      	ldr	r0, [r3, #0]
    5d96:	f000 fbf9 	bl	658c <printHex32_op>
	printHex32_op( SIM_UIDMH, 4 );
    5d9a:	4b18      	ldr	r3, [pc, #96]	; (5dfc <cliFunc_version+0xc8>)
    5d9c:	2104      	movs	r1, #4
    5d9e:	6818      	ldr	r0, [r3, #0]
    5da0:	f000 fbf4 	bl	658c <printHex32_op>
	printHex32_op( SIM_UIDML, 4 );
    5da4:	4b16      	ldr	r3, [pc, #88]	; (5e00 <cliFunc_version+0xcc>)
    5da6:	2104      	movs	r1, #4
    5da8:	6818      	ldr	r0, [r3, #0]
    5daa:	f000 fbef 	bl	658c <printHex32_op>
	printHex32_op( SIM_UIDL, 4 );
    5dae:	4b15      	ldr	r3, [pc, #84]	; (5e04 <cliFunc_version+0xd0>)
    5db0:	2104      	movs	r1, #4
    5db2:	6818      	ldr	r0, [r3, #0]
#elif defined(_at90usb162_) || defined(_atmega32u4_) || defined(_at90usb646_) || defined(_at90usb1286_)
#else
#error "No unique id defined."
#endif
}
    5db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
	printHex32_op( SIM_UIDH, 4 );
	printHex32_op( SIM_UIDMH, 4 );
	printHex32_op( SIM_UIDML, 4 );
	printHex32_op( SIM_UIDL, 4 );
    5db8:	f000 bbe8 	b.w	658c <printHex32_op>
    5dbc:	000093eb 	.word	0x000093eb
    5dc0:	00009367 	.word	0x00009367
    5dc4:	000093aa 	.word	0x000093aa
    5dc8:	000093cb 	.word	0x000093cb
    5dcc:	000093ee 	.word	0x000093ee
    5dd0:	0000942e 	.word	0x0000942e
    5dd4:	00009462 	.word	0x00009462
    5dd8:	000094a0 	.word	0x000094a0
    5ddc:	000094d4 	.word	0x000094d4
    5de0:	000094fc 	.word	0x000094fc
    5de4:	0000951a 	.word	0x0000951a
    5de8:	00009542 	.word	0x00009542
    5dec:	00009566 	.word	0x00009566
    5df0:	00009589 	.word	0x00009589
    5df4:	000095e0 	.word	0x000095e0
    5df8:	40048054 	.word	0x40048054
    5dfc:	40048058 	.word	0x40048058
    5e00:	4004805c 	.word	0x4004805c
    5e04:	40048060 	.word	0x40048060

00005e08 <cliFunc_cliDebug>:
{
	print("\033[2J\033[H\r"); // Erases the whole screen
}

void cliFunc_cliDebug( char* args )
{
    5e08:	b510      	push	{r4, lr}
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    5e0a:	4c09      	ldr	r4, [pc, #36]	; (5e30 <cliFunc_cliDebug+0x28>)
	{
		print( NL );
    5e0c:	4809      	ldr	r0, [pc, #36]	; (5e34 <cliFunc_cliDebug+0x2c>)
}

void cliFunc_cliDebug( char* args )
{
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    5e0e:	7823      	ldrb	r3, [r4, #0]
    5e10:	b133      	cbz	r3, 5e20 <cliFunc_cliDebug+0x18>
	{
		print( NL );
    5e12:	f000 fadd 	bl	63d0 <_print>
		info_print("Hex debug mode disabled...");
    5e16:	4808      	ldr	r0, [pc, #32]	; (5e38 <cliFunc_cliDebug+0x30>)
    5e18:	f000 fada 	bl	63d0 <_print>
		CLIHexDebugMode = 0;
    5e1c:	2300      	movs	r3, #0
    5e1e:	e005      	b.n	5e2c <cliFunc_cliDebug+0x24>
	}
	else
	{
		print( NL );
    5e20:	f000 fad6 	bl	63d0 <_print>
		info_print("Hex debug mode enabled...");
    5e24:	4805      	ldr	r0, [pc, #20]	; (5e3c <cliFunc_cliDebug+0x34>)
    5e26:	f000 fad3 	bl	63d0 <_print>
		CLIHexDebugMode = 1;
    5e2a:	2301      	movs	r3, #1
    5e2c:	7023      	strb	r3, [r4, #0]
    5e2e:	bd10      	pop	{r4, pc}
    5e30:	1fff9384 	.word	0x1fff9384
    5e34:	000093eb 	.word	0x000093eb
    5e38:	000095f9 	.word	0x000095f9
    5e3c:	00009628 	.word	0x00009628

00005e40 <CLI_argumentIsolation>:
// Takes a string, returns two pointers
//  One to the first non-space character
//  The second to the next argument (first NULL if there isn't an argument). delimited by a space
//  Places a NULL at the first space after the first argument
void CLI_argumentIsolation( char* string, char** first, char** second )
{
    5e40:	b530      	push	{r4, r5, lr}
	// Mark out the first argument
	// This is done by finding the first space after a list of non-spaces and setting it NULL
	char* cmdPtr = string - 1;
    5e42:	3801      	subs	r0, #1
	while ( *++cmdPtr == ' ' ); // Skips leading spaces, and points to first character of cmd
    5e44:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5e48:	2b20      	cmp	r3, #32
    5e4a:	d0fb      	beq.n	5e44 <CLI_argumentIsolation+0x4>

	// Locates first space delimiter
	char* argPtr = cmdPtr + 1;
    5e4c:	1c45      	adds	r5, r0, #1
    5e4e:	462b      	mov	r3, r5
    5e50:	3501      	adds	r5, #1
	while ( *argPtr != ' ' && *argPtr != '\0' )
    5e52:	781c      	ldrb	r4, [r3, #0]
    5e54:	f014 04df 	ands.w	r4, r4, #223	; 0xdf
    5e58:	d1f9      	bne.n	5e4e <CLI_argumentIsolation+0xe>
		argPtr++;

	// Point to the first character of args or a NULL (no args) and set the space delimiter as a NULL
	(++argPtr)[-1] = '\0';
    5e5a:	f803 4b01 	strb.w	r4, [r3], #1

	// Set return variables
	*first = cmdPtr;
    5e5e:	6008      	str	r0, [r1, #0]
	*second = argPtr;
    5e60:	6013      	str	r3, [r2, #0]
    5e62:	bd30      	pop	{r4, r5, pc}

00005e64 <CLI_commandLookup>:
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    5e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    5e68:	4b22      	ldr	r3, [pc, #136]	; (5ef4 <CLI_commandLookup+0x90>)
    5e6a:	781b      	ldrb	r3, [r3, #0]
	*second = argPtr;
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    5e6c:	b089      	sub	sp, #36	; 0x24
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d03c      	beq.n	5eec <CLI_commandLookup+0x88>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    5e72:	4d21      	ldr	r5, [pc, #132]	; (5ef8 <CLI_commandLookup+0x94>)
    5e74:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    5e76:	4628      	mov	r0, r5
    5e78:	a906      	add	r1, sp, #24
    5e7a:	aa07      	add	r2, sp, #28
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    5e7c:	54ec      	strb	r4, [r5, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    5e7e:	f7ff ffdf 	bl	5e40 <CLI_argumentIsolation>
    5e82:	46a8      	mov	r8, r5

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    5e84:	4b1d      	ldr	r3, [pc, #116]	; (5efc <CLI_commandLookup+0x98>)
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	b2e6      	uxtb	r6, r4
    5e8a:	42b3      	cmp	r3, r6
    5e8c:	d919      	bls.n	5ec2 <CLI_commandLookup+0x5e>
    5e8e:	2700      	movs	r7, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    5e90:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5f24 <CLI_commandLookup+0xc0>
    5e94:	230c      	movs	r3, #12
    5e96:	b2fd      	uxtb	r5, r7
    5e98:	435d      	muls	r5, r3
    5e9a:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    5e9e:	5959      	ldr	r1, [r3, r5]
    5ea0:	b169      	cbz	r1, 5ebe <CLI_commandLookup+0x5a>
		{
			// Compare the first argument and each command entry
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == -1 )
    5ea2:	9806      	ldr	r0, [sp, #24]
    5ea4:	f000 fb7d 	bl	65a2 <eqStr>
    5ea8:	3001      	adds	r0, #1
    5eaa:	f107 0701 	add.w	r7, r7, #1
    5eae:	d1ef      	bne.n	5e90 <CLI_commandLookup+0x2c>
			{
				// Run the specified command function pointer
				//   argPtr is already pointing at the first character of the arguments
				(*(void (*)(char*))CLIDict[dict][cmd].function)( argPtr );
    5eb0:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    5eb4:	9807      	ldr	r0, [sp, #28]
    5eb6:	441d      	add	r5, r3
    5eb8:	68ab      	ldr	r3, [r5, #8]
    5eba:	4798      	blx	r3

				return;
    5ebc:	e016      	b.n	5eec <CLI_commandLookup+0x88>
    5ebe:	3401      	adds	r4, #1
    5ec0:	e7e0      	b.n	5e84 <CLI_commandLookup+0x20>
			}
		}
	}

	// No match for the command...
	print( NL );
    5ec2:	4c0f      	ldr	r4, [pc, #60]	; (5f00 <CLI_commandLookup+0x9c>)
    5ec4:	4620      	mov	r0, r4
    5ec6:	f000 fa83 	bl	63d0 <_print>
	erro_dPrint("\"", CLILineBuffer, "\" is not a valid command...type \033[35mhelp\033[0m");
    5eca:	4b0e      	ldr	r3, [pc, #56]	; (5f04 <CLI_commandLookup+0xa0>)
    5ecc:	9300      	str	r3, [sp, #0]
    5ece:	4b0e      	ldr	r3, [pc, #56]	; (5f08 <CLI_commandLookup+0xa4>)
    5ed0:	9301      	str	r3, [sp, #4]
    5ed2:	4b0e      	ldr	r3, [pc, #56]	; (5f0c <CLI_commandLookup+0xa8>)
    5ed4:	9303      	str	r3, [sp, #12]
    5ed6:	4b0e      	ldr	r3, [pc, #56]	; (5f10 <CLI_commandLookup+0xac>)
    5ed8:	9305      	str	r3, [sp, #20]
    5eda:	f8cd 8008 	str.w	r8, [sp, #8]
    5ede:	9404      	str	r4, [sp, #16]
    5ee0:	480c      	ldr	r0, [pc, #48]	; (5f14 <CLI_commandLookup+0xb0>)
    5ee2:	490d      	ldr	r1, [pc, #52]	; (5f18 <CLI_commandLookup+0xb4>)
    5ee4:	4a0d      	ldr	r2, [pc, #52]	; (5f1c <CLI_commandLookup+0xb8>)
    5ee6:	4b0e      	ldr	r3, [pc, #56]	; (5f20 <CLI_commandLookup+0xbc>)
    5ee8:	f000 fa58 	bl	639c <printstrs>
}
    5eec:	b009      	add	sp, #36	; 0x24
    5eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ef2:	bf00      	nop
    5ef4:	1fff982c 	.word	0x1fff982c
    5ef8:	1fff9770 	.word	0x1fff9770
    5efc:	1fff9387 	.word	0x1fff9387
    5f00:	000093eb 	.word	0x000093eb
    5f04:	00009666 	.word	0x00009666
    5f08:	0000966e 	.word	0x0000966e
    5f0c:	00009670 	.word	0x00009670
    5f10:	0000927a 	.word	0x0000927a
    5f14:	00009656 	.word	0x00009656
    5f18:	00009659 	.word	0x00009659
    5f1c:	000081fb 	.word	0x000081fb
    5f20:	00009660 	.word	0x00009660
    5f24:	1fff97d8 	.word	0x1fff97d8

00005f28 <CLI_registerDictionary>:

// Registers a command dictionary with the CLI
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
    5f28:	b510      	push	{r4, lr}
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
    5f2a:	4a09      	ldr	r2, [pc, #36]	; (5f50 <CLI_registerDictionary+0x28>)
    5f2c:	7813      	ldrb	r3, [r2, #0]
    5f2e:	2b09      	cmp	r3, #9
    5f30:	d904      	bls.n	5f3c <CLI_registerDictionary+0x14>
	{
		erro_print("Max number of dictionaries defined already...");
    5f32:	4808      	ldr	r0, [pc, #32]	; (5f54 <CLI_registerDictionary+0x2c>)
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}
    5f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
	{
		erro_print("Max number of dictionaries defined already...");
    5f38:	f000 ba4a 	b.w	63d0 <_print>
		return;
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
    5f3c:	4c06      	ldr	r4, [pc, #24]	; (5f58 <CLI_registerDictionary+0x30>)
    5f3e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
    5f42:	1c59      	adds	r1, r3, #1
    5f44:	7011      	strb	r1, [r2, #0]
    5f46:	4a05      	ldr	r2, [pc, #20]	; (5f5c <CLI_registerDictionary+0x34>)
    5f48:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    5f4c:	bd10      	pop	{r4, pc}
    5f4e:	bf00      	nop
    5f50:	1fff9387 	.word	0x1fff9387
    5f54:	0000969e 	.word	0x0000969e
    5f58:	1fff9804 	.word	0x1fff9804
    5f5c:	1fff97d8 	.word	0x1fff97d8

00005f60 <CLI_init>:

// Initialize the CLI
inline void CLI_init()
{
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    5f60:	4b0e      	ldr	r3, [pc, #56]	; (5f9c <CLI_init+0x3c>)

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    5f62:	480f      	ldr	r0, [pc, #60]	; (5fa0 <CLI_init+0x40>)
	print("\033[1;34m:\033[0m "); // Blue bold prompt
}

// Initialize the CLI
inline void CLI_init()
{
    5f64:	b510      	push	{r4, lr}
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    5f66:	2400      	movs	r4, #0
    5f68:	701c      	strb	r4, [r3, #0]

	// History starts empty
	CLIHistoryHead = 0;
    5f6a:	4b0e      	ldr	r3, [pc, #56]	; (5fa4 <CLI_init+0x44>)
    5f6c:	701c      	strb	r4, [r3, #0]
	CLIHistoryCurrent = 0;
    5f6e:	4b0e      	ldr	r3, [pc, #56]	; (5fa8 <CLI_init+0x48>)
    5f70:	701c      	strb	r4, [r3, #0]
	CLIHistoryTail = 0;
    5f72:	4b0e      	ldr	r3, [pc, #56]	; (5fac <CLI_init+0x4c>)
    5f74:	701c      	strb	r4, [r3, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    5f76:	f000 fa2b 	bl	63d0 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    5f7a:	480d      	ldr	r0, [pc, #52]	; (5fb0 <CLI_init+0x50>)
    5f7c:	f000 fa28 	bl	63d0 <_print>

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    5f80:	4b0c      	ldr	r3, [pc, #48]	; (5fb4 <CLI_init+0x54>)
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    5f82:	480d      	ldr	r0, [pc, #52]	; (5fb8 <CLI_init+0x58>)
    5f84:	490d      	ldr	r1, [pc, #52]	; (5fbc <CLI_init+0x5c>)

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    5f86:	701c      	strb	r4, [r3, #0]
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    5f88:	f7ff ffce 	bl	5f28 <CLI_registerDictionary>

	// Initialize main LED
	init_errorLED();
    5f8c:	f000 f9ea 	bl	6364 <init_errorLED>
	CLILEDState = 0;
    5f90:	4b0b      	ldr	r3, [pc, #44]	; (5fc0 <CLI_init+0x60>)
    5f92:	701c      	strb	r4, [r3, #0]

	// Hex debug mode is off by default
	CLIHexDebugMode = 0;
    5f94:	4b0b      	ldr	r3, [pc, #44]	; (5fc4 <CLI_init+0x64>)
    5f96:	701c      	strb	r4, [r3, #0]
    5f98:	bd10      	pop	{r4, pc}
    5f9a:	bf00      	nop
    5f9c:	1fff982c 	.word	0x1fff982c
    5fa0:	000096e3 	.word	0x000096e3
    5fa4:	1fff97d5 	.word	0x1fff97d5
    5fa8:	1fff9385 	.word	0x1fff9385
    5fac:	1fff9800 	.word	0x1fff9800
    5fb0:	000096e9 	.word	0x000096e9
    5fb4:	1fff9387 	.word	0x1fff9387
    5fb8:	000097c4 	.word	0x000097c4
    5fbc:	000098c6 	.word	0x000098c6
    5fc0:	1fff9386 	.word	0x1fff9386
    5fc4:	1fff9384 	.word	0x1fff9384

00005fc8 <CLI_tabCompletion>:
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    5fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    5fcc:	4d28      	ldr	r5, [pc, #160]	; (6070 <CLI_tabCompletion+0xa8>)
    5fce:	782b      	ldrb	r3, [r5, #0]
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    5fd0:	b085      	sub	sp, #20
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d048      	beq.n	6068 <CLI_tabCompletion+0xa0>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    5fd6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 6084 <CLI_tabCompletion+0xbc>
    5fda:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    5fdc:	4640      	mov	r0, r8
    5fde:	a902      	add	r1, sp, #8
    5fe0:	aa03      	add	r2, sp, #12
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    5fe2:	f808 4003 	strb.w	r4, [r8, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    5fe6:	f7ff ff2b 	bl	5e40 <CLI_argumentIsolation>

	// Tab match pointer
	char* tabMatch = 0;
	uint8_t matches = 0;
    5fea:	4627      	mov	r7, r4
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );

	// Tab match pointer
	char* tabMatch = 0;
    5fec:	4626      	mov	r6, r4
    5fee:	46c3      	mov	fp, r8
	uint8_t matches = 0;

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    5ff0:	4b20      	ldr	r3, [pc, #128]	; (6074 <CLI_tabCompletion+0xac>)
    5ff2:	781b      	ldrb	r3, [r3, #0]
    5ff4:	fa5f fa84 	uxtb.w	sl, r4
    5ff8:	4553      	cmp	r3, sl
    5ffa:	d91e      	bls.n	603a <CLI_tabCompletion+0x72>
    5ffc:	f04f 0900 	mov.w	r9, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    6000:	fa5f f389 	uxtb.w	r3, r9
    6004:	f04f 080c 	mov.w	r8, #12
    6008:	fb08 f803 	mul.w	r8, r8, r3
    600c:	4b1a      	ldr	r3, [pc, #104]	; (6078 <CLI_tabCompletion+0xb0>)
    600e:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
    6012:	f852 1008 	ldr.w	r1, [r2, r8]
    6016:	b171      	cbz	r1, 6036 <CLI_tabCompletion+0x6e>
		{
			// Compare the first argument piece to each command entry to see if it is "like"
			// NOTE: To save on processing, we only care about the commands and ignore the arguments
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
    6018:	9802      	ldr	r0, [sp, #8]
    601a:	9301      	str	r3, [sp, #4]
    601c:	f000 fac1 	bl	65a2 <eqStr>
    6020:	9b01      	ldr	r3, [sp, #4]
    6022:	b928      	cbnz	r0, 6030 <CLI_tabCompletion+0x68>
			{
				// TODO Make list of commands if multiple matches
				matches++;
				tabMatch = (char*)CLIDict[dict][cmd].name;
    6024:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    6028:	3701      	adds	r7, #1
				tabMatch = (char*)CLIDict[dict][cmd].name;
    602a:	f853 6008 	ldr.w	r6, [r3, r8]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    602e:	b2ff      	uxtb	r7, r7
    6030:	f109 0901 	add.w	r9, r9, #1
    6034:	e7e4      	b.n	6000 <CLI_tabCompletion+0x38>
    6036:	3401      	adds	r4, #1
    6038:	e7da      	b.n	5ff0 <CLI_tabCompletion+0x28>
			}
		}
	}

	// Only tab complete if there was 1 match
	if ( matches == 1 )
    603a:	2f01      	cmp	r7, #1
    603c:	d114      	bne.n	6068 <CLI_tabCompletion+0xa0>
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    603e:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    6040:	480e      	ldr	r0, [pc, #56]	; (607c <CLI_tabCompletion+0xb4>)

	// Only tab complete if there was 1 match
	if ( matches == 1 )
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    6042:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    6044:	f000 f9c4 	bl	63d0 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    6048:	480d      	ldr	r0, [pc, #52]	; (6080 <CLI_tabCompletion+0xb8>)
    604a:	f000 f9c1 	bl	63d0 <_print>

		// Reprint the prompt (automatically clears the line)
		prompt();

		// Display the command
		dPrint( tabMatch );
    604e:	4630      	mov	r0, r6
    6050:	f7fe fd56 	bl	4b00 <Output_putstr>

		// There are no index counts, so just copy the whole string to the input buffer
		while ( *tabMatch != '\0' )
    6054:	7833      	ldrb	r3, [r6, #0]
    6056:	b13b      	cbz	r3, 6068 <CLI_tabCompletion+0xa0>
		{
			CLILineBuffer[CLILineBufferCurrent++] = *tabMatch++;
    6058:	782b      	ldrb	r3, [r5, #0]
    605a:	1c5a      	adds	r2, r3, #1
    605c:	702a      	strb	r2, [r5, #0]
    605e:	f816 2b01 	ldrb.w	r2, [r6], #1
    6062:	f80b 2003 	strb.w	r2, [fp, r3]
    6066:	e7f5      	b.n	6054 <CLI_tabCompletion+0x8c>
		}
	}
}
    6068:	b005      	add	sp, #20
    606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    606e:	bf00      	nop
    6070:	1fff982c 	.word	0x1fff982c
    6074:	1fff9387 	.word	0x1fff9387
    6078:	1fff97d8 	.word	0x1fff97d8
    607c:	000096e3 	.word	0x000096e3
    6080:	000096e9 	.word	0x000096e9
    6084:	1fff9770 	.word	0x1fff9770

00006088 <CLI_wrap>:

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;

	if ( kX < kLowerBound )
    6088:	4288      	cmp	r0, r1
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    608a:	eba2 0201 	sub.w	r2, r2, r1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    608e:	bfb8      	it	lt
    6090:	1a0b      	sublt	r3, r1, r0
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    6092:	f102 0201 	add.w	r2, r2, #1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    6096:	bfbe      	ittt	lt
    6098:	fb93 f3f2 	sdivlt	r3, r3, r2
    609c:	fb03 2302 	mlalt	r3, r3, r2, r2
    60a0:	18c0      	addlt	r0, r0, r3

	return kLowerBound + (kX - kLowerBound) % range_size;
    60a2:	1a43      	subs	r3, r0, r1
    60a4:	fb93 f0f2 	sdiv	r0, r3, r2
    60a8:	fb02 3010 	mls	r0, r2, r0, r3
}
    60ac:	4408      	add	r0, r1
    60ae:	4770      	bx	lr

000060b0 <CLI_saveHistory>:

inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
    60b0:	b108      	cbz	r0, 60b6 <CLI_saveHistory+0x6>
    60b2:	3801      	subs	r0, #1
    60b4:	e006      	b.n	60c4 <CLI_saveHistory+0x14>
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    60b6:	4b0e      	ldr	r3, [pc, #56]	; (60f0 <CLI_saveHistory+0x40>)
    60b8:	781a      	ldrb	r2, [r3, #0]
    60ba:	2364      	movs	r3, #100	; 0x64
    60bc:	4353      	muls	r3, r2
    60be:	4a0d      	ldr	r2, [pc, #52]	; (60f4 <CLI_saveHistory+0x44>)
    60c0:	54d0      	strb	r0, [r2, r3]
		return;
    60c2:	4770      	bx	lr
	}

        // Don't write empty lines to the history
        const char *cursor = buff;
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
    60c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    60c8:	2b20      	cmp	r3, #32
    60ca:	d0fb      	beq.n	60c4 <CLI_saveHistory+0x14>
        if (*cursor == '\0') { return ; }
    60cc:	b17b      	cbz	r3, 60ee <CLI_saveHistory+0x3e>

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    60ce:	4b0a      	ldr	r3, [pc, #40]	; (60f8 <CLI_saveHistory+0x48>)
    60d0:	4a08      	ldr	r2, [pc, #32]	; (60f4 <CLI_saveHistory+0x44>)
    60d2:	7819      	ldrb	r1, [r3, #0]
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    60d4:	4b06      	ldr	r3, [pc, #24]	; (60f0 <CLI_saveHistory+0x40>)
    60d6:	7818      	ldrb	r0, [r3, #0]
    60d8:	2364      	movs	r3, #100	; 0x64
    60da:	fb00 2203 	mla	r2, r0, r3, r2
    60de:	2300      	movs	r3, #0
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    60e0:	428b      	cmp	r3, r1
    60e2:	da04      	bge.n	60ee <CLI_saveHistory+0x3e>
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    60e4:	4805      	ldr	r0, [pc, #20]	; (60fc <CLI_saveHistory+0x4c>)
    60e6:	5c18      	ldrb	r0, [r3, r0]
    60e8:	54d0      	strb	r0, [r2, r3]
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    60ea:	3301      	adds	r3, #1
    60ec:	e7f8      	b.n	60e0 <CLI_saveHistory+0x30>
    60ee:	4770      	bx	lr
    60f0:	1fff9800 	.word	0x1fff9800
    60f4:	1fff9388 	.word	0x1fff9388
    60f8:	1fff982c 	.word	0x1fff982c
    60fc:	1fff9770 	.word	0x1fff9770

00006100 <CLI_retreiveHistory>:
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
	}
}

void CLI_retreiveHistory( int index )
{
    6100:	b538      	push	{r3, r4, r5, lr}
	char *histMatch = CLIHistoryBuffer[ index ];
    6102:	4c0e      	ldr	r4, [pc, #56]	; (613c <CLI_retreiveHistory+0x3c>)

	// Reset the buffer
	CLILineBufferCurrent = 0;
    6104:	4d0e      	ldr	r5, [pc, #56]	; (6140 <CLI_retreiveHistory+0x40>)
	}
}

void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];
    6106:	2364      	movs	r3, #100	; 0x64
    6108:	fb03 4400 	mla	r4, r3, r0, r4

	// Reset the buffer
	CLILineBufferCurrent = 0;
    610c:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    610e:	480d      	ldr	r0, [pc, #52]	; (6144 <CLI_retreiveHistory+0x44>)
void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];

	// Reset the buffer
	CLILineBufferCurrent = 0;
    6110:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    6112:	f000 f95d 	bl	63d0 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    6116:	480c      	ldr	r0, [pc, #48]	; (6148 <CLI_retreiveHistory+0x48>)
    6118:	f000 f95a 	bl	63d0 <_print>

	// Reprint the prompt (automatically clears the line)
	prompt();

	// Display the command
	dPrint( histMatch );
    611c:	4620      	mov	r0, r4
    611e:	f7fe fcef 	bl	4b00 <Output_putstr>

	// There are no index counts, so just copy the whole string to the input buffe
	CLILineBufferCurrent = 0;
	while ( *histMatch != '\0' )
    6122:	4622      	mov	r2, r4
    6124:	1b13      	subs	r3, r2, r4
    6126:	f812 1b01 	ldrb.w	r1, [r2], #1
    612a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    612e:	b111      	cbz	r1, 6136 <CLI_retreiveHistory+0x36>
	{
		CLILineBuffer[ CLILineBufferCurrent++ ] = *histMatch++;
    6130:	4806      	ldr	r0, [pc, #24]	; (614c <CLI_retreiveHistory+0x4c>)
    6132:	54c1      	strb	r1, [r0, r3]
    6134:	e7f6      	b.n	6124 <CLI_retreiveHistory+0x24>
    6136:	702b      	strb	r3, [r5, #0]
    6138:	bd38      	pop	{r3, r4, r5, pc}
    613a:	bf00      	nop
    613c:	1fff9388 	.word	0x1fff9388
    6140:	1fff982c 	.word	0x1fff982c
    6144:	000096e3 	.word	0x000096e3
    6148:	000096e9 	.word	0x000096e9
    614c:	1fff9770 	.word	0x1fff9770

00006150 <CLI_process>:
	CLIHexDebugMode = 0;
}

// Query the serial input buffer for any new characters
void CLI_process()
{
    6150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Current buffer position
	uint8_t prev_buf_pos = CLILineBufferCurrent;
    6152:	4d74      	ldr	r5, [pc, #464]	; (6324 <CLI_process+0x1d4>)
    6154:	782c      	ldrb	r4, [r5, #0]

	// Process each character while available
	while ( 1 )
	{
		// No more characters to process
		if ( Output_availablechar() == 0 )
    6156:	f7fe fccf 	bl	4af8 <Output_availablechar>
    615a:	b1a0      	cbz	r0, 6186 <CLI_process+0x36>
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    615c:	f7fe fcce 	bl	4afc <Output_getchar>

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    6160:	782b      	ldrb	r3, [r5, #0]
    6162:	4e70      	ldr	r6, [pc, #448]	; (6324 <CLI_process+0x1d4>)
    6164:	2b63      	cmp	r3, #99	; 0x63
		// No more characters to process
		if ( Output_availablechar() == 0 )
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    6166:	b2c0      	uxtb	r0, r0

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    6168:	d908      	bls.n	617c <CLI_process+0x2c>
		{
			print( NL );
    616a:	486f      	ldr	r0, [pc, #444]	; (6328 <CLI_process+0x1d8>)
    616c:	f000 f930 	bl	63d0 <_print>
			erro_print("Serial line buffer is full, dropping character and resetting...");
    6170:	486e      	ldr	r0, [pc, #440]	; (632c <CLI_process+0x1dc>)
    6172:	f000 f92d 	bl	63d0 <_print>

			// Clear buffer
			CLILineBufferCurrent = 0;
    6176:	2300      	movs	r3, #0
    6178:	7033      	strb	r3, [r6, #0]
    617a:	e064      	b.n	6246 <CLI_process+0xf6>

			return;
		}

		// Place into line buffer
		CLILineBuffer[CLILineBufferCurrent++] = cur_char;
    617c:	1c5a      	adds	r2, r3, #1
    617e:	7032      	strb	r2, [r6, #0]
    6180:	4a6b      	ldr	r2, [pc, #428]	; (6330 <CLI_process+0x1e0>)
    6182:	54d0      	strb	r0, [r2, r3]
	}
    6184:	e7e7      	b.n	6156 <CLI_process+0x6>

	// Display Hex Key Input if enabled
	if ( CLIHexDebugMode && CLILineBufferCurrent > prev_buf_pos )
    6186:	4b6b      	ldr	r3, [pc, #428]	; (6334 <CLI_process+0x1e4>)
    6188:	781b      	ldrb	r3, [r3, #0]
    618a:	b30b      	cbz	r3, 61d0 <CLI_process+0x80>
    618c:	782b      	ldrb	r3, [r5, #0]
    618e:	42a3      	cmp	r3, r4
    6190:	d91e      	bls.n	61d0 <CLI_process+0x80>
	{
		print("\033[s\r\n"); // Save cursor position, and move to the next line
    6192:	4869      	ldr	r0, [pc, #420]	; (6338 <CLI_process+0x1e8>)
    6194:	f000 f91c 	bl	63d0 <_print>
		print("\033[2K");    // Erases the current line
    6198:	4868      	ldr	r0, [pc, #416]	; (633c <CLI_process+0x1ec>)
    619a:	f000 f919 	bl	63d0 <_print>

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
    619e:	4623      	mov	r3, r4
    61a0:	782a      	ldrb	r2, [r5, #0]
    61a2:	429a      	cmp	r2, r3
    61a4:	d90b      	bls.n	61be <CLI_process+0x6e>
		{
			printHex( CLILineBuffer[pos++] );
    61a6:	4a62      	ldr	r2, [pc, #392]	; (6330 <CLI_process+0x1e0>)
    61a8:	1c5e      	adds	r6, r3, #1
    61aa:	5cd0      	ldrb	r0, [r2, r3]
    61ac:	2101      	movs	r1, #1
    61ae:	f000 f9b1 	bl	6514 <printHex_op>
    61b2:	b2f6      	uxtb	r6, r6
			print(" ");
    61b4:	4862      	ldr	r0, [pc, #392]	; (6340 <CLI_process+0x1f0>)
    61b6:	f000 f90b 	bl	63d0 <_print>
		print("\033[2K");    // Erases the current line

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
		{
			printHex( CLILineBuffer[pos++] );
    61ba:	4633      	mov	r3, r6
    61bc:	e7f0      	b.n	61a0 <CLI_process+0x50>
			print(" ");
		}

		print("\033[u"); // Restore cursor position
    61be:	4861      	ldr	r0, [pc, #388]	; (6344 <CLI_process+0x1f4>)
    61c0:	e04c      	b.n	625c <CLI_process+0x10c>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    61c2:	d856      	bhi.n	6272 <CLI_process+0x122>
    61c4:	2a08      	cmp	r2, #8
    61c6:	d14c      	bne.n	6262 <CLI_process+0x112>
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
    61c8:	2b01      	cmp	r3, #1
    61ca:	d144      	bne.n	6256 <CLI_process+0x106>
			return;

		case 0x08:
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace
    61cc:	2300      	movs	r3, #0
    61ce:	702b      	strb	r3, [r5, #0]

		print("\033[u"); // Restore cursor position
	}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
    61d0:	782b      	ldrb	r3, [r5, #0]
    61d2:	4f54      	ldr	r7, [pc, #336]	; (6324 <CLI_process+0x1d4>)
    61d4:	42a3      	cmp	r3, r4
    61d6:	f240 80a4 	bls.w	6322 <CLI_process+0x1d2>
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    61da:	4955      	ldr	r1, [pc, #340]	; (6330 <CLI_process+0x1e0>)
    61dc:	5d0a      	ldrb	r2, [r1, r4]
    61de:	2a0a      	cmp	r2, #10
    61e0:	460e      	mov	r6, r1
    61e2:	d1ee      	bne.n	61c2 <CLI_process+0x72>
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    61e4:	441e      	add	r6, r3
    61e6:	2220      	movs	r2, #32

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    61e8:	2b01      	cmp	r3, #1
		switch ( CLILineBuffer[prev_buf_pos] )
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    61ea:	f806 2c01 	strb.w	r2, [r6, #-1]

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    61ee:	d025      	beq.n	623c <CLI_process+0xec>
				CLILineBufferCurrent--;
			}
			else
			{
				// Add the command to the history
				CLI_saveHistory( CLILineBuffer );
    61f0:	484f      	ldr	r0, [pc, #316]	; (6330 <CLI_process+0x1e0>)
    61f2:	f7ff ff5d 	bl	60b0 <CLI_saveHistory>

				// Process the current line buffer
				CLI_commandLookup();
    61f6:	f7ff fe35 	bl	5e64 <CLI_commandLookup>

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
    61fa:	4a53      	ldr	r2, [pc, #332]	; (6348 <CLI_process+0x1f8>)
    61fc:	4953      	ldr	r1, [pc, #332]	; (634c <CLI_process+0x1fc>)
    61fe:	7813      	ldrb	r3, [r2, #0]
    6200:	7808      	ldrb	r0, [r1, #0]
    6202:	4283      	cmp	r3, r0
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    6204:	bf3c      	itt	cc
    6206:	3001      	addcc	r0, #1
    6208:	260a      	movcc	r6, #10
				CLIHistoryTail++;
    620a:	f103 0301 	add.w	r3, r3, #1
    620e:	b2db      	uxtb	r3, r3
				// Process the current line buffer
				CLI_commandLookup();

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    6210:	bf3e      	ittt	cc
    6212:	fb90 f4f6 	sdivcc	r4, r0, r6
    6216:	fb06 0014 	mlscc	r0, r6, r4, r0
    621a:	7008      	strbcc	r0, [r1, #0]
				CLIHistoryTail++;
				if ( CLIHistoryTail == CLIMaxHistorySize )
    621c:	2b0a      	cmp	r3, #10
				{
					CLIHistoryTail = 0;
    621e:	bf03      	ittte	eq
    6220:	2300      	moveq	r3, #0
    6222:	7013      	strbeq	r3, [r2, #0]
					CLIHistoryHead = 1;
    6224:	2301      	moveq	r3, #1
				CLI_commandLookup();

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
				CLIHistoryTail++;
    6226:	7013      	strbne	r3, [r2, #0]
				if ( CLIHistoryTail == CLIMaxHistorySize )
				{
					CLIHistoryTail = 0;
					CLIHistoryHead = 1;
    6228:	bf08      	it	eq
    622a:	700b      	strbeq	r3, [r1, #0]
				}

				CLIHistoryCurrent = CLIHistoryTail; // 'Up' starts at the last item
    622c:	4b48      	ldr	r3, [pc, #288]	; (6350 <CLI_process+0x200>)
    622e:	7812      	ldrb	r2, [r2, #0]
    6230:	701a      	strb	r2, [r3, #0]
inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    6232:	2364      	movs	r3, #100	; 0x64
    6234:	4353      	muls	r3, r2
    6236:	4a47      	ldr	r2, [pc, #284]	; (6354 <CLI_process+0x204>)
    6238:	2100      	movs	r1, #0
    623a:	54d1      	strb	r1, [r2, r3]
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    623c:	2300      	movs	r3, #0

			// Reset the prompt after processing has finished
			print( NL );
    623e:	483a      	ldr	r0, [pc, #232]	; (6328 <CLI_process+0x1d8>)
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    6240:	702b      	strb	r3, [r5, #0]

			// Reset the prompt after processing has finished
			print( NL );
    6242:	f000 f8c5 	bl	63d0 <_print>

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    6246:	4844      	ldr	r0, [pc, #272]	; (6358 <CLI_process+0x208>)
    6248:	f000 f8c2 	bl	63d0 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    624c:	4843      	ldr	r0, [pc, #268]	; (635c <CLI_process+0x20c>)
			prev_buf_pos++;

			break;
		}
	}
}
    624e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    6252:	f000 b8bd 	b.w	63d0 <_print>

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    6256:	3b02      	subs	r3, #2

				// Remove character from tty
				print("\b \b");
    6258:	4841      	ldr	r0, [pc, #260]	; (6360 <CLI_process+0x210>)

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    625a:	702b      	strb	r3, [r5, #0]

				// Remove character from tty
				print("\b \b");
    625c:	f000 f8b8 	bl	63d0 <_print>
    6260:	e7b6      	b.n	61d0 <CLI_process+0x80>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    6262:	2a09      	cmp	r2, #9
    6264:	d155      	bne.n	6312 <CLI_process+0x1c2>
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;

		case 0x09: // Tab
			// Tab completion for the current command
			CLI_tabCompletion();
    6266:	f7ff feaf 	bl	5fc8 <CLI_tabCompletion>

			CLILineBufferCurrent--; // Remove the Tab
    626a:	783b      	ldrb	r3, [r7, #0]
    626c:	3b01      	subs	r3, #1
    626e:	703b      	strb	r3, [r7, #0]

			// XXX There is a potential bug here when resetting the buffer (losing valid keypresses)
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;
    6270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    6272:	2a1b      	cmp	r2, #27
    6274:	d004      	beq.n	6280 <CLI_process+0x130>
    6276:	2a7f      	cmp	r2, #127	; 0x7f
    6278:	d0a6      	beq.n	61c8 <CLI_process+0x78>
    627a:	2a0d      	cmp	r2, #13
    627c:	d149      	bne.n	6312 <CLI_process+0x1c2>
    627e:	e7b1      	b.n	61e4 <CLI_process+0x94>

		case 0x1B: // Esc / Escape codes
			// Check for other escape sequence

			// \e[ is an escape code in vt100 compatible terminals
			if ( CLILineBufferCurrent >= prev_buf_pos + 3
    6280:	1ca7      	adds	r7, r4, #2
    6282:	429f      	cmp	r7, r3
    6284:	da4d      	bge.n	6322 <CLI_process+0x1d2>
				&& CLILineBuffer[ prev_buf_pos ] == 0x1B
				&& CLILineBuffer[ prev_buf_pos + 1] == 0x5B )
    6286:	190b      	adds	r3, r1, r4
    6288:	785b      	ldrb	r3, [r3, #1]
    628a:	2b5b      	cmp	r3, #91	; 0x5b
    628c:	d149      	bne.n	6322 <CLI_process+0x1d2>
			{
				// Arrow Keys: A (0x41) = Up, B (0x42) = Down, C (0x43) = Right, D (0x44) = Left

				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
    628e:	5dcb      	ldrb	r3, [r1, r7]
    6290:	2b41      	cmp	r3, #65	; 0x41
    6292:	d122      	bne.n	62da <CLI_process+0x18a>
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
    6294:	4d2e      	ldr	r5, [pc, #184]	; (6350 <CLI_process+0x200>)
    6296:	4b2c      	ldr	r3, [pc, #176]	; (6348 <CLI_process+0x1f8>)
    6298:	f995 2000 	ldrsb.w	r2, [r5]
    629c:	781b      	ldrb	r3, [r3, #0]
    629e:	429a      	cmp	r2, r3
    62a0:	d104      	bne.n	62ac <CLI_process+0x15c>
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    62a2:	2300      	movs	r3, #0
						CLI_saveHistory( CLILineBuffer );
    62a4:	4608      	mov	r0, r1
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    62a6:	550b      	strb	r3, [r1, r4]
						CLI_saveHistory( CLILineBuffer );
    62a8:	f7ff ff02 	bl	60b0 <CLI_saveHistory>
					}

					// Grab the previus item from the history if there is one
					if ( RING_PREV( CLIHistoryCurrent ) != RING_PREV( CLIHistoryHead ) )
    62ac:	f995 0000 	ldrsb.w	r0, [r5]
    62b0:	2100      	movs	r1, #0
    62b2:	2209      	movs	r2, #9
    62b4:	3801      	subs	r0, #1
    62b6:	f7ff fee7 	bl	6088 <CLI_wrap>
    62ba:	4b24      	ldr	r3, [pc, #144]	; (634c <CLI_process+0x1fc>)
    62bc:	4604      	mov	r4, r0
    62be:	7818      	ldrb	r0, [r3, #0]
    62c0:	2100      	movs	r1, #0
    62c2:	3801      	subs	r0, #1
    62c4:	2209      	movs	r2, #9
    62c6:	f7ff fedf 	bl	6088 <CLI_wrap>
    62ca:	4284      	cmp	r4, r0
						CLIHistoryCurrent = RING_PREV( CLIHistoryCurrent );
    62cc:	bf1c      	itt	ne
    62ce:	4b20      	ldrne	r3, [pc, #128]	; (6350 <CLI_process+0x200>)
    62d0:	701c      	strbne	r4, [r3, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    62d2:	f995 0000 	ldrsb.w	r0, [r5]
    62d6:	f7ff ff13 	bl	6100 <CLI_retreiveHistory>
				}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
    62da:	5df3      	ldrb	r3, [r6, r7]
    62dc:	2b42      	cmp	r3, #66	; 0x42
    62de:	d120      	bne.n	6322 <CLI_process+0x1d2>
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
    62e0:	4c1b      	ldr	r4, [pc, #108]	; (6350 <CLI_process+0x200>)
    62e2:	f994 0000 	ldrsb.w	r0, [r4]
    62e6:	2100      	movs	r1, #0
    62e8:	2209      	movs	r2, #9
    62ea:	3001      	adds	r0, #1
    62ec:	f7ff fecc 	bl	6088 <CLI_wrap>
    62f0:	4b15      	ldr	r3, [pc, #84]	; (6348 <CLI_process+0x1f8>)
    62f2:	4605      	mov	r5, r0
    62f4:	7818      	ldrb	r0, [r3, #0]
    62f6:	2100      	movs	r1, #0
    62f8:	3001      	adds	r0, #1
    62fa:	2209      	movs	r2, #9
    62fc:	f7ff fec4 	bl	6088 <CLI_wrap>
    6300:	4285      	cmp	r5, r0
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
    6302:	bf18      	it	ne
    6304:	7025      	strbne	r5, [r4, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    6306:	f994 0000 	ldrsb.w	r0, [r4]
			prev_buf_pos++;

			break;
		}
	}
}
    630a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
					CLI_retreiveHistory( CLIHistoryCurrent );
    630e:	f7ff bef7 	b.w	6100 <CLI_retreiveHistory>

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    6312:	2200      	movs	r2, #0

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    6314:	1930      	adds	r0, r6, r4

			// Buffer reset
			prev_buf_pos++;
    6316:	3401      	adds	r4, #1

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    6318:	54ca      	strb	r2, [r1, r3]

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );

			// Buffer reset
			prev_buf_pos++;
    631a:	b2e4      	uxtb	r4, r4
		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    631c:	f7fe fbf0 	bl	4b00 <Output_putstr>

			// Buffer reset
			prev_buf_pos++;

			break;
    6320:	e756      	b.n	61d0 <CLI_process+0x80>
    6322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6324:	1fff982c 	.word	0x1fff982c
    6328:	000093eb 	.word	0x000093eb
    632c:	000096f7 	.word	0x000096f7
    6330:	1fff9770 	.word	0x1fff9770
    6334:	1fff9384 	.word	0x1fff9384
    6338:	0000974e 	.word	0x0000974e
    633c:	00009754 	.word	0x00009754
    6340:	00006d66 	.word	0x00006d66
    6344:	00009759 	.word	0x00009759
    6348:	1fff9800 	.word	0x1fff9800
    634c:	1fff97d5 	.word	0x1fff97d5
    6350:	1fff9385 	.word	0x1fff9385
    6354:	1fff9388 	.word	0x1fff9388
    6358:	000096e3 	.word	0x000096e3
    635c:	000096e9 	.word	0x000096e9
    6360:	0000975d 	.word	0x0000975d

00006364 <init_errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Enable pin
	GPIOA_PDDR |= (1<<5);
    6364:	4a04      	ldr	r2, [pc, #16]	; (6378 <init_errorLED+0x14>)
    6366:	6813      	ldr	r3, [r2, #0]
    6368:	f043 0320 	orr.w	r3, r3, #32
    636c:	6013      	str	r3, [r2, #0]

	// Setup pin - A5 - See Lib/pin_map.mchck for more details on pins
	PORTA_PCR5 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    636e:	4b03      	ldr	r3, [pc, #12]	; (637c <init_errorLED+0x18>)
    6370:	f44f 72a2 	mov.w	r2, #324	; 0x144
    6374:	601a      	str	r2, [r3, #0]
    6376:	4770      	bx	lr
    6378:	400ff014 	.word	0x400ff014
    637c:	40049014 	.word	0x40049014

00006380 <errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Error LED On (A5)
	if ( on ) {
    6380:	b108      	cbz	r0, 6386 <errorLED+0x6>
		GPIOA_PSOR |= (1<<5);
    6382:	4a04      	ldr	r2, [pc, #16]	; (6394 <errorLED+0x14>)
    6384:	e000      	b.n	6388 <errorLED+0x8>
	}
	// Error LED Off
	else {
		GPIOA_PCOR |= (1<<5);
    6386:	4a04      	ldr	r2, [pc, #16]	; (6398 <errorLED+0x18>)
    6388:	6813      	ldr	r3, [r2, #0]
    638a:	f043 0320 	orr.w	r3, r3, #32
    638e:	6013      	str	r3, [r2, #0]
    6390:	4770      	bx	lr
    6392:	bf00      	nop
    6394:	400ff004 	.word	0x400ff004
    6398:	400ff008 	.word	0x400ff008

0000639c <printstrs>:

// ----- Functions -----

// Multiple string Output
void printstrs( char* first, ... )
{
    639c:	b40f      	push	{r0, r1, r2, r3}
    639e:	b507      	push	{r0, r1, r2, lr}
    63a0:	ab04      	add	r3, sp, #16
    63a2:	f853 0b04 	ldr.w	r0, [r3], #4
	// Initialize the variadic function parameter list
	va_list ap;

	// Get the first parameter
	va_start( ap, first );
    63a6:	9301      	str	r3, [sp, #4]
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    63a8:	7803      	ldrb	r3, [r0, #0]
    63aa:	b133      	cbz	r3, 63ba <printstrs+0x1e>
	{
		// Print out the given string
		Output_putstr( cur );
    63ac:	f7fe fba8 	bl	4b00 <Output_putstr>

		// Get the next argument ready
		cur = va_arg( ap, char* );
    63b0:	9b01      	ldr	r3, [sp, #4]
    63b2:	1d1a      	adds	r2, r3, #4
    63b4:	9201      	str	r2, [sp, #4]
    63b6:	6818      	ldr	r0, [r3, #0]
    63b8:	e7f6      	b.n	63a8 <printstrs+0xc>
	// Get the first parameter
	va_start( ap, first );
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    63ba:	7843      	ldrb	r3, [r0, #1]
    63bc:	2b00      	cmp	r3, #0
    63be:	d1f5      	bne.n	63ac <printstrs+0x10>
    63c0:	7883      	ldrb	r3, [r0, #2]
    63c2:	2b00      	cmp	r3, #0
    63c4:	d1f2      	bne.n	63ac <printstrs+0x10>
		// Get the next argument ready
		cur = va_arg( ap, char* );
	}

	va_end( ap ); // Not required, but good practice
}
    63c6:	b003      	add	sp, #12
    63c8:	f85d eb04 	ldr.w	lr, [sp], #4
    63cc:	b004      	add	sp, #16
    63ce:	4770      	bx	lr

000063d0 <_print>:
	while ( ( c = pgm_read_byte( s++ ) ) != '\0' )
	{
		Output_putchar( c );
	}
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	Output_putstr( (char*)s );
    63d0:	f7fe bb96 	b.w	4b00 <Output_putstr>

000063d4 <lenStr>:
	}
}


uint16_t lenStr( char* in )
{
    63d4:	4602      	mov	r2, r0
    63d6:	4613      	mov	r3, r2
    63d8:	3201      	adds	r2, #1
	// Iterator
	char *pos;

	// Loop until null is found
	for ( pos = in; *pos; pos++ );
    63da:	7819      	ldrb	r1, [r3, #0]
    63dc:	2900      	cmp	r1, #0
    63de:	d1fa      	bne.n	63d6 <lenStr+0x2>

	// Return the difference between the pointers of in and pos (which is the string length)
	return (pos - in);
    63e0:	1a18      	subs	r0, r3, r0
}
    63e2:	b280      	uxth	r0, r0
    63e4:	4770      	bx	lr

000063e6 <revsStr>:
	revsStr(out);
}


void revsStr( char* in )
{
    63e6:	b510      	push	{r4, lr}
    63e8:	4604      	mov	r4, r0

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    63ea:	f7ff fff3 	bl	63d4 <lenStr>
    63ee:	2300      	movs	r3, #0
    63f0:	3801      	subs	r0, #1
    63f2:	4283      	cmp	r3, r0
    63f4:	da06      	bge.n	6404 <revsStr+0x1e>
	{
		c = in[i];
    63f6:	5ce2      	ldrb	r2, [r4, r3]
		in[i] = in[j];
    63f8:	5c21      	ldrb	r1, [r4, r0]
    63fa:	54e1      	strb	r1, [r4, r3]
		in[j] = c;
    63fc:	5422      	strb	r2, [r4, r0]

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    63fe:	3301      	adds	r3, #1
    6400:	3801      	subs	r0, #1
    6402:	e7f6      	b.n	63f2 <revsStr+0xc>
	{
		c = in[i];
		in[i] = in[j];
		in[j] = c;
	}
}
    6404:	bd10      	pop	{r4, pc}

00006406 <int8ToStr>:



// String Functions
void int8ToStr( uint8_t in, char* out )
{
    6406:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint8_t pos;
	pos = 0;
    6408:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    640a:	230a      	movs	r3, #10
    640c:	fbb0 f4f3 	udiv	r4, r0, r3
    6410:	fb03 0314 	mls	r3, r3, r4, r0
    6414:	1c55      	adds	r5, r2, #1
    6416:	3330      	adds	r3, #48	; 0x30
	}
	while ( (in /= 10) > 0 );
    6418:	f014 00ff 	ands.w	r0, r4, #255	; 0xff
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    641c:	548b      	strb	r3, [r1, r2]
    641e:	b2ea      	uxtb	r2, r5
	}
	while ( (in /= 10) > 0 );
    6420:	d1f3      	bne.n	640a <int8ToStr+0x4>

	// Append null
	out[pos] = '\0';
    6422:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    6424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    6428:	4608      	mov	r0, r1
    642a:	f7ff bfdc 	b.w	63e6 <revsStr>

0000642e <printInt8>:



// Number Printing Functions
void printInt8( uint8_t in )
{
    642e:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 3 + 1 for null
	char tmpStr[4];

	// Convert number
	int8ToStr( in, tmpStr );
    6430:	a901      	add	r1, sp, #4
    6432:	f7ff ffe8 	bl	6406 <int8ToStr>

	// Print number
	dPrintStr( tmpStr );
    6436:	a801      	add	r0, sp, #4
    6438:	f7fe fb62 	bl	4b00 <Output_putstr>
}
    643c:	b003      	add	sp, #12
    643e:	f85d fb04 	ldr.w	pc, [sp], #4

00006442 <int16ToStr>:
	revsStr(out);
}


void int16ToStr( uint16_t in, char* out )
{
    6442:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint16_t pos;
	pos = 0;
    6444:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    6446:	230a      	movs	r3, #10
    6448:	fbb0 f4f3 	udiv	r4, r0, r3
    644c:	fb03 0314 	mls	r3, r3, r4, r0
    6450:	1c55      	adds	r5, r2, #1
    6452:	3330      	adds	r3, #48	; 0x30
	}
	while ( (in /= 10) > 0 );
    6454:	b2a0      	uxth	r0, r4
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    6456:	548b      	strb	r3, [r1, r2]
    6458:	b2aa      	uxth	r2, r5
	}
	while ( (in /= 10) > 0 );
    645a:	2800      	cmp	r0, #0
    645c:	d1f3      	bne.n	6446 <int16ToStr+0x4>

	// Append null
	out[pos] = '\0';
    645e:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    6460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    6464:	4608      	mov	r0, r1
    6466:	f7ff bfbe 	b.w	63e6 <revsStr>

0000646a <printInt16>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt16( uint16_t in )
{
    646a:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 5 + 1 for null
	char tmpStr[6];

	// Convert number
	int16ToStr( in, tmpStr );
    646c:	4669      	mov	r1, sp
    646e:	f7ff ffe8 	bl	6442 <int16ToStr>

	// Print number
	dPrintStr( tmpStr );
    6472:	4668      	mov	r0, sp
    6474:	f7fe fb44 	bl	4b00 <Output_putstr>
}
    6478:	b003      	add	sp, #12
    647a:	f85d fb04 	ldr.w	pc, [sp], #4

0000647e <int32ToStr>:
	revsStr(out);
}


void int32ToStr( uint32_t in, char* out )
{
    647e:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint32_t pos;
	pos = 0;
    6480:	2200      	movs	r2, #0
    6482:	1e4d      	subs	r5, r1, #1

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    6484:	230a      	movs	r3, #10
    6486:	fbb0 f4f3 	udiv	r4, r0, r3
    648a:	fb03 0314 	mls	r3, r3, r4, r0
    648e:	3330      	adds	r3, #48	; 0x30
    6490:	3201      	adds	r2, #1
    6492:	f805 3f01 	strb.w	r3, [r5, #1]!
	}
	while ( (in /= 10) > 0 );
    6496:	4620      	mov	r0, r4
    6498:	2c00      	cmp	r4, #0
    649a:	d1f3      	bne.n	6484 <int32ToStr+0x6>

	// Append null
	out[pos] = '\0';
    649c:	548c      	strb	r4, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
    649e:	4608      	mov	r0, r1
}
    64a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    64a4:	f7ff bf9f 	b.w	63e6 <revsStr>

000064a8 <printInt32>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt32( uint32_t in )
{
    64a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Max number of characters is 10 + 1 for null
	char tmpStr[11];

	// Convert number
	int32ToStr( in, tmpStr );
    64aa:	a901      	add	r1, sp, #4
    64ac:	f7ff ffe7 	bl	647e <int32ToStr>

	// Print number
	dPrintStr( tmpStr );
    64b0:	a801      	add	r0, sp, #4
    64b2:	f7fe fb25 	bl	4b00 <Output_putstr>
}
    64b6:	b005      	add	sp, #20
    64b8:	f85d fb04 	ldr.w	pc, [sp], #4

000064bc <hexToStr_op>:
	revsStr(out);
}


void hexToStr_op( uint16_t in, char* out, uint8_t op )
{
    64bc:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint16_t pos = 0;
    64be:	2400      	movs	r4, #0

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
    64c0:	f000 030f 	and.w	r3, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    64c4:	2b0a      	cmp	r3, #10
    64c6:	bf34      	ite	cc
    64c8:	2630      	movcc	r6, #48	; 0x30
    64ca:	2637      	movcs	r6, #55	; 0x37
    64cc:	1c65      	adds	r5, r4, #1
    64ce:	4433      	add	r3, r6
	}
	while ( (in /= 16) > 0 );
    64d0:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    64d2:	550b      	strb	r3, [r1, r4]
    64d4:	b2ac      	uxth	r4, r5
	}
	while ( (in /= 16) > 0 );
    64d6:	d1f3      	bne.n	64c0 <hexToStr_op+0x4>

	// Output formatting options
	switch ( op )
    64d8:	2a02      	cmp	r2, #2

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    64da:	4623      	mov	r3, r4
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    64dc:	d00c      	beq.n	64f8 <hexToStr_op+0x3c>
    64de:	2a04      	cmp	r2, #4
    64e0:	d00a      	beq.n	64f8 <hexToStr_op+0x3c>
    64e2:	2a01      	cmp	r2, #1
    64e4:	d10f      	bne.n	6506 <hexToStr_op+0x4a>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    64e6:	2278      	movs	r2, #120	; 0x78
    64e8:	550a      	strb	r2, [r1, r4]
    64ea:	3401      	adds	r4, #1
		out[pos++] = '0';
    64ec:	b2a4      	uxth	r4, r4
    64ee:	3302      	adds	r3, #2
    64f0:	2230      	movs	r2, #48	; 0x30
    64f2:	b29b      	uxth	r3, r3
    64f4:	550a      	strb	r2, [r1, r4]
		break;
    64f6:	e006      	b.n	6506 <hexToStr_op+0x4a>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    64f8:	4293      	cmp	r3, r2
    64fa:	d204      	bcs.n	6506 <hexToStr_op+0x4a>
			out[pos++] = '0';
    64fc:	1c58      	adds	r0, r3, #1
    64fe:	2430      	movs	r4, #48	; 0x30
    6500:	54cc      	strb	r4, [r1, r3]
    6502:	b283      	uxth	r3, r0
    6504:	e7f8      	b.n	64f8 <hexToStr_op+0x3c>
		break;
	}

	// Append null
	out[pos] = '\0';
    6506:	2200      	movs	r2, #0
    6508:	54ca      	strb	r2, [r1, r3]

	// Reverse the string to the correct order
	revsStr(out);
    650a:	4608      	mov	r0, r1
}
    650c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    6510:	f7ff bf69 	b.w	63e6 <revsStr>

00006514 <printHex_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex_op( uint16_t in, uint8_t op )
{
    6514:	b507      	push	{r0, r1, r2, lr}
    6516:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hexToStr_op( in, tmpStr, op );
    6518:	4669      	mov	r1, sp
    651a:	f7ff ffcf 	bl	64bc <hexToStr_op>

	// Print number
	dPrintStr( tmpStr );
    651e:	4668      	mov	r0, sp
    6520:	f7fe faee 	bl	4b00 <Output_putstr>
}
    6524:	b003      	add	sp, #12
    6526:	f85d fb04 	ldr.w	pc, [sp], #4

0000652a <hex32ToStr_op>:
	revsStr(out);
}


void hex32ToStr_op( uint32_t in, char* out, uint8_t op )
{
    652a:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint32_t pos = 0;
    652c:	2300      	movs	r3, #0
    652e:	1e4d      	subs	r5, r1, #1

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
    6530:	f000 040f 	and.w	r4, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    6534:	2c0a      	cmp	r4, #10
    6536:	bf34      	ite	cc
    6538:	2630      	movcc	r6, #48	; 0x30
    653a:	2637      	movcs	r6, #55	; 0x37
    653c:	4434      	add	r4, r6
	}
	while ( (in /= 16) > 0 );
    653e:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    6540:	f103 0301 	add.w	r3, r3, #1
    6544:	f805 4f01 	strb.w	r4, [r5, #1]!
	}
	while ( (in /= 16) > 0 );
    6548:	d1f2      	bne.n	6530 <hex32ToStr_op+0x6>

	// Output formatting options
	switch ( op )
    654a:	1e54      	subs	r4, r2, #1

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    654c:	4618      	mov	r0, r3
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    654e:	2c07      	cmp	r4, #7
    6550:	d815      	bhi.n	657e <hex32ToStr_op+0x54>
    6552:	e8df f004 	tbb	[pc, r4]
    6556:	0406      	.short	0x0406
    6558:	14140414 	.word	0x14140414
    655c:	0414      	.short	0x0414
    655e:	440b      	add	r3, r1
    6560:	e006      	b.n	6570 <hex32ToStr_op+0x46>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    6562:	2278      	movs	r2, #120	; 0x78
    6564:	54ca      	strb	r2, [r1, r3]
		out[pos++] = '0';
    6566:	1c98      	adds	r0, r3, #2
    6568:	440b      	add	r3, r1
    656a:	2230      	movs	r2, #48	; 0x30
    656c:	705a      	strb	r2, [r3, #1]
		break;
    656e:	e006      	b.n	657e <hex32ToStr_op+0x54>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
	case 8: // 32-bit padding
		while ( pos < op )
    6570:	4290      	cmp	r0, r2
    6572:	d204      	bcs.n	657e <hex32ToStr_op+0x54>
			out[pos++] = '0';
    6574:	2430      	movs	r4, #48	; 0x30
    6576:	3001      	adds	r0, #1
    6578:	f803 4b01 	strb.w	r4, [r3], #1
    657c:	e7f8      	b.n	6570 <hex32ToStr_op+0x46>
		break;
	}

	// Append null
	out[pos] = '\0';
    657e:	2300      	movs	r3, #0
    6580:	540b      	strb	r3, [r1, r0]

	// Reverse the string to the correct order
	revsStr(out);
}
    6582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    6586:	4608      	mov	r0, r1
    6588:	f7ff bf2d 	b.w	63e6 <revsStr>

0000658c <printHex32_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex32_op( uint32_t in, uint8_t op )
{
    658c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    658e:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[11];

	// Convert number
	hex32ToStr_op( in, tmpStr, op );
    6590:	a901      	add	r1, sp, #4
    6592:	f7ff ffca 	bl	652a <hex32ToStr_op>

	// Print number
	dPrintStr( tmpStr );
    6596:	a801      	add	r0, sp, #4
    6598:	f7fe fab2 	bl	4b00 <Output_putstr>
}
    659c:	b005      	add	sp, #20
    659e:	f85d fb04 	ldr.w	pc, [sp], #4

000065a2 <eqStr>:
	return (pos - in);
}


int16_t eqStr( char* str1, char* str2 )
{
    65a2:	b510      	push	{r4, lr}
    65a4:	4603      	mov	r3, r0
	// Scan each string for NULLs and whether they are the same
	while( *str1 != '\0' && *str1++ == *str2++ );
    65a6:	f810 2b01 	ldrb.w	r2, [r0], #1
    65aa:	b122      	cbz	r2, 65b6 <eqStr+0x14>
    65ac:	f811 4b01 	ldrb.w	r4, [r1], #1
    65b0:	4294      	cmp	r4, r2
    65b2:	4603      	mov	r3, r0
    65b4:	d0f6      	beq.n	65a4 <eqStr+0x2>

	// If the strings are still identical (i.e. both NULL), then return -1, otherwise current *str1
	// If *str1 is 0, then str1 ended (and str1 is "like" str2), otherwise strings are different
	return *--str1 == *--str2 ? -1 : *++str1;
    65b6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    65ba:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    65be:	4290      	cmp	r0, r2
    65c0:	bf14      	ite	ne
    65c2:	7818      	ldrbne	r0, [r3, #0]
    65c4:	f64f 70ff 	movweq	r0, #65535	; 0xffff
}
    65c8:	b200      	sxth	r0, r0
    65ca:	bd10      	pop	{r4, pc}

000065cc <numToInt>:

int numToInt( char* in )
{
    65cc:	b530      	push	{r4, r5, lr}
    65ce:	4602      	mov	r2, r0
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16
    65d0:	240a      	movs	r4, #10
	// Pointers to the LSD (Least Significant Digit) and MSD
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
    65d2:	2501      	movs	r5, #1
    65d4:	4611      	mov	r1, r2
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
    65d6:	f812 3b01 	ldrb.w	r3, [r2], #1
    65da:	b193      	cbz	r3, 6602 <numToInt+0x36>
	{
		// Check for positive/negative
		switch ( *lsd++ )
    65dc:	2b2b      	cmp	r3, #43	; 0x2b
    65de:	4611      	mov	r1, r2
    65e0:	d00d      	beq.n	65fe <numToInt+0x32>
    65e2:	d802      	bhi.n	65ea <numToInt+0x1e>
    65e4:	2b20      	cmp	r3, #32
    65e6:	d00a      	beq.n	65fe <numToInt+0x32>
    65e8:	e008      	b.n	65fc <numToInt+0x30>
    65ea:	2b2d      	cmp	r3, #45	; 0x2d
    65ec:	d003      	beq.n	65f6 <numToInt+0x2a>
    65ee:	2b78      	cmp	r3, #120	; 0x78
    65f0:	d104      	bne.n	65fc <numToInt+0x30>
		case '+':
		case ' ':
			msd = lsd;
			break;
		case 'x': // Hex Mode
			base = 0x10;
    65f2:	2410      	movs	r4, #16
			msd = lsd;
			break;
    65f4:	e003      	b.n	65fe <numToInt+0x32>
		// Check for positive/negative
		switch ( *lsd++ )
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    65f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    65fa:	e000      	b.n	65fe <numToInt+0x32>

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
	{
		// Check for positive/negative
		switch ( *lsd++ )
    65fc:	4601      	mov	r1, r0
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    65fe:	4608      	mov	r0, r1
    6600:	e7e8      	b.n	65d4 <numToInt+0x8>
			break;
		}
	}

	// Process string depending on which base
	switch ( base )
    6602:	2c0a      	cmp	r4, #10
    6604:	d003      	beq.n	660e <numToInt+0x42>
    6606:	2c10      	cmp	r4, #16
    6608:	d11f      	bne.n	664a <numToInt+0x7e>
    660a:	2401      	movs	r4, #1
    660c:	e012      	b.n	6634 <numToInt+0x68>
    660e:	2201      	movs	r2, #1
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    6610:	4281      	cmp	r1, r0
    6612:	d91a      	bls.n	664a <numToInt+0x7e>
			total += ( (*--lsd) - '0' ) * digit;
    6614:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    6618:	3c30      	subs	r4, #48	; 0x30
    661a:	fb02 3304 	mla	r3, r2, r4, r3
	// Process string depending on which base
	switch ( base )
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    661e:	240a      	movs	r4, #10
    6620:	4362      	muls	r2, r4
    6622:	e7f5      	b.n	6610 <numToInt+0x44>

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
    6624:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    6628:	2a39      	cmp	r2, #57	; 0x39
    662a:	d806      	bhi.n	663a <numToInt+0x6e>
    662c:	3a30      	subs	r2, #48	; 0x30
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    662e:	fb04 3302 	mla	r3, r4, r2, r3
			total += ( (*--lsd) - '0' ) * digit;
		break;

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
    6632:	0124      	lsls	r4, r4, #4
    6634:	4281      	cmp	r1, r0
    6636:	d8f5      	bhi.n	6624 <numToInt+0x58>
    6638:	e007      	b.n	664a <numToInt+0x7e>
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
    663a:	2a46      	cmp	r2, #70	; 0x46
    663c:	d801      	bhi.n	6642 <numToInt+0x76>
    663e:	3a37      	subs	r2, #55	; 0x37
    6640:	e7f5      	b.n	662e <numToInt+0x62>
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    6642:	2a66      	cmp	r2, #102	; 0x66
    6644:	d8f5      	bhi.n	6632 <numToInt+0x66>
    6646:	3a57      	subs	r2, #87	; 0x57
    6648:	e7f1      	b.n	662e <numToInt+0x62>
		break;
	}

	// Propagate sign and return
	return total * sign;
}
    664a:	fb05 f003 	mul.w	r0, r5, r3
    664e:	bd30      	pop	{r4, r5, pc}
    6650:	6c756146 	.word	0x6c756146
    6654:	0a0d2174 	.word	0x0a0d2174
    6658:	494d4e00 	.word	0x494d4e00
    665c:	000a0d21 	.word	0x000a0d21
    6660:	64726148 	.word	0x64726148
    6664:	75614620 	.word	0x75614620
    6668:	2021746c 	.word	0x2021746c
    666c:	5f424353 	.word	0x5f424353
    6670:	52534648 	.word	0x52534648
    6674:	4d00203a 	.word	0x4d00203a
    6678:	726f6d65 	.word	0x726f6d65
    667c:	614d2079 	.word	0x614d2079
    6680:	6567616e 	.word	0x6567616e
    6684:	61462072 	.word	0x61462072
    6688:	21746c75 	.word	0x21746c75
    668c:	42435320 	.word	0x42435320
    6690:	5346435f 	.word	0x5346435f
    6694:	00203a52 	.word	0x00203a52
    6698:	42435320 	.word	0x42435320
    669c:	414d4d5f 	.word	0x414d4d5f
    66a0:	00203a52 	.word	0x00203a52
    66a4:	20737542 	.word	0x20737542
    66a8:	6c756146 	.word	0x6c756146
    66ac:	53202174 	.word	0x53202174
    66b0:	435f4243 	.word	0x435f4243
    66b4:	3a525346 	.word	0x3a525346
    66b8:	53200020 	.word	0x53200020
    66bc:	425f4243 	.word	0x425f4243
    66c0:	3a524146 	.word	0x3a524146
    66c4:	73550020 	.word	0x73550020
    66c8:	20656761 	.word	0x20656761
    66cc:	6c756146 	.word	0x6c756146
    66d0:	53202174 	.word	0x53202174
    66d4:	435f4243 	.word	0x435f4243
    66d8:	3a525346 	.word	0x3a525346
    66dc:	0020      	.short	0x0020

000066de <sys_reset_to_loader_magic>:
    66de:	00ff 527f 5345 5445 5420 204f 4f4c 4441     ...RESET TO LOAD
    66ee:	5245 007f 00ff fde8 5700                         ER.......

000066f7 <ledWPageCLIDict_DescEntry>:
    66f7:	7257 7469 2065 6f74 6720 7669 6e65 7220     Write to given r
    6707:	6765 7369 6574 2072 6170 6567 7320 6174     egister page sta
    6717:	7472 6e69 2067 7461 6120 6464 6572 7373     rting at address
    6727:	202e 2e69 2e65 3020 3278 3020 3278 2034     . i.e. 0x2 0x24 
    6737:	7830 3046 3020 3178 0032                    0xF0 0x12.

00006741 <ledTestCLIDict_DescEntry>:
    6741:	6554 7473 6f20 7475 7420 6568 6c20 6465     Test out the led
    6751:	7020 6761 7365 002e 0000 ad00                     pages.....

0000675c <ledCLIDict>:
    675c:	69ad 0000 6ae6 0000 2c95 0000 69b5 0000     .i...j...,...i..
    676c:	6b5f 0000 2c0d 0000 69bd 0000 69f0 0000     _k...,...i...i..
    677c:	2e85 0000 69c5 0000 67c8 0000 2be1 0000     .....i...g...+..
    678c:	69ce 0000 67e6 0000 2b15 0000 69d7 0000     .i...g...+...i..
    679c:	6741 0000 29e5 0000 69df 0000 66f7 0000     Ag...)...i...f..
    67ac:	2d1d 0000 69e8 0000 6ab5 0000 2985 0000     .-...i...j...)..
    67bc:	0000 0000 0000 0000 0000 0000               ............

000067c8 <ledRPageCLIDict_DescEntry>:
    67c8:	6552 6461 7420 6568 6720 7669 6e65 7220     Read the given r
    67d8:	6765 7369 6574 2072 6170 6567 002e          egister page..

000067e6 <ledStartCLIDict_DescEntry>:
    67e6:	6944 6173 6c62 2065 6f73 7466 6177 6572     Disable software
    67f6:	7320 7568 6474 776f 2e6e 1b00 315b 333b      shutdown...[1;3
    6806:	6d35 4544 5542 1b47 305b 206d 202d 4144     5mDEBUG.[0m - DA
    6816:	4154 203a 1b00 315b 333b 6d33 4157 4e52     TA: ..[1;33mWARN
    6826:	4e49 1b47 305b 206d 202d 3249 5f43 7542     ING.[0m - I2C_Bu
    6836:	6666 7265 7550 6873 6620 6961 656c 2c64     fferPush failed,
    6846:	6220 6675 6566 2072 7566 6c6c 203a 1b00      buffer full: ..
    6856:	315b 353b 333b 6d31 5245 4f52 1b52 305b     [1;5;31mERROR.[0
    6866:	206d 202d 6f4e 6220 6675 6566 2072 6f74     m - No buffer to
    6876:	7020 706f 6120 206e 6e65 7274 2079 7266      pop an entry fr
    6886:	6d6f 2e2e 202e 1b00 315b 353b 333b 6d31     om... ..[1;5;31m
    6896:	5245 4f52 1b52 305b 206d 202d 3249 2043     ERROR.[0m - I2C 
    68a6:	414e 204b 6564 6574 7463 6465 2e2e 0d2e     NAK detected....
    68b6:	000a 5b1b 3b31 3b35 3133 456d 5252 524f     ...[1;5;31mERROR
    68c6:	5b1b 6d30 2d20 4120 6272 7469 6172 6974     .[0m - Arbitrati
    68d6:	6e6f 6c20 736f 2e74 2e2e 0a0d 1b00 315b     on lost.......[1
    68e6:	353b 333b 6d31 5245 4f52 1b52 305b 206d     ;5;31mERROR.[0m 
    68f6:	202d 6c53 7661 2065 6441 7264 7365 2073     - Slave Address 
    6906:	3249 2043 414e 204b 6564 6574 7463 6465     I2C NAK detected
    6916:	2e2e 0d2e 000a 5b1b 3b31 3533 446d 4245     .......[1;35mDEB
    6926:	4755 5b1b 6d30 2d20 4120 7474 6d65 7470     UG.[0m - Attempt
    6936:	6e69 2067 6f74 7220 6165 2064 7962 6574     ing to read byte
    6946:	2d20 0020 5b1b 3b31 3533 446d 4245 4755      - ..[1;35mDEBUG
    6956:	5b1b 6d30 2d20 4e20 5845 0d54 000a 5b1b     .[0m - NEXT....[
    6966:	3b31 3233 496d 464e 1b4f 305b 206d 202d     1;32mINFO.[0m - 
    6976:	6553 646e 6e69 3a67 0020 207c 4c00 4445     Sending: .| .LED
    6986:	635f 6e6f 7274 6c6f 635f 7061 6261 6c69     _control_capabil
    6996:	7469 2879 6f6d 6564 612c 6f6d 6e75 2c74     ity(mode,amount,
    69a6:	6e69 6564 2978 6900 6332 6552 7663 6900     index).i2cRecv.i
    69b6:	6332 6553 646e 6c00 6465 7443 6c72 6c00     2cSend.ledCtrl.l
    69c6:	6465 5052 6761 0065 656c 5364 6174 7472     edRPage.ledStart
    69d6:	6c00 6465 6554 7473 6c00 6465 5057 6761     .ledTest.ledWPag
    69e6:	0065 656c 5a64 7265 006f                    e.ledZero.

000069f0 <ledCtrlCLIDict_DescEntry>:
    69f0:	6142 6973 2063 454c 2044 6f63 746e 6f72     Basic LED contro
    6a00:	2e6c 4120 6772 3a73 3c20 6f6d 6564 203e     l. Args: <mode> 
    6a10:	613c 6f6d 6e75 3e74 5b20 693c 646e 7865     <amount> [<index
    6a20:	5d3e e800                                        >].

00006a23 <LED_defaultBrightness1>:
    6a23:	24e8 ffff ffff ffff ffff 0000 0000 0000     .$..............
    6a33:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6a43:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6a53:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6a63:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6a73:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6a83:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6a93:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6aa3:	0000 ffff ffff ffff ffff 0000 0000 0000     ................
    6ab3:	0000                                        ..

00006ab5 <ledZeroCLIDict_DescEntry>:
    6ab5:	655a 6f72 6f20 7475 4c20 4445 7220 6765     Zero out LED reg
    6ac5:	7369 6574 2072 6170 6567 2073 6e28 6e6f     ister pages (non
    6ad5:	632d 6e6f 6966 7567 6172 6974 6e6f 2e29     -configuration).
    6ae5:	5300                                             .

00006ae6 <i2cRecvCLIDict_DescEntry>:
    6ae6:	6553 646e 4920 4332 7320 7165 6575 636e     Send I2C sequenc
    6af6:	2065 666f 6220 7479 7365 6120 646e 6520     e of bytes and e
    6b06:	7078 6365 2074 2061 6572 6c70 2079 666f     xpect a reply of
    6b16:	3120 6220 7479 2065 6e6f 7420 6568 6c20      1 byte on the l
    6b26:	7361 2074 6573 7571 6e65 6563 0d2e 090a     ast sequence....
    6b36:	5509 6573 7c20 7327 7420 206f 7073 696c     .Use |'s to spli
    6b46:	2074 6573 7571 6e65 6563 2073 6977 6874     t sequences with
    6b56:	6120 7320 6f74 2e70 5300                          a stop..

00006b5f <i2cSendCLIDict_DescEntry>:
    6b5f:	6553 646e 4920 4332 7320 7165 6575 636e     Send I2C sequenc
    6b6f:	2065 666f 6220 7479 7365 202e 7355 2065     e of bytes. Use 
    6b7f:	277c 2073 6f74 7320 6c70 7469 7320 7165     |'s to split seq
    6b8f:	6575 636e 7365 7720 7469 2068 2061 7473     uences with a st
    6b9f:	706f 002e                                   op..

00006ba3 <LED_ledEnableMask1>:
    6ba3:	00e8 00ff 00ff 00ff 00ff 00ff 00ff 00ff     ................
    6bb3:	00ff 00ff                                   ....

00006bb7 <ledCLIDictName>:
    6bb7:	5349 4953 4c20 4445 4d20 646f 6c75 2065     ISSI LED Module 
    6bc7:	6f43 6d6d 6e61 7364 4500                         Commands.

00006bd0 <matrixDebugCLIDict_DescEntry>:
    6bd0:	6e45 6261 656c 2073 616d 7274 7869 6420     Enables matrix d
    6be0:	6265 6775 6d20 646f 2c65 7020 6972 746e     ebug mode, print
    6bf0:	2073 756f 2074 6165 6863 7320 6163 206e     s out each scan 
    6c00:	6f63 6564 0d2e 090a 4909 2066 7261 7567     code.....If argu
    6c10:	656d 746e 1b20 335b 6d35 1b54 305b 206d     ment .[35mT.[0m 
    6c20:	7369 6720 7669 6e65 202c 7270 6e69 7374     is given, prints
    6c30:	6f20 7475 6520 6361 2068 6373 6e61 6320      out each scan c
    6c40:	646f 2065 7473 7461 2065 7274 6e61 6973     ode state transi
    6c50:	6974 6e6f 002e 5b1b 3b31 3233 496d 464e     tion...[1;32mINF
    6c60:	1b4f 305b 206d 202d 6f43 756c 6e6d 3a73     O.[0m - Columns:
    6c70:	2020 1b00 315b 333b 6d32 4e49 4f46 5b1b       ..[1;32mINFO.[
    6c80:	6d30 2d20 5220 776f 3a73 2020 2020 0020     0m - Rows:     .
    6c90:	5b1b 3b31 3233 496d 464e 1b4f 305b 206d     .[1;32mINFO.[0m 
    6ca0:	202d 614d 2078 654b 7379 203a 1b00 315b     - Max Keys: ..[1
    6cb0:	333b 6d32 4e49 4f46 5b1b 6d30 2d20 4d20     ;32mINFO.[0m - M
    6cc0:	7461 6972 2078 6544 7562 2067 6f4d 6564     atrix Debug Mode
    6cd0:	203a 1b00 315b 4f6d 5b1b 6d30 1b00 315b     : ..[1mO.[0m..[1
    6ce0:	333b 6d33 1b50 305b 006d 5b1b 3b31 3233     ;33mP.[0m..[1;32
    6cf0:	486d 5b1b 6d30 1b00 315b 333b 6d35 1b52     mH.[0m..[1;35mR.
    6d00:	305b 006d 5b1b 3b31 3133 496d 5b1b 6d30     [0m..[1;31mI.[0m
    6d10:	1b00 315b 353b 333b 6d31 5245 4f52 1b52     ..[1;5;31mERROR.
    6d20:	305b 206d 202d 614d 7274 7869 7320 6163     [0m - Matrix sca
    6d30:	206e 7562 2167 2021 6552 6f70 7472 6d20     n bug!! Report m
    6d40:	2165 0a0d 1b00 315b 333b 6d32 4e49 4f46     e!....[1;32mINFO
    6d50:	5b1b 6d30 2d20 4d20 7861 7320 6163 736e     .[0m - Max scans
    6d60:	203a 2020 2020 0020 5b1b 3b31 3233 496d     :      ..[1;32mI
    6d70:	464e 1b4f 305b 206d 202d 7250 7665 6f69     NFO.[0m - Previo
    6d80:	7375 7320 6163 736e 203a 1b00 315b 333b     us scans: ..[1;3
    6d90:	6d32 4e49 4f46 5b1b 6d30 2d20 5320 6163     2mINFO.[0m - Sca
    6da0:	206e 754e 626d 7265 203a 2020 0020 6b3c     n Number:    .<k
    6db0:	7965 3a3e 703c 6572 6976 756f 2073 7473     ey>:<previous st
    6dc0:	7461 3e65 633c 7275 6572 746e 7320 6174     ate><current sta
    6dd0:	6574 203e 613c 7463 7669 2065 6f63 6e75     te> <active coun
    6de0:	3e74 3c20 6e69 6361 6974 6576 6320 756f     t> <inactive cou
    6df0:	746e 003e 5b1b 6d31 7830 3a00 2000 7830     nt>..[1m0x.:. 0x
    6e00:	6d00 7461 6972 4478 6265 6775 6d00 7461     .matrixDebug.mat
    6e10:	6972 4978 666e 006f 616d 7274 7869 7453     rixInfo.matrixSt
    6e20:	7461 0065                                   ate.

00006e24 <matrixStateCLIDict_DescEntry>:
    6e24:	7250 6e69 7374 6f20 7475 7420 6568 6320     Prints out the c
    6e34:	7275 6572 746e 7320 6163 206e 6174 6c62     urrent scan tabl
    6e44:	2065 204e 6974 656d 2e73 0a0d 0909 1b20     e N times..... .
    6e54:	315b 4f6d 5b1b 6d30 2d20 4f20 6666 202c     [1mO.[0m - Off, 
    6e64:	5b1b 3b31 3333 506d 5b1b 6d30 2d20 5020     .[1;33mP.[0m - P
    6e74:	6572 7373 202c 5b1b 3b31 3233 486d 5b1b     ress, .[1;32mH.[
    6e84:	6d30 2d20 4820 6c6f 2c64 1b20 315b 333b     0m - Hold, .[1;3
    6e94:	6d35 1b52 305b 206d 202d 6552 656c 7361     5mR.[0m - Releas
    6ea4:	2c65 1b20 315b 333b 6d31 1b49 305b 206d     e, .[1;31mI.[0m 
    6eb4:	202d 6e49 6176 696c 0064                    - Invalid.

00006ebe <matrixInfoCLIDict_DescEntry>:
    6ebe:	7250 6e69 2074 6e69 6f66 6120 6f62 7475     Print info about
    6ece:	7420 6568 6320 6e6f 6966 7567 6572 2064      the configured 
    6ede:	616d 7274 7869 002e                         matrix..

00006ee6 <matrixCLIDictName>:
    6ee6:	614d 7274 7869 4d20 646f 6c75 2065 6f43     Matrix Module Co
    6ef6:	6d6d 6e61 7364 0000 0000                    mmands....

00006f00 <matrixCLIDict>:
    6f00:	6e01 0000 6bd0 0000 2fa1 0000 6e0d 0000     .n...k.../...n..
    6f10:	6ebe 0000 2f29 0000 6e18 0000 6e24 0000     .n..)/...n..$n..
    6f20:	2f7d 0000 0000 0000 0000 0000 0000 0000     }/..............

00006f30 <default_tl_0x2B>:
    6f30:	0001 0000 0036 0000                         ....6...

00006f38 <default_tl_0x2C>:
    6f38:	0001 0000 003b 0000                         ....;...

00006f40 <default_tl_0x2D>:
    6f40:	0001 0000 0025 0000                         ....%...

00006f48 <default_tl_0x2E>:
    6f48:	0001 0000 0029 0000                         ....)...

00006f50 <default_tl_0x2F>:
    6f50:	0001 0000 0014 0000                         ........

00006f58 <tm24_guide>:
    6f58:	0001 2001 0100                                   ... .

00006f5d <rm40_guide>:
    6f5d:	0d01 002e                                   ....

00006f61 <rm92_guide>:
    6f61:	0701 0100                                        ...

00006f64 <default_tl_0x41>:
    6f64:	0001 0000 002f 0000                         ..../...

00006f6c <rm64_guide>:
    6f6c:	0d01 0052                                   ..R.

00006f70 <default_tl_0x43>:
    6f70:	0001 0000 001f 0000                         ........

00006f78 <rm36_guide>:
    6f78:	0d01 0050                                   ..P.

00006f7c <default_tl_0x44>:
    6f7c:	0001 0000 0024 0000                         ....$...

00006f84 <default_tl_0x45>:
    6f84:	0001 0000 000e 0000                         ........

00006f8c <default_tl_0x46>:
    6f8c:	0001 0000 0013 0000                         ........

00006f94 <rm3_guide>:
    6f94:	0d01 0037                                   ..7.

00006f98 <macroCLIDictName>:
    6f98:	614d 7263 206f 6f4d 7564 656c 4320 6d6f     Macro Module Com
    6fa8:	616d 646e 0073                              mands.

00006fae <tm41_guide>:
    6fae:	0001 2e01 0100                                   .....

00006fb3 <tm93_guide>:
    6fb3:	0001 0301 5300                                   .....

00006fb8 <keyReleaseCLIDict_DescEntry>:
    6fb8:	6553 646e 6b20 7965 722d 6c65 6165 6573     Send key-release
    6fc8:	6520 6576 746e 7420 206f 616d 7263 206f      event to macro 
    6fd8:	6f6d 7564 656c 202e 7544 6c70 6369 7461     module. Duplicat
    6fe8:	7365 6820 7661 2065 6e75 6564 6966 656e     es have undefine
    6ff8:	2064 6562 6168 6976 756f 2e72 0a0d 0909     d behaviour.....
    7008:	5b1b 3533 536d 3031 5b1b 6d30 5320 6163     .[35mS10.[0m Sca
    7018:	636e 646f 2065 7830 4130 0100                    ncode 0x0A.

00007023 <tm65_guide>:
    7023:	0001 1601 0100                                   .....

00007028 <tm2_guide>:
    7028:	0001 0f01 0100                                   .....

0000702d <tm37_guide>:
    702d:	0001 2d01 0000 0100                              ...-...

00007034 <default_tl_0x30>:
    7034:	0001 0000 0022 0000                         ...."...

0000703c <default_tl_0x31>:
    703c:	0001 0000 0026 0000                         ....&...

00007044 <default_tl_0x32>:
    7044:	0001 0000 0010 0000                         ........

0000704c <default_tl_0x33>:
    704c:	0001 0000 0016 0000                         ........

00007054 <default_tl_0x34>:
    7054:	0001 0000 001a 0000                         ........

0000705c <default_tl_0x35>:
    705c:	0001 0000 0005 0000                         ........

00007064 <default_tl_0x36>:
    7064:	0001 0000 000a 0000                         ........

0000706c <default_tl_0x37>:
    706c:	0001 0000 003d 0000                         ....=...

00007074 <default_tl_0x38>:
    7074:	0001 0000 0003 0000                         ........

0000707c <default_tl_0x39>:
    707c:	0001 0000 0007 0000                         ........

00007084 <default_tl_0x3A>:
    7084:	0001 0000 0039 0000                         ....9...

0000708c <default_tl_0x3B>:
    708c:	0001 0000 0040 0000                         ....@...

00007094 <default_tl_0x3C>:
    7094:	0001 0000 0044 0000                         ....D...

0000709c <default_tl_0x3D>:
    709c:	0001 0000 002d 0000                         ....-...

000070a4 <default_tl_0x3E>:
    70a4:	0001 0000 0033 0000                         ....3...

000070ac <default_tl_0x3F>:
    70ac:	0002 0000 001c 0000 003a 0000               ........:...

000070b8 <rm81_guide>:
    70b8:	0d01 004a                                   ..J.

000070bc <macroStepCLIDict_DescEntry>:
    70bc:	6f44 4e20 6d20 6361 6f72 7020 6f72 6563     Do N macro proce
    70cc:	7373 6e69 2067 7473 7065 2e73 4420 6665     ssing steps. Def
    70dc:	7561 746c 2073 6f74 3120 002e               aults to 1..

000070e8 <rm53_guide>:
    70e8:	0d01 0026                                   ..&.

000070ec <rm25_guide>:
    70ec:	0d01 00e6                                   ....

000070f0 <tm3_guide>:
    70f0:	0001 3801 0100                                   ...8.

000070f5 <rm21_guide>:
    70f5:	0d01 0014                                   ....

000070f9 <capSelectCLIDict_DescEntry>:
    70f9:	7254 6769 6567 7372 7420 6568 7320 6570     Triggers the spe
    7109:	6963 6966 6465 6320 7061 6261 6c69 7469     cified capabilit
    7119:	6569 2e73 4620 7269 7473 7420 6f77 6120     ies. First two a
    7129:	6772 2073 7261 2065 7473 7461 2065 6e61     rgs are state an
    7139:	2064 7473 7461 5465 7079 2e65 0a0d 0909     d stateType.....
    7149:	5b1b 3533 4b6d 3131 5b1b 6d30 4b20 7965     .[35mK11.[0m Key
    7159:	6f62 7261 2064 6143 6170 6962 696c 7974     board Capability
    7169:	3020 3078 0042                               0x0B.

0000716f <rm77_guide>:
    716f:	0d01 0043                                   ..C.

00007173 <tm76_guide>:
    7173:	0001 4601 0100                                   ...F.

00007178 <rm49_guide>:
    7178:	0d01 0030                                   ..0.

0000717c <layer1_tl_0x01>:
    717c:	0001 0000 004b 0000                         ....K...

00007184 <layer1_tl_0x02>:
    7184:	0001 0000 005b 0000                         ....[...

0000718c <layer1_tl_0x03>:
    718c:	0001 0000 005d 0000                         ....]...

00007194 <layer1_tl_0x04>:
    7194:	0001 0000 0048 0000                         ....H...

0000719c <layer1_tl_0x05>:
    719c:	0001 0000 0057 0000                         ....W...

000071a4 <layer1_tl_0x06>:
    71a4:	0001 0000 005a 0000                         ....Z...

000071ac <layer1_tl_0x07>:
    71ac:	0001 0000 0050 0000                         ....P...

000071b4 <layer1_tl_0x08>:
    71b4:	0001 0000 0056 0000                         ....V...

000071bc <layer1_tl_0x09>:
    71bc:	0001 0000 0059 0000                         ....Y...

000071c4 <tm78_guide>:
    71c4:	0001 0a01 0000 0000                         ........

000071cc <macroCLIDict>:
    71cc:	8558 0000 72b0 0000 34bd 0000 8560 0000     X....r...4..`...
    71dc:	70f9 0000 353d 0000 856a 0000 7aff 0000     .p..=5..j....z..
    71ec:	3c69 0000 8572 0000 75e4 0000 3c97 0000     i<..r....u...<..
    71fc:	857b 0000 6fb8 0000 3cc5 0000 8586 0000     {....o...<......
    720c:	7b7c 0000 3641 0000 8591 0000 7f71 0000     |{..A6......q...
    721c:	3739 0000 859b 0000 7e6d 0000 3671 0000     97......m~..q6..
    722c:	85a6 0000 76c8 0000 36d9 0000 85b1 0000     .....v...6......
    723c:	7e3c 0000 37cd 0000 85bb 0000 7c0d 0000     <~...7.......|..
    724c:	3709 0000 85c5 0000 863d 0000 40b5 0000     .7......=....@..
    725c:	85cf 0000 70bc 0000 3515 0000 0000 0000     .....p...5......
    726c:	0000 0000 0000 0000                         ........

00007274 <rm85_guide>:
    7274:	0d01 0041                                   ..A.

00007278 <default_tl_0x40>:
    7278:	0001 0000 002b 0000                         ....+...

00007280 <rm79_guide>:
    7280:	0d01 0040                                   ..@.

00007284 <layer1_tl_0x0A>:
    7284:	0001 0000 004e 0000                         ....N...

0000728c <layer1_tl_0x0B>:
    728c:	0001 0000 0051 0000                         ....Q...

00007294 <layer1_tl_0x0C>:
    7294:	0001 0000 0054 0000                         ....T...

0000729c <layer1_tl_0x0D>:
    729c:	0000 0000                                   ....

000072a0 <layer1_tl_0x0E>:
    72a0:	0000 0000                                   ....

000072a4 <layer1_tl_0x0F>:
    72a4:	0001 0000 004a 0000                         ....J...

000072ac <rm12_guide>:
    72ac:	0d01 001e                                   ....

000072b0 <capListCLIDict_DescEntry>:
    72b0:	7250 6e69 7374 6120 206e 6e69 6564 6578     Prints an indexe
    72c0:	2064 696c 7473 6f20 2066 6c61 206c 6f6e     d list of all no
    72d0:	206e 5355 2042 656b 6379 646f 2065 6163     n USB keycode ca
    72e0:	6170 6962 696c 6974 7365 002e               pabilities..

000072ec <rm70_guide>:
    72ec:	0d01 0033                                   ..3.

000072f0 <tm13_guide>:
    72f0:	0001 2301 0100                                   ...#.

000072f5 <rm42_guide>:
    72f5:	0d01 0018 0000 0000                              .......

000072fc <ResultMacroList>:
    72fc:	7d00 0000 7e38 0000 7aad 0000 6f94 0000     .}..8~...z...o..
    730c:	7d70 0000 7489 0000 7dc5 0000 7671 0000     p}...t...}..qv..
    731c:	7d74 0000 7ad0 0000 8725 0000 7c89 0000     t}...z..%....|..
    732c:	72ac 0000 7d98 0000 772b 0000 7da9 0000     .r...}..+w...}..
    733c:	765f 0000 7efe 0000 7abd 0000 8639 0000     _v...~...z..9...
    734c:	7aa0 0000 70f5 0000 7ab1 0000 862d 0000     .z...p...z..-...
    735c:	7c38 0000 70ec 0000 7d65 0000 7502 0000     8|...p..e}...u..
    736c:	7e13 0000 7733 0000 7d58 0000 74f6 0000     .~..3w..X}...t..
    737c:	7e06 0000 7727 0000 7fc4 0000 7afb 0000     .~..'w.......z..
    738c:	6f78 0000 7cf0 0000 7480 0000 7db6 0000     xo...|...t...}..
    739c:	6f5d 0000 7cc3 0000 72f5 0000 7da5 0000     ]o...|...r...}..
    73ac:	765b 0000 7ef9 0000 7ab9 0000 8635 0000     [v...~...z..5...
    73bc:	7c4c 0000 7178 0000 7aa9 0000 8629 0000     L|..xq...z..)...
    73cc:	7c76 0000 70e8 0000 7d61 0000 74fe 0000     v|...p..a}...t..
    73dc:	7e0f 0000 772f 0000 7fc8 0000 7b6c 0000     .~../w......l{..
    73ec:	7e02 0000 7723 0000 7fc0 0000 7af7 0000     .~..#w.......z..
    73fc:	6f6c 0000 7ce4 0000 747c 0000 7db2 0000     lo...|..|t...}..
    740c:	7663 0000 7f0c 0000 72ec 0000 7d9c 0000     cv.......r...}..
    741c:	7652 0000 7ef4 0000 7ab5 0000 8631 0000     Rv...~...z..1...
    742c:	7c44 0000 716f 0000 7c84 0000 7280 0000     D|..oq...|...r..
    743c:	7c00 0000 70b8 0000 7d5c 0000 74fa 0000     .|...p..\}...t..
    744c:	7e0a 0000 7274 0000 7e2f 0000 7a7a 0000     .~..tr../~..zz..
    745c:	7e21 0000 7be0 0000 7fbc 0000 7af2 0000     !~...{.......z..
    746c:	6f61 0000 7cd4 0000 74e5 0000 7d32 0000     ao...|...t..2}..

0000747c <rm66_guide>:
    747c:	0d01 000f                                   ....

00007480 <rm38_guide>:
    7480:	0d01 001b                                   ....

00007484 <tm71_guide>:
    7484:	0001 1201 0100                                   .....

00007489 <rm5_guide>:
    7489:	0d01 0011                                   ....

0000748d <tm43_guide>:
    748d:	0001 4001 0000 0000                              ...@...

00007494 <layer1_tl_0x11>:
    7494:	0000 0000                                   ....

00007498 <layer1_tl_0x12>:
    7498:	0000 0000                                   ....

0000749c <layer1_tl_0x13>:
    749c:	0000 0000                                   ....

000074a0 <tm95_guide>:
    74a0:	0001 2501 0000 0000                         ...%....

000074a8 <layer1_tl_0x15>:
    74a8:	0000 0000                                   ....

000074ac <layer1_tl_0x16>:
    74ac:	0000 0000                                   ....

000074b0 <layer1_tl_0x17>:
    74b0:	0000 0000                                   ....

000074b4 <layer1_tl_0x18>:
    74b4:	0000 0000                                   ....

000074b8 <layer1_tl_0x19>:
    74b8:	0000 0000                                   ....

000074bc <tm39_guide>:
    74bc:	0001 1a01 0000 0000                         ........

000074c4 <layer1_tl_0x1A>:
    74c4:	0000 0000                                   ....

000074c8 <layer1_tl_0x1B>:
    74c8:	0000 0000                                   ....

000074cc <layer1_tl_0x1C>:
    74cc:	0000 0000                                   ....

000074d0 <layer1_tl_0x1D>:
    74d0:	0000 0000                                   ....

000074d4 <layer1_tl_0x1E>:
    74d4:	0001 0000 004f 0000                         ....O...

000074dc <layer1_tl_0x1F>:
    74dc:	0000 0000                                   ....

000074e0 <tm18_guide>:
    74e0:	0001 0d01 0100                                   .....

000074e5 <rm94_guide>:
    74e5:	0001 0f04 0000 0100                              .......

000074ec <tm97_guide>:
    74ec:	0001 1e01 0100                                   .....

000074f1 <tm30_guide>:
    74f1:	0001 0a01 0100                                   .....

000074f6 <rm31_guide>:
    74f6:	0d01 0076                                   ..v.

000074fa <rm83_guide>:
    74fa:	0d01 0045                                   ..E.

000074fe <rm55_guide>:
    74fe:	0d01 0023                                   ..#.

00007502 <rm27_guide>:
    7502:	0d01 0031                                   ..1.

00007506 <tm60_guide>:
    7506:	0001 1501 0100                                   .....

0000750b <tm84_guide>:
    750b:	0001 0c01 0000                                   .....

00007510 <layer1_tl_0x20>:
    7510:	0000 0000                                   ....

00007514 <layer1_tl_0x21>:
    7514:	0000 0000                                   ....

00007518 <tm56_guide>:
    7518:	0001 1801 0000 0000                         ........

00007520 <layer1_tl_0x23>:
    7520:	0000 0000                                   ....

00007524 <layer1_tl_0x24>:
    7524:	0000 0000                                   ....

00007528 <tm28_guide>:
    7528:	0001 3f01 0000 0000                         ...?....

00007530 <layer1_tl_0x26>:
    7530:	0001 0000 0049 0000                         ....I...

00007538 <layer1_tl_0x27>:
    7538:	0001 0000 0058 0000                         ....X...

00007540 <layer1_tl_0x28>:
    7540:	0001 0000 005c 0000                         ....\...

00007548 <layer1_tl_0x29>:
    7548:	0000 0000                                   ....

0000754c <layer1_tl_0x2A>:
    754c:	0000 0000                                   ....

00007550 <layer1_tl_0x2B>:
    7550:	0000 0000                                   ....

00007554 <layer1_tl_0x2C>:
    7554:	0000 0000                                   ....

00007558 <layer1_tl_0x2D>:
    7558:	0001 0000 0053 0000                         ....S...

00007560 <layer1_tl_0x2E>:
    7560:	0001 0000 0055 0000                         ....U...

00007568 <layer1_tl_0x2F>:
    7568:	0000 0000                                   ....

0000756c <CapabilitiesList>:
    756c:	2ee1 0000 0004 0000 3a21 0000 0002 0000     ........!:......
    757c:	3a45 0000 0002 0000 3a8d 0000 0001 0000     E:.......:......
    758c:	3a69 0000 0002 0000 39fd 0000 0003 0000     i:.......9......
    759c:	4675 0000 0002 0000 4739 0000 0000 0000     uF......9G......
    75ac:	4801 0000 0000 0000 4831 0000 0000 0000     .H......1H......
    75bc:	46cd 0000 0000 0000 46e1 0000 0001 0000     .F.......F......
    75cc:	4865 0000 0000 0000 4899 0000 0001 0000     eH.......H......
    75dc:	4751 0000 0006 0000                         QG......

000075e4 <keyPressCLIDict_DescEntry>:
    75e4:	6553 646e 6b20 7965 702d 6572 7373 6520     Send key-press e
    75f4:	6576 746e 2073 6f74 7420 6568 6d20 6361     vents to the mac
    7604:	6f72 6d20 646f 6c75 2e65 4420 7075 696c     ro module. Dupli
    7614:	6163 6574 2073 6168 6576 7520 646e 6665     cates have undef
    7624:	6e69 6465 6220 6865 7661 6f69 7275 0d2e     ined behaviour..
    7634:	090a 1b09 335b 6d35 3153 1b30 305b 206d     ....[35mS10.[0m 
    7644:	6353 6e61 6f63 6564 3020 3078 0041          Scancode 0x0A.

00007652 <rm72_guide>:
    7652:	0d01 003d                                   ..=.

00007656 <tm15_guide>:
    7656:	0001 1001 0100                                   .....

0000765b <rm44_guide>:
    765b:	0d01 002f                                   ../.

0000765f <rm16_guide>:
    765f:	0d01 0006                                   ....

00007663 <rm68_guide>:
    7663:	0d01 004e                                   ..N.

00007667 <tm87_guide>:
    7667:	0001 0501 0100                                   .....

0000766c <tm73_guide>:
    766c:	0001 2601 0100                                   ...&.

00007671 <rm7_guide>:
    7671:	0d01 0038                                   ..8.

00007675 <tm45_guide>:
    7675:	0001 3d01 0100                                   ...=.

0000767a <tm17_guide>:
    767a:	0001 2401 0000                              ...$..

00007680 <layer1_tl_0x31>:
    7680:	0000 0000                                   ....

00007684 <layer1_tl_0x32>:
    7684:	0000 0000                                   ....

00007688 <layer1_tl_0x33>:
    7688:	0001 0000 004d 0000                         ....M...

00007690 <layer1_tl_0x34>:
    7690:	0000 0000                                   ....

00007694 <layer1_tl_0x35>:
    7694:	0000 0000                                   ....

00007698 <layer1_tl_0x36>:
    7698:	0000 0000                                   ....

0000769c <layer1_tl_0x37>:
    769c:	0000 0000                                   ....

000076a0 <layer1_tl_0x38>:
    76a0:	0000 0000                                   ....

000076a4 <tm11_guide>:
    76a4:	0001 1f01 0000 0000                         ........

000076ac <layer1_tl_0x3A>:
    76ac:	0000 0000                                   ....

000076b0 <layer1_tl_0x3B>:
    76b0:	0000 0000                                   ....

000076b4 <layer1_tl_0x3C>:
    76b4:	0001 0000 005e 0000                         ....^...

000076bc <layer1_tl_0x3D>:
    76bc:	0000 0000                                   ....

000076c0 <layer1_tl_0x3E>:
    76c0:	0000 0000                                   ....

000076c4 <layer1_tl_0x3F>:
    76c4:	0000 0000                                   ....

000076c8 <macroDebugCLIDict_DescEntry>:
    76c8:	6944 6173 6c62 7365 452f 616e 6c62 7365     Disables/Enables
    76d8:	7320 6e65 6964 676e 5520 4253 6b20 7965      sending USB key
    76e8:	6f63 6564 2073 6f74 7420 6568 4f20 7475     codes to the Out
    76f8:	7570 2074 6f4d 7564 656c 6120 646e 7020     put Module and p
    7708:	6972 746e 2073 2f55 204b 6f63 6564 2e73     rints U/K codes.
    7718:	0100                                             .

00007719 <tm99_guide>:
    7719:	0001 3c01 0100                                   ...<.

0000771e <tm32_guide>:
    771e:	0001 1e01 0100                                   .....

00007723 <rm61_guide>:
    7723:	0d01 0036                                   ..6.

00007727 <rm33_guide>:
    7727:	0d01 0024                                   ..$.

0000772b <rm14_guide>:
    772b:	0d01 0051                                   ..Q.

0000772f <rm57_guide>:
    772f:	0d01 00e5                                   ....

00007733 <rm29_guide>:
    7733:	0d01 0016 0000                                   .....

00007738 <layer1_tl_0x10>:
    7738:	0000 0000                                   ....

0000773c <tm90_guide>:
    773c:	0001 0601 0100                                   .....

00007741 <tm62_guide>:
    7741:	0001 1901 0000 c100                              .......

00007748 <TriggerMacroList>:
    7748:	7ac1 0000 0000 0000 7bbb 0000 0001 0000     .z.......{......
    7758:	7028 0000 0002 0000 70f0 0000 0003 0000     (p.......p......
    7768:	7c2c 0000 0004 0000 7de3 0000 0005 0000     ,|.......}......
    7778:	7ae8 0000 0006 0000 7f6c 0000 0007 0000     .z......l.......
    7788:	7ae3 0000 0008 0000 8720 0000 0009 0000     .z...... .......
    7798:	7aed 0000 000a 0000 76a4 0000 000b 0000     .z.......v......
    77a8:	7cbe 0000 000c 0000 72f0 0000 000d 0000     .|.......r......
    77b8:	7da0 0000 000e 0000 7656 0000 000f 0000     .}......Vv......
    77c8:	7dd4 0000 0010 0000 767a 0000 0011 0000     .}......zv......
    77d8:	74e0 0000 0012 0000 7ade 0000 0013 0000     .t.......z......
    77e8:	7e68 0000 0014 0000 7aa4 0000 0015 0000     h~.......z......
    77f8:	8624 0000 0016 0000 7c08 0000 0017 0000     $........|......
    7808:	6f58 0000 0018 0000 7c71 0000 0019 0000     Xo......q|......
    7818:	7d0d 0000 001a 0000 7d88 0000 001b 0000     .}.......}......
    7828:	7528 0000 001c 0000 7e33 0000 001d 0000     (u......3~......
    7838:	74f1 0000 001e 0000 7dfd 0000 001f 0000     .t.......}......
    7848:	771e 0000 0020 0000 7e1c 0000 0021 0000     .w.. ....~..!...
    7858:	7a68 0000 0022 0000 7fe0 0000 0023 0000     hz..".......#...
    7868:	7bc4 0000 0024 0000 702d 0000 0025 0000     .{..$...-p..%...
    7878:	7d39 0000 0026 0000 74bc 0000 0027 0000     9}..&....t..'...
    7888:	7cb9 0000 0028 0000 6fae 0000 0029 0000     .|..(....o..)...
    7898:	7d18 0000 002a 0000 748d 0000 002b 0000     .}..*....t..+...
    78a8:	7dc9 0000 002c 0000 7675 0000 002d 0000     .}..,...uv..-...
    78b8:	7dec 0000 002e 0000 7ad9 0000 002f 0000     .}.......z../...
    78c8:	86cb 0000 0030 0000 7c7f 0000 0031 0000     ....0....|..1...
    78d8:	7f10 0000 0032 0000 7ac6 0000 0033 0000     ....2....z..3...
    78e8:	86c6 0000 0034 0000 7c6c 0000 0035 0000     ....4...l|..5...
    78f8:	7dad 0000 0036 0000 7b70 0000 0037 0000     .}..6...p{..7...
    7908:	7518 0000 0038 0000 7e2a 0000 0039 0000     .u..8...*~..9...
    7918:	7a72 0000 003a 0000 7bf4 0000 003b 0000     rz..:....{..;...
    7928:	7506 0000 003c 0000 7e17 0000 003d 0000     .u..<....~..=...
    7938:	7741 0000 003e 0000 7fd3 0000 003f 0000     Aw..>.......?...
    7948:	7bb6 0000 0040 0000 7023 0000 0041 0000     .{..@...#p..A...
    7958:	7d2d 0000 0042 0000 7ad4 0000 0043 0000     -}..B....z..C...
    7968:	7dde 0000 0044 0000 8048 0000 0045 0000     .}..D...H...E...
    7978:	7d08 0000 0046 0000 7484 0000 0047 0000     .}..F....t..G...
    7988:	7dc0 0000 0048 0000 766c 0000 000e 0000     .}..H...lv......
    7998:	7cb4 0000 0049 0000 7acb 0000 004a 0000     .|..I....z..J...
    79a8:	7173 0000 004b 0000 7c7a 0000 004c 0000     sq..K...z|..L...
    79b8:	71c4 0000 004d 0000 7d8d 0000 004e 0000     .q..M....}..N...
    79c8:	86c1 0000 004f 0000 8020 0000 0050 0000     ....O... ...P...
    79d8:	7be4 0000 0051 0000 7d78 0000 0052 0000     .{..Q...x}..R...
    79e8:	750b 0000 0053 0000 7e25 0000 0054 0000     .u..S...%~..T...
    79f8:	7a6d 0000 0055 0000 7667 0000 0056 0000     mz..U...gv..V...
    7a08:	7bd0 0000 0040 0000 8058 0000 0057 0000     .{..@...X...W...
    7a18:	773c 0000 0058 0000 7fce 0000 0059 0000     <w..X.......Y...
    7a28:	7bb1 0000 0013 0000 6fb3 0000 005a 0000     .{.......o..Z...
    7a38:	7d28 0000 005b 0000 74a0 0000 0024 0000     (}..[....t..$...
    7a48:	7dd9 0000 005c 0000 74ec 0000 005d 0000     .}..\....t..]...
    7a58:	7df8 0000 005e 0000 7719 0000 005f 0000     .}..^....w.._...

00007a68 <tm34_guide>:
    7a68:	0001 3001 0100                                   ...0.

00007a6d <tm86_guide>:
    7a6d:	0001 0801 0200                                   .....

00007a72 <tm58_guide>:
    7a72:	0002 3f01 0100 0000                         ...?....

00007a7a <rm87_guide>:
    7a7a:	0d01 0042 0000                              ..B...

00007a80 <layer1_tl_0x41>:
    7a80:	0000 0000                                   ....

00007a84 <layer1_tl_0x42>:
    7a84:	0000 0000                                   ....

00007a88 <layer1_tl_0x43>:
    7a88:	0000 0000                                   ....

00007a8c <layer1_tl_0x44>:
    7a8c:	0001 0000 0052 0000                         ....R...

00007a94 <layer1_tl_0x45>:
    7a94:	0000 0000                                   ....

00007a98 <layer1_tl_0x46>:
    7a98:	0001 0000 004c 0000                         ....L...

00007aa0 <rm20_guide>:
    7aa0:	0d01 0064                                   ..d.

00007aa4 <tm21_guide>:
    7aa4:	0001 1101 0100                                   .....

00007aa9 <rm50_guide>:
    7aa9:	0d01 0022                                   ..".

00007aad <rm2_guide>:
    7aad:	0d01 0035                                   ..5.

00007ab1 <rm22_guide>:
    7ab1:	0d01 0019                                   ....

00007ab5 <rm74_guide>:
    7ab5:	0d01 003a                                   ..:.

00007ab9 <rm46_guide>:
    7ab9:	0d01 0025                                   ..%.

00007abd <rm18_guide>:
    7abd:	0d01 0032                                   ..2.

00007ac1 <tm0_guide>:
    7ac1:	0001 0401 0100                                   .....

00007ac6 <tm51_guide>:
    7ac6:	0001 3e01 0100                                   ...>.

00007acb <tm75_guide>:
    7acb:	0001 0101 0100                                   .....

00007ad0 <rm9_guide>:
    7ad0:	0d01 0015                                   ....

00007ad4 <tm67_guide>:
    7ad4:	0001 0301 0100                                   .....

00007ad9 <tm47_guide>:
    7ad9:	0001 4101 0100                                   ...A.

00007ade <tm19_guide>:
    7ade:	0001 4601 0100                                   ...F.

00007ae3 <tm8_guide>:
    7ae3:	0001 2201 0100                                   ...".

00007ae8 <tm6_guide>:
    7ae8:	0001 0001 0100                                   .....

00007aed <tm10_guide>:
    7aed:	0001 3601 0100                                   ...6.

00007af2 <rm91_guide>:
    7af2:	0601 00ea 0100                                   .....

00007af7 <rm63_guide>:
    7af7:	0d01 001f                                   ....

00007afb <rm35_guide>:
    7afb:	0d01 002d                                   ..-.

00007aff <keyHoldCLIDict_DescEntry>:
    7aff:	6553 646e 6b20 7965 682d 6c6f 2064 7665     Send key-hold ev
    7b0f:	6e65 7374 7420 206f 6874 2065 616d 7263     ents to the macr
    7b1f:	206f 6f6d 7564 656c 202e 7544 6c70 6369     o module. Duplic
    7b2f:	7461 7365 6820 7661 2065 6e75 6564 6966     ates have undefi
    7b3f:	656e 2064 6562 6168 6976 756f 2e72 0a0d     ned behaviour...
    7b4f:	0909 5b1b 3533 536d 3031 5b1b 6d30 5320     ...[35mS10.[0m S
    7b5f:	6163 636e 646f 2065 7830 4130 0100               cancode 0x0A.

00007b6c <rm59_guide>:
    7b6c:	0d01 0028                                   ..(.

00007b70 <tm55_guide>:
    7b70:	0001 0601 0000 0000                         ........

00007b78 <layer2_tl_0x1F>:
    7b78:	0000 0000                                   ....

00007b7c <layerDebugCLIDict_DescEntry>:
    7b7c:	614c 6579 2072 6564 7562 2067 6f6d 6564     Layer debug mode
    7b8c:	202e 6853 776f 2073 616c 6579 2072 7473     . Shows layer st
    7b9c:	6361 206b 6e61 2064 6e61 2079 6863 6e61     ack and any chan
    7bac:	6567 2e73 0100                                   ges..

00007bb1 <tm92_guide>:
    7bb1:	0001 2801 0100                                   ...(.

00007bb6 <tm64_guide>:
    7bb6:	0001 3b01 0100                                   ...;.

00007bbb <tm1_guide>:
    7bbb:	0001 2601 0000                                   ...&.

00007bc0 <layer1_tl_0x22>:
    7bc0:	0000 0000                                   ....

00007bc4 <tm36_guide>:
    7bc4:	0001 4401 0000 0000                         ...D....

00007bcc <layer1_tl_0x30>:
    7bcc:	0000 0000                                   ....

00007bd0 <tm88_guide>:
    7bd0:	0001 2701 0000 0000                         ...'....

00007bd8 <layer1_tl_0x25>:
    7bd8:	0001 0000 005f 0000                         ...._...

00007be0 <rm89_guide>:
    7be0:	0d01 003b                                   ..;.

00007be4 <tm82_guide>:
    7be4:	0001 4401 0000 0000                         ...D....

00007bec <layer2_tl_0x1E>:
    7bec:	0001 0000 0061 0000                         ....a...

00007bf4 <tm59_guide>:
    7bf4:	0001 2c01 0000 0000                         ...,....

00007bfc <layer2_tl_0x20>:
    7bfc:	0000 0000                                   ....

00007c00 <rm80_guide>:
    7c00:	0d01 0044                                   ..D.

00007c04 <layer2_tl_0x22>:
    7c04:	0000 0000                                   ....

00007c08 <tm23_guide>:
    7c08:	0001 0e01 5000                                   .....

00007c0d <macroProcCLIDict_DescEntry>:
    7c0d:	6150 7375 2f65 6552 7573 656d 6d20 6361     Pause/Resume mac
    7c1d:	6f72 7020 6f72 6563 7373 6e69 2e67 0100          ro processing..

00007c2c <tm4_guide>:
    7c2c:	0001 1301 0000 0000                         ........

00007c34 <layer2_tl_0x26>:
    7c34:	0000 0000                                   ....

00007c38 <rm24_guide>:
    7c38:	0d01 0004                                   ....

00007c3c <layer2_tl_0x28>:
    7c3c:	0000 0000                                   ....

00007c40 <layer2_tl_0x29>:
    7c40:	0000 0000                                   ....

00007c44 <rm76_guide>:
    7c44:	0d03 0de0 0de2 0019                         ........

00007c4c <rm48_guide>:
    7c4c:	0d01 0034                                   ..4.

00007c50 <layer2_tl_0x2A>:
    7c50:	0000 0000                                   ....

00007c54 <layer2_tl_0x2B>:
    7c54:	0000 0000                                   ....

00007c58 <layer2_tl_0x2C>:
    7c58:	0000 0000                                   ....

00007c5c <layer2_tl_0x2D>:
    7c5c:	0001 0000 0062 0000                         ....b...

00007c64 <layer2_tl_0x2E>:
    7c64:	0000 0000                                   ....

00007c68 <layer1_tl_0x14>:
    7c68:	0000 0000                                   ....

00007c6c <tm53_guide>:
    7c6c:	0001 0901 0100                                   .....

00007c71 <tm25_guide>:
    7c71:	0001 4201 0100                                   ...B.

00007c76 <rm52_guide>:
    7c76:	0d01 000e                                   ....

00007c7a <tm77_guide>:
    7c7a:	0001 3301 0100                                   ...3.

00007c7f <tm49_guide>:
    7c7f:	0001 1c01 0100                                   .....

00007c84 <rm78_guide>:
    7c84:	0601 00e2 0100                                   .....

00007c89 <rm11_guide>:
    7c89:	0d01 00e0 0000 2400                              .......

00007c90 <LayerIndex>:
    7c90:	8b24 1fff 85d9 0000 4600 0000 8a0c 1fff     $........F......
    7ca0:	85f2 0000 4601 0000 8c40 1fff 860b 0000     .....F..@.......
    7cb0:	3c1e 0000                                   .<..

00007cb4 <tm74_guide>:
    7cb4:	0001 0f01 0100                                   .....

00007cb9 <tm40_guide>:
    7cb9:	0001 0c01 0100                                   .....

00007cbe <tm12_guide>:
    7cbe:	0001 0101 0100                                   .....

00007cc3 <rm41_guide>:
    7cc3:	0d01 00e1 0000                                   .....

00007cc8 <layer2_tl_0x30>:
    7cc8:	0000 0000                                   ....

00007ccc <layer2_tl_0x31>:
    7ccc:	0000 0000                                   ....

00007cd0 <layer2_tl_0x32>:
    7cd0:	0000 0000                                   ....

00007cd4 <rm93_guide>:
    7cd4:	0001 0005 0000 0000                         ........

00007cdc <layer2_tl_0x34>:
    7cdc:	0000 0000                                   ....

00007ce0 <layer2_tl_0x35>:
    7ce0:	0000 0000                                   ....

00007ce4 <rm65_guide>:
    7ce4:	0d01 001c                                   ....

00007ce8 <layer2_tl_0x37>:
    7ce8:	0000 0000                                   ....

00007cec <layer2_tl_0x38>:
    7cec:	0000 0000                                   ....

00007cf0 <rm37_guide>:
    7cf0:	0d01 004b                                   ..K.

00007cf4 <layer2_tl_0x23>:
    7cf4:	0001 0000 0060 0000                         ....`...

00007cfc <layer2_tl_0x24>:
    7cfc:	0000 0000                                   ....

00007d00 <rm0_guide>:
    7d00:	0d01 0021                                   ..!.

00007d04 <layer2_tl_0x25>:
    7d04:	0000 0000                                   ....

00007d08 <tm70_guide>:
    7d08:	0001 2901 0100                                   ...).

00007d0d <tm26_guide>:
    7d0d:	0001 3401 0000 0000                              ...4...

00007d14 <layer2_tl_0x3A>:
    7d14:	0000 0000                                   ....

00007d18 <tm42_guide>:
    7d18:	0001 1701 0000 0000                         ........

00007d20 <layer2_tl_0x3C>:
    7d20:	0001 0000 0063 0000                         ....c...

00007d28 <tm94_guide>:
    7d28:	0001 3c01 0100                                   ...<.

00007d2d <tm66_guide>:
    7d2d:	0001 2801 0100                                   ...(.

00007d32 <rm95_guide>:
    7d32:	0001 0f03 0000 0100                              .......

00007d39 <tm38_guide>:
    7d39:	0001 3101 0000 0000                              ...1...

00007d40 <layer1_tl_0x39>:
    7d40:	0000 0000                                   ....

00007d44 <default_tl_0x11>:
    7d44:	0001 0000 0015 0000                         ........

00007d4c <layer2_tl_0x2F>:
    7d4c:	0000 0000                                   ....

00007d50 <default_tl_0x15>:
    7d50:	0001 0000 003c 0000                         ....<...

00007d58 <rm30_guide>:
    7d58:	0d01 0027                                   ..'.

00007d5c <rm82_guide>:
    7d5c:	0601 00e9 0100                                   .....

00007d61 <rm54_guide>:
    7d61:	0d01 0065                                   ..e.

00007d65 <rm26_guide>:
    7d65:	0d01 0005 0000 0000                              .......

00007d6c <layer2_tl_0x21>:
    7d6c:	0000 0000                                   ....

00007d70 <rm4_guide>:
    7d70:	0d01 0008                                   ....

00007d74 <rm8_guide>:
    7d74:	0d01 0007                                   ....

00007d78 <tm83_guide>:
    7d78:	0001 2d01 0000 0000                         ...-....

00007d80 <default_tl_0x1E>:
    7d80:	0001 0000 0020 0000                         .... ...

00007d88 <tm27_guide>:
    7d88:	0001 1d01 0100                                   .....

00007d8d <tm79_guide>:
    7d8d:	0001 1e01 0000 0000                              .......

00007d94 <layer2_tl_0x27>:
    7d94:	0000 0000                                   ....

00007d98 <rm13_guide>:
    7d98:	0d01 0009                                   ....

00007d9c <rm71_guide>:
    7d9c:	0d01 001a                                   ....

00007da0 <tm14_guide>:
    7da0:	0001 4501 0100                                   ...E.

00007da5 <rm43_guide>:
    7da5:	0d01 002c                                   ..,.

00007da9 <rm15_guide>:
    7da9:	0d01 002b                                   ..+.

00007dad <tm54_guide>:
    7dad:	0001 2b01 0100                                   ...+.

00007db2 <rm67_guide>:
    7db2:	0d01 0020                                   .. .

00007db6 <rm39_guide>:
    7db6:	0d01 0013 0000                              ......

00007dbc <layer2_tl_0x33>:
    7dbc:	0000 0000                                   ....

00007dc0 <tm72_guide>:
    7dc0:	0001 0401 0100                                   .....

00007dc5 <rm6_guide>:
    7dc5:	0d01 0029                                   ..).

00007dc9 <tm44_guide>:
    7dc9:	0001 1b01 0000 0000                              .......

00007dd0 <layer2_tl_0x36>:
    7dd0:	0000 0000                                   ....

00007dd4 <tm16_guide>:
    7dd4:	0001 3201 0100                                   ...2.

00007dd9 <tm96_guide>:
    7dd9:	0001 2301 0100                                   ...#.

00007dde <tm68_guide>:
    7dde:	0001 3c01 0100                                   ...<.

00007de3 <tm5_guide>:
    7de3:	0001 3501 0000                                   ...5.

00007de8 <layer1_tl_0x40>:
    7de8:	0000 0000                                   ....

00007dec <tm46_guide>:
    7dec:	0001 0801 0000 0000                         ........

00007df4 <layer2_tl_0x3B>:
    7df4:	0000 0000                                   ....

00007df8 <tm98_guide>:
    7df8:	0001 2d01 0100                                   ...-.

00007dfd <tm31_guide>:
    7dfd:	0001 4301 0100                                   ...C.

00007e02 <rm60_guide>:
    7e02:	0d01 0017                                   ....

00007e06 <rm32_guide>:
    7e06:	0d01 004c                                   ..L.

00007e0a <rm84_guide>:
    7e0a:	0401 0002 0100                                   .....

00007e0f <rm56_guide>:
    7e0f:	0d01 000c                                   ....

00007e13 <rm28_guide>:
    7e13:	0d01 00e3                                   ....

00007e17 <tm61_guide>:
    7e17:	0001 3701 0100                                   ...7.

00007e1c <tm33_guide>:
    7e1c:	0001 0701 0100                                   .....

00007e21 <rm88_guide>:
    7e21:	0d01 003f                                   ..?.

00007e25 <tm85_guide>:
    7e25:	0001 2e01 0100                                   .....

00007e2a <tm57_guide>:
    7e2a:	0001 3a01 0100                                   ...:.

00007e2f <rm86_guide>:
    7e2f:	0d01 003e                                   ..>.

00007e33 <tm29_guide>:
    7e33:	0001 2101 0100                                   ...!.

00007e38 <rm1_guide>:
    7e38:	0d01 000d                                   ....

00007e3c <macroListCLIDict_DescEntry>:
    7e3c:	694c 7473 7420 6568 6420 6665 6e69 6465     List the defined
    7e4c:	7420 6972 6767 7265 6120 646e 7220 7365      trigger and res
    7e5c:	6c75 2074 616d 7263 736f 002e               ult macros..

00007e68 <tm20_guide>:
    7e68:	0001 2f01 4d00                                   .../.

00007e6d <layerStateCLIDict_DescEntry>:
    7e6d:	6f4d 6964 7966 7320 6570 6963 6966 6465     Modify specified
    7e7d:	6920 646e 7865 6465 6c20 7961 7265 7320      indexed layer s
    7e8d:	6174 6574 3c20 616c 6579 3e72 3c20 7473     tate <layer> <st
    7e9d:	7461 2065 7962 6574 2e3e 0a0d 0909 5b1b     ate byte>......[
    7ead:	3533 4c6d 1b32 305b 206d 6e49 6564 6578     35mL2.[0m Indexe
    7ebd:	2064 614c 6579 2072 7830 3230 0a0d 0909     d Layer 0x02....
    7ecd:	2030 664f 2c66 3120 5320 6968 7466 202c     0 Off, 1 Shift, 
    7edd:	2032 614c 6374 2c68 3420 4c20 636f 206b     2 Latch, 4 Lock 
    7eed:	7453 7461 7365 0100                              States.

00007ef4 <rm73_guide>:
    7ef4:	0601 00cd 0100                                   .....

00007ef9 <rm45_guide>:
    7ef9:	0401 0001 0100                                   .....

00007efe <rm17_guide>:
    7efe:	0d01 000a 0000                              ......

00007f04 <default_tl_0x42>:
    7f04:	0001 0000 0019 0000                         ........

00007f0c <rm69_guide>:
    7f0c:	0d01 000b                                   ....

00007f10 <tm50_guide>:
    7f10:	0001 0501 0000 0000                         ........

00007f18 <default_tl_0x00>:
    7f18:	0002 0000 0006 0000 003a 0000               ........:...

00007f24 <default_tl_0x01>:
    7f24:	0001 0000 000c 0000                         ........

00007f2c <default_tl_0x02>:
    7f2c:	0001 0000 003f 0000                         ....?...

00007f34 <default_tl_0x03>:
    7f34:	0001 0000 0043 0000                         ....C...

00007f3c <default_tl_0x04>:
    7f3c:	0001 0000 0000 0000                         ........

00007f44 <default_tl_0x05>:
    7f44:	0001 0000 0032 0000                         ....2...

00007f4c <default_tl_0x06>:
    7f4c:	0001 0000 0037 0000                         ....7...

00007f54 <default_tl_0x07>:
    7f54:	0001 0000 0021 0000                         ....!...

00007f5c <default_tl_0x08>:
    7f5c:	0001 0000 002e 0000                         ........

00007f64 <default_tl_0x09>:
    7f64:	0001 0000 0035 0000                         ....5...

00007f6c <tm7_guide>:
    7f6c:	0001 3901 4c00                                   ...9.

00007f71 <layerListCLIDict_DescEntry>:
    7f71:	694c 7473 6120 6176 6c69 6261 656c 6c20     List available l
    7f81:	7961 7265 2e73 0100                              ayers..

00007f88 <default_tl_0x0A>:
    7f88:	0001 0000 001e 0000                         ........

00007f90 <default_tl_0x0B>:
    7f90:	0001 0000 0023 0000                         ....#...

00007f98 <default_tl_0x0C>:
    7f98:	0001 0000 0028 0000                         ....(...

00007fa0 <default_tl_0x0D>:
    7fa0:	0001 0000 0012 0000                         ........

00007fa8 <default_tl_0x0E>:
    7fa8:	0001 0000 0017 0000                         ........

00007fb0 <default_tl_0x0F>:
    7fb0:	0001 0000 0002 0000                         ........

00007fb8 <layer2_tl_0x39>:
    7fb8:	0000 0000                                   ....

00007fbc <rm90_guide>:
    7fbc:	0d01 003c                                   ..<.

00007fc0 <rm62_guide>:
    7fc0:	0d01 0012                                   ....

00007fc4 <rm34_guide>:
    7fc4:	0d01 001d                                   ....

00007fc8 <rm58_guide>:
    7fc8:	0d02 0de3 0035                              ....5.

00007fce <tm91_guide>:
    7fce:	0001 0201 0100                                   .....

00007fd3 <tm63_guide>:
    7fd3:	0001 0201 0100                                   .....

00007fd8 <default_tl_0x10>:
    7fd8:	0001 0000 000f 0000                         ........

00007fe0 <tm35_guide>:
    7fe0:	0001 0b01 0000 0000                         ........

00007fe8 <default_tl_0x12>:
    7fe8:	0001 0000 0047 0000                         ....G...

00007ff0 <default_tl_0x13>:
    7ff0:	0001 0000 0004 0000                         ........

00007ff8 <default_tl_0x14>:
    7ff8:	0001 0000 0009 0000                         ........

00008000 <default_tl_0x16>:
    8000:	0001 0000 0041 0000                         ....A...

00008008 <default_tl_0x17>:
    8008:	0001 0000 002a 0000                         ....*...

00008010 <default_tl_0x18>:
    8010:	0001 0000 0038 0000                         ....8...

00008018 <default_tl_0x19>:
    8018:	0001 0000 003e 0000                         ....>...

00008020 <tm81_guide>:
    8020:	0001 0b01 0000 0000                         ........

00008028 <default_tl_0x1A>:
    8028:	0001 0000 0027 0000                         ....'...

00008030 <default_tl_0x1B>:
    8030:	0001 0000 002c 0000                         ....,...

00008038 <default_tl_0x1C>:
    8038:	0001 0000 0031 0000                         ....1...

00008040 <default_tl_0x1D>:
    8040:	0001 0000 001b 0000                         ........

00008048 <tm69_guide>:
    8048:	0001 2501 0000 0000                         ...%....

00008050 <default_tl_0x1F>:
    8050:	0001 0000 000b 0000                         ........

00008058 <tm89_guide>:
    8058:	0001 0901 1b00 315b 333b 6d32 4e49 4f46     ......[1;32mINFO
    8068:	5b1b 6d30 2d20 4320 7061 6261 6c69 7469     .[0m - Capabilit
    8078:	6569 2073 694c 7473 0020 0a0d 0009 5b1b     ies List ......[
    8088:	3b31 3233 496d 464e 1b4f 305b 206d 202d     1;32mINFO.[0m - 
    8098:	004b 5b1b 3b31 3333 576d 5241 494e 474e     K..[1;33mWARNING
    80a8:	5b1b 6d30 2d20 6620 616c 6873 6f4d 6564     .[0m - flashMode
    80b8:	6e45 6261 656c 2064 6f6e 2074 6573 2c74     Enabled not set,
    80c8:	6320 6e61 6563 6c6c 6e69 2067 6966 6d72      cancelling firm
    80d8:	6177 6572 7220 6c65 616f 2e64 2e2e 0a0d     ware reload.....
    80e8:	1b00 315b 333b 6d32 4e49 4f46 5b1b 6d30     ..[1;32mINFO.[0m
    80f8:	2d20 5320 7465 6620 616c 6873 6f4d 6564      - Set flashMode
    8108:	6e45 6261 656c 2064 6f74 3120 6920 206e     Enabled to 1 in 
    8118:	6f79 7275 6b20 6c6c 6320 6e6f 6966 7567     your kll configu
    8128:	6172 6974 6e6f 002e 5b1b 3b31 3233 496d     ration...[1;32mI
    8138:	464e 1b4f 305b 206d 202d 614c 6579 2072     NFO.[0m - Layer 
    8148:	6544 7562 2067 6f4d 6564 203a 1b00 315b     Debug Mode: ..[1
    8158:	333b 6d32 4e49 4f46 5b1b 6d30 2d20 5320     ;32mINFO.[0m - S
    8168:	7465 6974 676e 4c20 7961 7265 4c20 2000     etting Layer L. 
    8178:	6f74 2d20 0020 5b1b 3b31 3233 496d 464e     to - ..[1;32mINF
    8188:	1b4f 305b 206d 202d 614d 7263 206f 6544     O.[0m - Macro De
    8198:	7562 2067 6f4d 6564 203a 1b00 315b 333b     bug Mode: ..[1;3
    81a8:	6d32 4e49 4f46 5b1b 6d30 2d20 4d20 6361     2mINFO.[0m - Mac
    81b8:	6f72 5020 6f72 6563 7373 6e69 2067 6f4d     ro Processing Mo
    81c8:	6564 203a 1b00 315b 333b 6d32 4e49 4f46     de: ..[1;32mINFO
    81d8:	5b1b 6d30 2d20 4c20 7961 7265 4c20 7369     .[0m - Layer Lis
    81e8:	0074 1b20 315b 286d 6564 6166 6c75 2974     t. .[1m(default)
    81f8:	5b1b 6d30 0d00 090a 2009 614c 6579 2072     .[0m..... Layer 
    8208:	7453 7461 3a65 0020 4620 7269 7473 2d20     State: . First -
    8218:	203e 614c 7473 4920 646e 6369 7365 203a     > Last Indices: 
    8228:	2000 3e2d 0020 5b1b 3b31 3233 496d 464e     . -> ..[1;32mINF
    8238:	1b4f 305b 206d 202d 6550 646e 6e69 2067     O.[0m - Pending 
    8248:	654b 2079 7645 6e65 7374 203a 2000 203a     Key Events: . : 
    8258:	1b00 315b 333b 6d32 4e49 4f46 5b1b 6d30     ..[1;32mINFO.[0m
    8268:	2d20 5020 6e65 6964 676e 5420 6972 6767      - Pending Trigg
    8278:	7265 4d20 6361 6f72 3a73 0020 5b1b 3b31     er Macros: ..[1;
    8288:	3233 496d 464e 1b4f 305b 206d 202d 6550     32mINFO.[0m - Pe
    8298:	646e 6e69 2067 6552 7573 746c 4d20 6361     nding Result Mac
    82a8:	6f72 3a73 0020 5b1b 3b31 3233 496d 464e     ros: ..[1;32mINF
    82b8:	1b4f 305b 206d 202d 7254 6769 6567 2072     O.[0m - Trigger 
    82c8:	614d 7263 736f 5220 6e61 6567 203a 3054     Macros Range: T0
    82d8:	2d20 203e 0054 5b1b 3b31 3233 496d 464e      -> T..[1;32mINF
    82e8:	1b4f 305b 206d 202d 6552 7573 746c 2020     O.[0m - Result  
    82f8:	614d 7263 736f 5220 6e61 6567 203a 3052     Macros Range: R0
    8308:	2d20 203e 0052 5b1b 3b31 3233 496d 464e      -> R..[1;32mINF
    8318:	1b4f 305b 206d 202d 7254 6769 6567 2072     O.[0m - Trigger 
    8328:	203a 6552 7573 746c 4d20 6361 6f72 5020     : Result Macro P
    8338:	6961 7372 0900 0054 3a20 5220 1b00 315b     airs..T. : R..[1
    8348:	333b 6d35 4544 5542 1b47 305b 206d 202d     ;35mDEBUG.[0m - 
    8358:	614c 6579 2072 2000 0030 614d 7263 5f6f     Layer . 0.Macro_
    8368:	616c 6579 5372 6174 6574 6c28 7961 7265     layerState(layer
    8378:	6e49 6564 2c78 616c 6579 5372 6174 6574     Index,layerState
    8388:	0029 614d 7263 5f6f 616c 6579 4c72 7461     ).Macro_layerLat
    8398:	6863 6c28 7961 7265 6e49 6564 2978 4d00     ch(layerIndex).M
    83a8:	6361 6f72 6c5f 7961 7265 6f4c 6b63 6c28     acro_layerLock(l
    83b8:	7961 7265 6e49 6564 2978 4d00 6361 6f72     ayerIndex).Macro
    83c8:	6c5f 7961 7265 6853 6669 2874 616c 6579     _layerShift(laye
    83d8:	4972 646e 7865 0029 614d 7263 5f6f 616c     rIndex).Macro_la
    83e8:	6579 5272 746f 7461 2865 7270 7665 6f69     yerRotate(previo
    83f8:	7375 0029 5b1b 3b31 3b35 3133 456d 5252     us)..[1;5;31mERR
    8408:	524f 5b1b 6d30 2d20 5320 6163 206e 6f43     OR.[0m - Scan Co
    8418:	6564 6820 7361 6e20 206f 6564 6966 656e     de has no define
    8428:	2064 7254 6769 6567 2072 614d 7263 3a6f     d Trigger Macro:
    8438:	0020 5b1b 3b31 3333 576d 5241 494e 474e      ..[1;33mWARNING
    8448:	5b1b 6d30 2d20 5320 6163 436e 646f 2065     .[0m - ScanCode 
    8458:	7369 6f20 7475 6f20 2066 6172 676e 2f65     is out of range/
    8468:	6f6e 2074 6564 6966 656e 3a64 0020 5b1b     not defined: ..[
    8478:	3b31 3533 446d 4245 4755 5b1b 6d30 2d20     1;35mDEBUG.[0m -
    8488:	4d20 6361 6f72 5320 6574 0d70 000a 5b1b      Macro Step....[
    8498:	3b31 3233 496d 464e 1b4f 305b 206d 202d     1;32mINFO.[0m - 
    84a8:	7254 6769 6567 2072 614d 7263 206f 6e49     Trigger Macro In
    84b8:	6564 3a78 0020 007c 002b 003b 0a0d 6f50     dex: .|.+.;...Po
    84c8:	6973 6974 6e6f 203a 0d00 520a 7365 6c75     sition: ...Resul
    84d8:	2074 614d 7263 206f 6e49 6564 3a78 0020     t Macro Index: .
    84e8:	0a0d 7254 6769 6567 2072 614d 7263 206f     ..Trigger Macro 
    84f8:	7453 7461 3a65 0020 6157 7469 6e69 0067     State: .Waiting.
    8508:	5b1b 3b31 3233 496d 464e 1b4f 305b 206d     .[1;32mINFO.[0m 
    8518:	202d 6552 7573 746c 4d20 6361 6f72 4920     - Result Macro I
    8528:	646e 7865 203a 2c00 0d00 460a 6e69 6c61     ndex: .,...Final
    8538:	5420 6972 6767 7265 5320 6174 6574 2820      Trigger State (
    8548:	7453 7461 2f65 7954 6570 3a29 0020 002f     State/Type): ./.
    8558:	6163 4c70 7369 0074 6163 5370 6c65 6365     capList.capSelec
    8568:	0074 656b 4879 6c6f 0064 656b 5079 6572     t.keyHold.keyPre
    8578:	7373 6b00 7965 6552 656c 7361 0065 616c     ss.keyRelease.la
    8588:	6579 4472 6265 6775 6c00 7961 7265 694c     yerDebug.layerLi
    8598:	7473 6c00 7961 7265 7453 7461 0065 616d     st.layerState.ma
    85a8:	7263 446f 6265 6775 6d00 6361 6f72 694c     croDebug.macroLi
    85b8:	7473 6d00 6361 6f72 7250 636f 6d00 6361     st.macroProc.mac
    85c8:	6f72 6853 776f 6d00 6361 6f72 7453 7065     roShow.macroStep
    85d8:	4400 203a 6857 7469 4665 786f 2b20 7320     .D: WhiteFox + s
    85e8:	6474 7546 636e 614d 0070 3a31 5720 6968     tdFuncMap.1: Whi
    85f8:	6574 6f46 2078 202b 7473 4664 6e75 4d63     teFox + stdFuncM
    8608:	7061 3200 203a 6857 7469 4665 786f 2b20     ap.2: WhiteFox +
    8618:	7320 6474 7546 636e 614d 0070                stdFuncMap.

00008624 <tm22_guide>:
    8624:	0001 3301 0100                                   ...3.

00008629 <rm51_guide>:
    8629:	0d01 00e2                                   ....

0000862d <rm23_guide>:
    862d:	0d01 002a                                   ..*.

00008631 <rm75_guide>:
    8631:	0d01 004d                                   ..M.

00008635 <rm47_guide>:
    8635:	0d01 00e7                                   ....

00008639 <rm19_guide>:
    8639:	0d01 004f                                   ..O.

0000863d <macroShowCLIDict_DescEntry>:
    863d:	6853 776f 7420 6568 6d20 6361 6f72 6320     Show the macro c
    864d:	726f 6572 7073 6e6f 6964 676e 7420 206f     orresponding to 
    865d:	6874 2065 6967 6576 206e 6e69 6564 2e78     the given index.
    866d:	0a0d 0909 5b1b 3533 546d 3631 5b1b 6d30     .....[35mT16.[0m
    867d:	4920 646e 7865 6465 5420 6972 6767 7265      Indexed Trigger
    868d:	4d20 6361 6f72 3020 3178 2c30 1b20 335b      Macro 0x10, .[3
    869d:	6d35 3152 1b32 305b 206d 6e49 6564 6578     5mR12.[0m Indexe
    86ad:	2064 6552 7573 746c 4d20 6361 6f72 3020     d Result Macro 0
    86bd:	3078 0043                                   x0C.

000086c1 <tm80_guide>:
    86c1:	0001 0701 0100                                   .....

000086c6 <tm52_guide>:
    86c6:	0001 2701 0100                                   ...'.

000086cb <tm48_guide>:
    86cb:	0001 2a01 0100                                   ...*.

000086d0 <default_tl_0x20>:
    86d0:	0001 0000 0018 0000                         ........

000086d8 <default_tl_0x21>:
    86d8:	0001 0000 001d 0000                         ........

000086e0 <default_tl_0x22>:
    86e0:	0001 0000 0008 0000                         ........

000086e8 <default_tl_0x23>:
    86e8:	0001 0000 000d 0000                         ........

000086f0 <default_tl_0x24>:
    86f0:	0001 0000 0011 0000                         ........

000086f8 <default_tl_0x25>:
    86f8:	0001 0000 0045 0000                         ....E...

00008700 <default_tl_0x26>:
    8700:	0001 0000 0001 0000                         ........

00008708 <default_tl_0x27>:
    8708:	0001 0000 0034 0000                         ....4...

00008710 <default_tl_0x28>:
    8710:	0001 0000 0042 0000                         ....B...

00008718 <default_tl_0x29>:
    8718:	0001 0000 0046 0000                         ....F...

00008720 <tm9_guide>:
    8720:	0001 1401 0100                                   .....

00008725 <rm10_guide>:
    8725:	0d01 0010 0000 0100                              .......

0000872c <default_tl_0x2A>:
    872c:	0001 0000 0030 0000 5b1b 3b31 3b35 3133     ....0....[1;5;31
    873c:	456d 5252 524f 5b1b 6d30 2d20 4c20 4445     mERROR.[0m - LED
    874c:	5320 6174 6574 5420 7079 2065 202d 6f4e      State Type - No
    875c:	2074 6d69 6c70 6d65 6e65 6574 2e64 2e2e     t implemented...
    876c:	0a0d 1b00 315b 353b 333b 6d31 5245 4f52     ....[1;5;31mERRO
    877c:	1b52 305b 206d 202d 6e41 6c61 676f 5320     R.[0m - Analog S
    878c:	6174 6574 5420 7079 2065 202d 6f4e 2074     tate Type - Not 
    879c:	6d69 6c70 6d65 6e65 6574 2e64 2e2e 0a0d     implemented.....
    87ac:	1b00 315b 353b 333b 6d31 5245 4f52 1b52     ..[1;5;31mERROR.
    87bc:	305b 206d 202d 6e49 6176 696c 2064 7453     [0m - Invalid St
    87cc:	7461 2065 7954 6570 202e 6854 7369 6920     ate Type. This i
    87dc:	2073 2061 7562 2e67 0a0d 4b00                    s a bug....

000087e7 <kbdProtocolCLIDict_DescEntry>:
    87e7:	654b 6279 616f 6472 5020 6f72 6f74 6f63     Keyboard Protoco
    87f7:	206c 6f4d 6564 203a 2030 202d 6f42 746f     l Mode: 0 - Boot
    8807:	202c 2031 202d 534f 4e2f 524b 204f 6f4d     , 1 - OS/NKRO Mo
    8817:	6564 5000                                        de.

0000881a <setKeysCLIDict_DescEntry>:
    881a:	7250 7065 7261 2065 2061 7073 6361 2065     Prepare a space 
    882a:	6573 6170 6172 6574 2064 696c 7473 6f20     separated list o
    883a:	2066 5355 2042 6f63 6564 2073 6428 6365     f USB codes (dec
    884a:	6d69 6c61 2e29 5720 6961 7374 7520 746e     imal). Waits unt
    885a:	6c69 1b20 335b 6d35 6573 646e 654b 7379     il .[35msendKeys
    886a:	5b1b 6d30 002e                              .[0m..

00008870 <outputCLIDictName>:
    8870:	5355 2042 6f4d 7564 656c 4320 6d6f 616d     USB Module Comma
    8880:	646e 0073                                   nds.

00008884 <CSWTCH.84>:
    8884:	0201 0403 0605 0007 0201 0403 0605 0007     ................
    8894:	0201 0403 0605 0007 0201 0403 0605 0007     ................
    88a4:	0201 0403 0605 0007 0201 0403 0605 0007          ...............

000088b3 <CSWTCH.86>:
    88b3:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    88c3:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    88d3:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    88e3:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    88f3:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8903:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    8913:	0100 0302 0504 0706 0100 0302 0504 0706     ................

00008923 <CSWTCH.87>:
    8923:	0100 0302 0504 0706                         ........

0000892b <CSWTCH.89>:
    892b:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    893b:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    894b:	0100 0302 0504 0706 0100 0302 0504 0706     ................
    895b:	6100                                             .

0000895c <outputCLIDict>:
    895c:	8d61 0000 87e7 0000 4559 0000 8d6d 0000     a.......YE..m...
    896c:	8de8 0000 45dd 0000 8d79 0000 8e68 0000     .....E..y...h...
    897c:	4581 0000 8d82 0000 8e02 0000 4535 0000     .E..........5E..
    898c:	8d8b 0000 881a 0000 45a9 0000 8d93 0000     .........E......
    899c:	89bc 0000 4601 0000 8d9a 0000 8da6 0000     .....F..........
    89ac:	4621 0000 0000 0000 0000 0000 0000 0000     !F..............

000089bc <setModCLIDict_DescEntry>:
    89bc:	6553 2074 6874 2065 6f6d 6664 6569 2072     Set the modfier 
    89cc:	7962 6574 0d3a 090a 3109 4c20 7443 6c72     byte:....1 LCtrl
    89dc:	202c 2032 534c 6668 2c74 3420 4c20 6c41     , 2 LShft, 4 LAl
    89ec:	2c74 3820 4c20 5547 2c49 3120 2036 4352     t, 8 LGUI, 16 RC
    89fc:	7274 2c6c 3320 2032 5352 6668 2c74 3620     trl, 32 RShft, 6
    8a0c:	2034 4152 746c 202c 3231 2038 4752 4955     4 RAlt, 128 RGUI
    8a1c:	1b00 315b 333b 6d32 4e49 4f46 5b1b 6d30     ..[1;32mINFO.[0m
    8a2c:	2d20 4b20 7965 6f62 7261 2064 7250 746f      - Keyboard Prot
    8a3c:	636f 6c6f 203a 1b00 315b 333b 6d32 4e49     ocol: ..[1;32mIN
    8a4c:	4f46 5b1b 6d30 2d20 4c20 4445 5320 6174     FO.[0m - LED Sta
    8a5c:	6574 203a 1b00 315b 333b 6d32 4e49 4f46     te: ..[1;32mINFO
    8a6c:	5b1b 6d30 2d20 5520 4253 4920 696e 2074     .[0m - USB Init 
    8a7c:	6954 656d 203a 2000 736d 2d20 0020 7420     Time: . ms - . t
    8a8c:	6369 736b 4f00 7475 7570 5f74 6f63 736e     icks.Output_cons
    8a9c:	7443 6c72 6553 646e 6328 6e6f 4373 646f     CtrlSend(consCod
    8aac:	2965 1b00 315b 333b 6d33 4157 4e52 4e49     e)..[1;33mWARNIN
    8abc:	1b47 305b 206d 202d 6f43 736e 6d75 7265     G.[0m - Consumer
    8acc:	4320 6e6f 7274 6c6f 6920 2073 6f6e 2074      Control is not 
    8adc:	6d69 6c70 6d65 6e65 6574 2064 6f66 2072     implemented for 
    8aec:	6f42 746f 4d20 646f 0d65 000a 754f 7074     Boot Mode...Outp
    8afc:	7475 6e5f 6e6f 5365 6e65 2864 0029 754f     ut_noneSend().Ou
    8b0c:	7074 7475 735f 7379 7443 6c72 6553 646e     tput_sysCtrlSend
    8b1c:	7328 7379 6f43 6564 0029 5b1b 3b31 3333     (sysCode)..[1;33
    8b2c:	576d 5241 494e 474e 5b1b 6d30 2d20 5320     mWARNING.[0m - S
    8b3c:	7379 6574 206d 6f43 746e 6f72 206c 7369     ystem Control is
    8b4c:	6e20 746f 6920 706d 656c 656d 746e 6465      not implemented
    8b5c:	6620 726f 4220 6f6f 2074 6f4d 6564 0a0d      for Boot Mode..
    8b6c:	4f00 7475 7570 5f74 6c66 7361 4d68 646f     .Output_flashMod
    8b7c:	2865 0029 754f 7074 7475 755f 6273 6f4d     e().Output_usbMo
    8b8c:	7375 2865 6f6d 7375 4265 7475 6f74 2c6e     use(mouseButton,
    8b9c:	6572 586c 722c 6c65 2959 4f00 7475 7570     relX,relY).Outpu
    8bac:	5f74 626b 5064 6f72 6f74 6f63 426c 6f6f     t_kbdProtocolBoo
    8bbc:	2874 0029 754f 7074 7475 6b5f 6462 7250     t().Output_kbdPr
    8bcc:	746f 636f 6c6f 4b4e 4f52 2928 4f00 7475     otocolNKRO().Out
    8bdc:	7570 5f74 6f74 6767 656c 624b 5064 6f72     put_toggleKbdPro
    8bec:	6f74 6f63 286c 0029 754f 7074 7475 755f     tocol().Output_u
    8bfc:	6273 6f43 6564 6553 646e 7528 6273 6f43     sbCodeSend(usbCo
    8c0c:	6564 0029 5b1b 3b31 3333 576d 5241 494e     de)..[1;33mWARNI
    8c1c:	474e 5b1b 6d30 2d20 5520 4253 4b20 7965     NG.[0m - USB Key
    8c2c:	6c20 6d69 7469 7220 6165 6863 6465 0a0d      limit reached..
    8c3c:	1b00 315b 333b 6d33 4157 4e52 4e49 1b47     ..[1;33mWARNING.
    8c4c:	305b 206d 202d 5355 2042 6f43 6564 6120     [0m - USB Code a
    8c5c:	6f62 6576 3120 3430 302f 3678 2038 6e69     bove 104/0x68 in
    8c6c:	4220 6f6f 2074 6f4d 6564 203a 1b00 315b      Boot Mode: ..[1
    8c7c:	333b 6d33 4157 4e52 4e49 1b47 305b 206d     ;33mWARNING.[0m 
    8c8c:	202d 5355 2042 6f43 6564 6e20 746f 7720     - USB Code not w
    8c9c:	7469 6968 206e 2d34 3934 2820 7830 2d34     ithin 4-49 (0x4-
    8cac:	7830 3133 2c29 3520 2d31 3531 2035 3028     0x31), 51-155 (0
    8cbc:	3378 2d33 7830 4239 2c29 3120 3735 312d     x33-0x9B), 157-1
    8ccc:	3436 2820 7830 4439 302d 4178 2934 202c     64 (0x9D-0xA4), 
    8cdc:	3731 2d36 3232 2031 3028 4278 2d30 7830     176-221 (0xB0-0x
    8cec:	4444 2029 726f 3220 3432 322d 3133 2820     DD) or 224-231 (
    8cfc:	7830 3045 302d 4578 2937 4e20 524b 204f     0xE0-0xE7) NKRO 
    8d0c:	6f4d 6564 203a 1b00 315b 333b 6d32 4e49     Mode: ..[1;32mIN
    8d1c:	4f46 5b1b 6d30 2d20 4520 7478 7265 616e     FO.[0m - Externa
    8d2c:	206c 7641 6961 616c 6c62 2065 7543 7272     l Available Curr
    8d3c:	6e65 2074 6843 6e61 6567 2e64 5420 746f     ent Changed. Tot
    8d4c:	6c61 4120 6176 6c69 6261 656c 203a 2000     al Available: . 
    8d5c:	416d 0a0d 6b00 6462 7250 746f 636f 6c6f     mA...kbdProtocol
    8d6c:	6f00 7475 7570 4474 6265 6775 7200 6165     .outputDebug.rea
    8d7c:	4c64 4445 0073 6573 646e 654b 7379 7300     dLEDs.sendKeys.s
    8d8c:	7465 654b 7379 7300 7465 6f4d 0064 7375     etKeys.setMod.us
    8d9c:	4962 696e 5474 6d69 0065                    bInitTime.

00008da6 <usbInitTimeCLIDict_DescEntry>:
    8da6:	6944 7073 616c 7379 7420 6568 7420 6d69     Displays the tim
    8db6:	2065 6e69 6d20 2073 7266 6d6f 7520 6273     e in ms from usb
    8dc6:	695f 696e 2874 2029 6974 6c6c 7420 6568     _init() till the
    8dd6:	6c20 7361 2074 6573 7574 2070 6163 6c6c      last setup call
    8de6:	002e                                        ..

00008de8 <outputDebugCLIDict_DescEntry>:
    8de8:	6f54 6767 656c 4f20 7475 7570 2074 6544     Toggle Output De
    8df8:	7562 2067 6f6d 6564 002e                    bug mode..

00008e02 <sendKeysCLIDict_DescEntry>:
    8e02:	6553 646e 7420 6568 7020 6572 6170 6572     Send the prepare
    8e12:	2064 696c 7473 6f20 2066 5355 2042 6f63     d list of USB co
    8e22:	6564 2073 6e61 2064 6f6d 6964 6966 7265     des and modifier
    8e32:	6220 7479 2e65 0000                               byte..

00008e39 <CSWTCH.83>:
    8e39:	0000 0000 0000 0100 0101 0101 0101 0201     ................
    8e49:	0202 0202 0202 0302 0303 0303 0303 0403     ................
    8e59:	0404 0404 0404 0504 0505 0505 0505 5205          ...............

00008e68 <readLEDsCLIDict_DescEntry>:
    8e68:	6552 6461 4c20 4445 6220 7479 3a65 0a0d     Read LED byte:..
    8e78:	0909 2031 754e 4c6d 6b63 202c 2032 6143     ..1 NumLck, 2 Ca
    8e88:	7370 634c 2c6b 3420 5320 7263 4c6c 6b63     psLck, 4 ScrlLck
    8e98:	202c 3631 4b20 6e61 2c61 6520 6374 002e     , 16 Kana, etc..

00008ea8 <CSWTCH.85>:
    8ea8:	0606 0606 0606 0606 0707 0707 0707 0707     ................
    8eb8:	0808 0808 0808 0808 0909 0909 0909 0909     ................
    8ec8:	0a0a 0a0a 0a0a 0a0a 0b0b 0b0b 0b0b 0b0b     ................
    8ed8:	0c0c 0c0c 0c0c 0c0c 0d0d 0d0d 0d0d 0d0d     ................
    8ee8:	0e0e 0e0e 0e0e 0e0e 0f0f 0f0f 0f0f 0f0f     ................
    8ef8:	1010 1010 1010 1010 1111 1111 1111 1111     ................
    8f08:	1212 1212 1212 1212 1313 1313 1313 1313     ................

00008f18 <CSWTCH.88>:
    8f18:	1515 1515 1515 1515 1616 1616 1616 1616     ................
    8f28:	1717 1717 1717 1717 1818 1818 1818 1818     ................
    8f38:	1919 1919 1919 1919 1a1a 1a1a 1a1a 1a1a     ................

00008f48 <usb_endpoint_config_table>:
    8f48:	1515 1515 1519 1915 1515 0000               ............

00008f54 <usb_descriptor_list>:
    8f54:	0100 0000 8ed2 1fff 0012 0000 0200 0000     ................
    8f64:	8d9c 1fff 00af 0000 0600 0000 921f 1fff     ................
    8f74:	0001 0000 0a00 0000 921e 1fff 0001 0000     ................
    8f84:	0300 0000 8fea 1fff 0000 0000 0301 0409     ................
    8f94:	8f20 1fff 0000 0000 0302 0409 8f50 1fff      ...........P...
    8fa4:	0000 0000 0303 0409 8fee 1fff 0000 0000     ................
    8fb4:	2200 0000 8faa 1fff 003f 0000 2100 0000     ."......?....!..
    8fc4:	8dae 1fff 0009 0000 2200 0001 8cbd 1fff     ........."......
    8fd4:	007d 0000 2100 0001 8dc7 1fff 0009 0000     }....!..........
    8fe4:	2200 0002 8e7e 1fff 0035 0000 2100 0002     ."..~...5....!..
    8ff4:	8de0 1fff 0009 0000 0304 0409 8eb4 1fff     ................
    9004:	0000 0000 0305 0409 8f32 1fff 0000 0000     ........2.......
    9014:	0306 0409 8d80 1fff 0000 0000 0307 0409     ................
    9024:	8ee4 1fff 0000 0000 0308 0409 8d3a 1fff     ............:...
    9034:	0000 0000 2200 0006 8e4b 1fff 0033 0000     ....."..K...3...
    9044:	2100 0006 8e3b 1fff 0009 0000 030a 0409     .!..;...........
    9054:	8d72 1fff 0000 0000 0000 0000 0000 0000     r...............
    9064:	0000 0000 5b1b 3b31 3333 576d 5241 494e     .....[1;33mWARNI
    9074:	474e 5b1b 6d30 2d20 5520 4253 4c20 776f     NG.[0m - USB Low
    9084:	5020 776f 7265 4e20 6765 746f 7461 6f69      Power Negotatio
    9094:	206e 6944 6173 6c62 6465 202c 6f63 646e     n Disabled, cond
    90a4:	7469 6f69 206e 6564 6574 7463 6465 002e     ition detected..
    90b4:	5b1b 3b31 3333 576d 5241 494e 474e 5b1b     .[1;33mWARNING.[
    90c4:	6d30 2d20 5320 5445 465f 4145 5554 4552     0m - SET_FEATURE
    90d4:	2d20 4420 7665 6369 2065 5677 6c61 6575      - Device wValue
    90e4:	0028 5b1b 3b31 3333 576d 5241 494e 474e     (..[1;33mWARNING
    90f4:	5b1b 6d30 2d20 4320 454c 5241 465f 4145     .[0m - CLEAR_FEA
    9104:	5554 4552 2d20 4920 746e 7265 6166 6563     TURE - Interface
    9114:	7720 6156 756c 2865 2900 7720 6e49 6564      wValue(.) wInde
    9124:	2878 1b00 315b 333b 6d33 4157 4e52 4e49     x(..[1;33mWARNIN
    9134:	1b47 305b 206d 202d 4553 5f54 4546 5441     G.[0m - SET_FEAT
    9144:	5255 2045 202d 6e49 6574 6672 6361 2065     URE - Interface 
    9154:	5677 6c61 6575 0028 5b1b 3b31 3333 576d     wValue(..[1;33mW
    9164:	5241 494e 474e 5b1b 6d30 2d20 5520 6b6e     ARNING.[0m - Unk
    9174:	6f6e 6e77 6920 746e 7265 6166 6563 2d20     nown interface -
    9184:	0020 5b1b 3b31 3b35 3133 456d 5252 524f      ..[1;5;31mERROR
    9194:	5b1b 6d30 2d20 5520 4253 6e20 746f 6320     .[0m - USB not c
    91a4:	6e6f 6966 7567 6572 2e64 2e2e 0a0d 1b00     onfigured.......
    91b4:	315b 333b 6d33 4157 4e52 4e49 1b47 305b     [1;33mWARNING.[0
    91c4:	206d 202d 5355 2042 7254 6e61 6d73 7469     m - USB Transmit
    91d4:	5420 6d69 6f65 7475 2e2e 612e 7475 2d6f      Timeout...auto-
    91e4:	6572 7473 7261 2074 6964 6173 6c62 6465     restart disabled
    91f4:	0a0d 5300 7379 7443 6c72 005b 205d 0a0d     ...SysCtrl[.] ..
    9204:	4300 6e6f 4373 7274 5b6c 1b00 315b 333b     .ConsCtrl[..[1;3
    9214:	6d35 4544 5542 1b47 305b 206d 202d 6f42     5mDEBUG.[0m - Bo
    9224:	746f 5520 4253 203a 1b00 315b 333b 6d35     ot USB: ..[1;35m
    9234:	4544 5542 1b47 305b 206d 202d 4b4e 4f52     DEBUG.[0m - NKRO
    9244:	5520 4253 203a 1b00 315b 333b 6d33 4157      USB: ..[1;33mWA
    9254:	4e52 4e49 1b47 305b 206d 202d 5355 2042     RNING.[0m - USB 
    9264:	7254 6e61 6d73 7469 5420 6d69 6f65 7475     Transmit Timeout
    9274:	2e2e 0d2e 000a 0000 0000                    ..........

0000927e <helpCLIDict_DescEntry>:
    927e:	6f59 2775 6572 6c20 6f6f 696b 676e 6120     You're looking a
    928e:	2074 7469 3a20 0050                         t it :P.

00009296 <restartCLIDict_DescEntry>:
    9296:	6553 646e 2073 2061 6f73 7466 6177 6572     Sends a software
    92a6:	7220 7365 6174 7472 202c 6873 756f 646c      restart, should
    92b6:	6220 2065 6973 696d 616c 2072 6f74 7020      be similar to p
    92c6:	776f 7265 6e69 2067 6e6f 7420 6568 6420     owering on the d
    92d6:	7665 6369 2e65 4300                              evice..

000092dd <clearCLIDict_DescEntry>:
    92dd:	6c43 6165 2072 6874 2065 6373 6572 6e65     Clear the screen
    92ed:	002e                                        ..

000092ef <reloadCLIDict_DescEntry>:
    92ef:	6953 6e67 6c61 2073 696d 7263 636f 6e6f     Signals microcon
    92ff:	7274 6c6f 656c 2072 6f74 7220 6665 616c     troller to refla
    930f:	6873 722f 6c65 616f 2e64 5600                    sh/reload..

0000931a <versionCLIDict_DescEntry>:
    931a:	6556 7372 6f69 206e 6e69 6f66 6d72 7461     Version informat
    932a:	6f69 206e 6261 756f 2074 6874 7369 6620     ion about this f
    933a:	7269 776d 7261 2e65 1b00 325b 1b4a 485b     irmware...[2J.[H
    934a:	000d 631b 0d00 1b0a 315b 333b 6d32 1b00     ...c....[1;32m..
    935a:	305b 0d6d 000a 1b20 335b 6d35 2000 5b1b     [0m... .[35m. .[
    936a:	6d31 6552 6976 6973 6e6f 1b3a 305b 206d     1mRevision:.[0m 
    937a:	2020 2020 6520 3164 6539 3239 6165 3464          ed19e92ead4
    938a:	3330 3535 6335 6235 3630 3739 6165 3934     03555c5b0697ea49
    939a:	6538 3466 6632 3038 6435 3539 0d30 000a     8ef42f805d950...
    93aa:	1b20 315b 426d 6172 636e 3a68 5b1b 6d30      .[1mBranch:.[0m
    93ba:	2020 2020 2020 2020 616d 7473 7265 0a0d             master..
    93ca:	2000 5b1b 6d31 7254 6565 5320 6174 7574     . .[1mTree Statu
    93da:	3a73 5b1b 6d30 2020 4320 656c 6e61 0a0d     s:.[0m   Clean..
    93ea:	0d09 000a 1b20 315b 526d 7065 206f 724f     .... .[1mRepo Or
    93fa:	6769 6e69 1b3a 305b 206d 2020 7468 7074     igin:.[0m   http
    940a:	3a73 2f2f 6967 6874 6275 632e 6d6f 6b2f     s://github.com/k
    941a:	6969 6f62 6468 632f 6e6f 7274 6c6f 656c     iibohd/controlle
    942a:	0d72 000a 1b20 315b 436d 6d6f 696d 2074     r... .[1mCommit 
    943a:	6144 6574 1b3a 305b 206d 2020 3032 3631     Date:.[0m   2016
    944a:	302d 2d36 3231 3120 3a35 3335 323a 2035     -06-12 15:53:25 
    945a:	302d 3037 0d30 000a 1b20 315b 436d 6d6f     -0700... .[1mCom
    946a:	696d 2074 7541 6874 726f 1b3a 305b 206d     mit Author:.[0m 
    947a:	614a 6f63 2062 6c41 7865 6e61 6564 2072     Jacob Alexander 
    948a:	683c 6161 6174 6b40 6969 6f62 6468 632e     <haata@kiibohd.c
    949a:	6d6f 0d3e 000a 1b20 315b 426d 6975 646c     om>... .[1mBuild
    94aa:	4420 7461 3a65 5b1b 6d30 2020 2020 3032      Date:.[0m    20
    94ba:	3631 302d 2d37 3132 3220 3a32 3235 323a     16-07-21 22:52:2
    94ca:	2030 302d 3035 0d30 000a 1b20 315b 426d     0 -0500... .[1mB
    94da:	6975 646c 4f20 3a53 5b1b 6d30 2020 2020     uild OS:.[0m    
    94ea:	2020 6144 7772 6e69 312d 2e35 2e35 0d30       Darwin-15.5.0.
    94fa:	000a 1b20 315b 416d 6372 6968 6574 7463     .. .[1mArchitect
    950a:	7275 3a65 5b1b 6d30 2020 7261 0d6d 000a     ure:.[0m  arm...
    951a:	1b20 315b 436d 6968 3a70 5b1b 6d30 2020      .[1mChip:.[0m  
    952a:	2020 2020 2020 2020 6b6d 3032 7864 3532             mk20dx25
    953a:	7636 686c 0d37 000a 1b20 315b 436d 5550     6vlh7... .[1mCPU
    954a:	1b3a 305b 206d 2020 2020 2020 2020 2020     :.[0m           
    955a:	6f63 7472 7865 6d2d 0d34 000a 1b20 315b     cortex-m4... .[1
    956a:	446d 7665 6369 3a65 5b1b 6d30 2020 2020     mDevice:.[0m    
    957a:	2020 2020 654b 6279 616f 6472 0a0d 2000         Keyboard... 
    958a:	5b1b 6d31 6f4d 7564 656c 3a73 5b1b 6d30     .[1mModules:.[0m
    959a:	2020 2020 2020 5320 6163 286e 6857 7469            Scan(Whit
    95aa:	4665 786f 2029 614d 7263 286f 6150 7472     eFox) Macro(Part
    95ba:	6169 4d6c 7061 2029 754f 7074 7475 7028     ialMap) Output(p
    95ca:	726a 5563 4253 2029 6544 7562 2867 7566     jrcUSB) Debug(fu
    95da:	6c6c 0d29 000a 1b20 315b 556d 696e 7571     ll)... .[1mUniqu
    95ea:	2065 6449 1b3a 305b 206d 2020 2020 1b00     e Id:.[0m     ..
    95fa:	315b 333b 6d32 4e49 4f46 5b1b 6d30 2d20     [1;32mINFO.[0m -
    960a:	4820 7865 6420 6265 6775 6d20 646f 2065      Hex debug mode 
    961a:	6964 6173 6c62 6465 2e2e 0d2e 000a 5b1b     disabled.......[
    962a:	3b31 3233 496d 464e 1b4f 305b 206d 202d     1;32mINFO.[0m - 
    963a:	6548 2078 6564 7562 2067 6f6d 6564 6520     Hex debug mode e
    964a:	616e 6c62 6465 2e2e 0d2e 000a 5b1b 3100     nabled.......[.1
    965a:	353b 333b 0031 5245 4f52 0052 5b1b 6d30     ;5;31.ERROR..[0m
    966a:	2d20 0020 0022 2022 7369 6e20 746f 6120      - ."." is not a
    967a:	7620 6c61 6469 6320 6d6f 616d 646e 2e2e      valid command..
    968a:	742e 7079 2065 5b1b 3533 686d 6c65 1b70     .type .[35mhelp.
    969a:	305b 006d 5b1b 3b31 3b35 3133 456d 5252     [0m..[1;5;31mERR
    96aa:	524f 5b1b 6d30 2d20 4d20 7861 6e20 6d75     OR.[0m - Max num
    96ba:	6562 2072 666f 6420 6369 6974 6e6f 7261     ber of dictionar
    96ca:	6569 2073 6564 6966 656e 2064 6c61 6572     ies defined alre
    96da:	6461 2e79 2e2e 0a0d 1b00 325b 0d4b 1b00     ady.......[2K...
    96ea:	315b 333b 6d34 1b3a 305b 206d 1b00 315b     [1;34m:.[0m ..[1
    96fa:	353b 333b 6d31 5245 4f52 1b52 305b 206d     ;5;31mERROR.[0m 
    970a:	202d 6553 6972 6c61 6c20 6e69 2065 7562     - Serial line bu
    971a:	6666 7265 6920 2073 7566 6c6c 202c 7264     ffer is full, dr
    972a:	706f 6970 676e 6320 6168 6172 7463 7265     opping character
    973a:	6120 646e 7220 7365 7465 6974 676e 2e2e      and resetting..
    974a:	0d2e 000a 5b1b 0d73 000a 5b1b 4b32 1b00     .....[s....[2K..
    975a:	755b 0800 0820 6300 656c 7261 6300 696c     [u.. ..clear.cli
    976a:	6544 7562 0067 6568 706c 6c00 6465 7200     Debug.help.led.r
    977a:	6c65 616f 0064 6572 6573 0074 6572 7473     eload.reset.rest
    978a:	7261 0074 6576 7372 6f69 006e               art.version.

00009796 <resetCLIDict_DescEntry>:
    9796:	6552 6573 7374 7420 6568 7420 7265 696d     Resets the termi
    97a6:	616e 206c 6162 6b63 7420 206f 6e69 7469     nal back to init
    97b6:	6169 206c 6573 7474 6e69 7367 002e          ial settings..

000097c4 <basicCLIDict>:
    97c4:	9761 0000 92dd 0000 5c31 0000 9767 0000     a.......1\..g...
    97d4:	98d7 0000 5e09 0000 9770 0000 927e 0000     .....^..p...~...
    97e4:	5c6d 0000 9775 0000 9830 0000 5d1d 0000     m\..u...0....]..
    97f4:	9779 0000 92ef 0000 5c3d 0000 9780 0000     y.......=\......
    9804:	9796 0000 5c61 0000 9786 0000 9296 0000     ....a\..........
    9814:	5d31 0000 978e 0000 931a 0000 5d35 0000     1]..........5]..
    9824:	0000 0000 0000 0000 0000 0000               ............

00009830 <ledCLIDict_DescEntry>:
    9830:	6e45 6261 656c 2f73 6944 6173 6c62 7365     Enables/Disables
    9840:	6920 646e 6369 7461 726f 4c20 4445 202e      indicator LED. 
    9850:	7254 2079 2061 6f63 7075 656c 7420 6d69     Try a couple tim
    9860:	7365 6a20 7375 2074 6e69 6320 7361 2065     es just in case 
    9870:	6874 2065 454c 2044 7369 6920 206e 6e61     the LED is in an
    9880:	6f20 6464 7320 6174 6574 0d2e 090a 1b09      odd state......
    9890:	335b 6d33 6157 6e72 6e69 1b67 305b 3a6d     [33mWarning.[0m:
    98a0:	4d20 7961 6120 7664 7265 6573 796c 6120      May adversely a
    98b0:	6666 6365 2074 6f73 656d 6d20 646f 6c75     ffect some modul
    98c0:	7365 2e2e 002e                              es....

000098c6 <basicCLIDictName>:
    98c6:	6547 656e 6172 206c 6f43 6d6d 6e61 7364     General Commands
    98d6:	4500                                             .

000098d7 <cliDebugCLIDict_DescEntry>:
    98d7:	6e45 6261 656c 2f73 6944 6173 6c62 7365     Enables/Disables
    98e7:	6820 7865 6f20 7475 7570 2074 666f 7420      hex output of t
    98f7:	6568 6d20 736f 2074 6572 6563 746e 6320     he most recent c
    9907:	696c 6920 706e 7475 002e 0000 0000               li input.....
